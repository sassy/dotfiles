'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var vscode = require('vscode');
var path = require('path');
var path__default = _interopDefault(path);
var fs = require('fs');
var readline = require('readline');
var util$1 = _interopDefault(require('util'));
var http = _interopDefault(require('http'));
var https = _interopDefault(require('https'));
var url = require('url');
var url__default = _interopDefault(url);
var assert = _interopDefault(require('assert'));
var stream = _interopDefault(require('stream'));
var tty = _interopDefault(require('tty'));
var os = _interopDefault(require('os'));
var zlib = _interopDefault(require('zlib'));

const REL_CONTROLLERS = path.join('app', 'controllers');
const REL_MODELS = path.join('app', 'models');
const REL_VIEWS = path.join('app', 'views');
const REL_LAYOUTS = path.join('app', 'views', 'layouts');
const REL_HELPERS = path.join('app', 'helpers');
const REL_JAVASCRIPTS = path.join('app', 'assets', 'javascripts');
const REL_STYLESHEETS = path.join('app', 'assets', 'stylesheets');
const REL_SPEC = 'spec';
const REL_TEST = 'test';
const REL_CONTROLLERS_CONCERNS = path.join('app', 'controllers', 'concerns');
const REL_MODELS_CONCERNS = path.join('app', 'models', 'concerns');
var FileType;
(function (FileType) {
    FileType[FileType["Controller"] = 0] = "Controller";
    FileType[FileType["ControllerConcerns"] = 1] = "ControllerConcerns";
    FileType[FileType["Model"] = 2] = "Model";
    FileType[FileType["ModelConcerns"] = 3] = "ModelConcerns";
    FileType[FileType["Layout"] = 4] = "Layout";
    FileType[FileType["View"] = 5] = "View";
    FileType[FileType["Helper"] = 6] = "Helper";
    FileType[FileType["Javascript"] = 7] = "Javascript";
    FileType[FileType["StyleSheet"] = 8] = "StyleSheet";
    FileType[FileType["Rspec"] = 9] = "Rspec";
    FileType[FileType["Test"] = 10] = "Test";
    FileType[FileType["Unkown"] = 11] = "Unkown";
})(FileType || (FileType = {}));
let FileTypeRelPath = new Map([
    [FileType.Controller, REL_CONTROLLERS],
    [FileType.ControllerConcerns, REL_CONTROLLERS_CONCERNS],
    [FileType.Model, REL_MODELS],
    [FileType.ModelConcerns, REL_MODELS_CONCERNS],
    [FileType.Layout, REL_LAYOUTS],
    [FileType.View, REL_VIEWS],
    [FileType.Helper, REL_HELPERS],
    [FileType.Javascript, REL_JAVASCRIPTS],
    [FileType.StyleSheet, REL_STYLESHEETS],
    [FileType.Rspec, REL_SPEC],
    [FileType.Test, REL_TEST],
]);
const PATTERNS = {
    CLASS_INHERIT_DECLARATION: /^class\s+[^<]+<\s+/,
    FUNCTION_DECLARATON: /^def\s+/,
    INCLUDE_DECLARATION: /^include\s+/,
    CAPITALIZED: /^[A-Z](?=[a-z])/,
    PARAMS_DECLARATION: /_params$/,
    LAYOUT_DECLARATION: /^layout\s+/,
    LAYOUT_MATCH: /^layout\s+(['":]?([A-Za-z\/0-9_]+)['"]?)/,
    RENDER_DECLARATION: /render[\(\s]/,
    RENDER_TO_STRING_DECLARATION: /render_to_string[\(\s]/,
    RENDER_MATCH: /([A-Za-z\/0-9_-]+(\.[A-Za-z0-9]+)*)/g,
    MODEL_RELATIONS: /^has_one|^has_many|^has_and_belongs_to_many|^belongs_to/,
    CONTROLLER_FILTERS: /^(skip_|prepend_)?(before|after|around)_(action|filter)/,
    HELPER_METHODS: /^helper_method/,
    CLASS_STATIC_METHOD_CALL: /(([A-Z][A-Za-z]+)\.[^\)]*)/,
};
const VIEWS_PATTERNS = {
    RENDER_PATTERN: /render/,
    RENDER_FUNC_PATTERN: /(escape_javascript|j)?[\s\(]render([\s\(]:([a-z]+)\s*=>\s*)?(["'])([^\4]+)\4/,
    RENDER_FUNC_PATTERN2: /(escape_javascript|j)?[\s\(]render([\s\(]([a-z]+):\s*)?(["'])([^\4]+)\4/,
};

function dectFileType(filePath) {
    for (const [key, value] of FileTypeRelPath) {
        if (filePath.indexOf(value) >= 0) {
            return key;
        }
    }
    return FileType.Unkown;
}
function flatten(arr) {
    return arr.reduce((flat, toFlatten) => {
        return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
    }, []);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var util = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.underbar_prefix = exports.uppercase = exports.space_or_underbar = exports.underbar = exports.id_suffix = void 0;
/**
 * @description These are regular expressions used for converting between String formats.
 * @private
 */
exports.id_suffix = new RegExp('(_ids|_id)$', 'g');
exports.underbar = new RegExp('_', 'g');
exports.space_or_underbar = new RegExp('[\ _]', 'g');
exports.uppercase = new RegExp('([A-Z])', 'g');
exports.underbar_prefix = new RegExp('^_');

});

var dasherize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.dasherize = void 0;
/**
 * This function replaces underscores with dashes in the string.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Replaces all spaces or underscores with dashes.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
 *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
 */

function dasherize(str) {
    return str.replace(util.space_or_underbar, '-');
}
exports.dasherize = dasherize;
exports.default = dasherize;

});

var ordinalize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.ordinalize = void 0;
/**
 * This function adds ordinalize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Return all found numbers their sequence like '22nd'.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
 */
function ordinalize(str) {
    const str_arr = str.split(' ');
    let i = 0;
    const j = str_arr.length;
    for (; i < j; i++) {
        let k = parseInt(str_arr[i], 10);
        if (!isNaN(k)) {
            let ltd = str_arr[i].substring(str_arr[i].length - 2);
            let ld = str_arr[i].substring(str_arr[i].length - 1);
            let suf = 'th';
            if (ltd != '11' && ltd != '12' && ltd != '13') {
                if (ld === '1') {
                    suf = 'st';
                }
                else if (ld === '2') {
                    suf = 'nd';
                }
                else if (ld === '3') {
                    suf = 'rd';
                }
            }
            str_arr[i] += suf;
        }
    }
    return str_arr.join(' ');
}
exports.ordinalize = ordinalize;
exports.default = ordinalize;

});

var indexOf_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.indexOf = void 0;
/**
 * This lets us detect if an Array contains a given element.
 * @public
 * @function
 * @param {Array} arr The subject array.
 * @param {Object} item Object to locate in the Array.
 * @param {Number} from_index Starts checking from this position in the Array.(optional)
 * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)
 * @returns {Number} Return index position in the Array of the passed item.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1
 *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0
 */
function indexOf(arr, item, from_index, compare_func) {
    if (!from_index) {
        from_index = -1;
    }
    let index = -1;
    let i = from_index;
    const j = arr.length;
    for (; i < j; i++) {
        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {
            index = i;
            break;
        }
    }
    return index;
}
exports.indexOf = indexOf;
exports.default = indexOf;

});

var _apply_rules_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports._apply_rules = void 0;

/**
 * A helper method that applies rules based replacement to a String.
 * @private
 * @function
 * @param {String} str String to modify and return based on the passed rules.
 * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement
 * @param {Array: [String]} skip Strings to skip if they match
 * @param {String} override String to return as though this method succeeded (used to conform to APIs)
 * @returns {String} Return passed String modified by passed rules.
 * @example
 *
 *     this._apply_rules( 'cows', singular_rules ); // === 'cow'
 */
function _apply_rules(str, rules, skip, override) {
    if (override) {
        str = override;
    }
    else {
        let ignore = (indexOf_1.indexOf(skip, str.toLowerCase()) > -1);
        if (!ignore) {
            let i = 0;
            let j = rules.length;
            for (; i < j; i++) {
                if (str.match(rules[i][0])) {
                    if (rules[i][1] !== undefined) {
                        str = str.replace(rules[i][0], rules[i][1]);
                    }
                    break;
                }
            }
        }
    }
    return str;
}
exports._apply_rules = _apply_rules;
exports.default = _apply_rules;

});

var uncountable_words = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.uncountable_words = void 0;
/**
 * @description This is a list of nouns that use the same form for both singular and plural.
 *              This list should remain entirely in lower case to correctly match Strings.
 * @private
 */
exports.uncountable_words = [
    // 'access',
    'accommodation',
    'adulthood',
    'advertising',
    'advice',
    'aggression',
    'aid',
    'air',
    'aircraft',
    'alcohol',
    'anger',
    'applause',
    'arithmetic',
    // 'art',
    'assistance',
    'athletics',
    // 'attention',
    'bacon',
    'baggage',
    // 'ballet',
    // 'beauty',
    'beef',
    // 'beer',
    // 'behavior',
    'biology',
    // 'billiards',
    'blood',
    'botany',
    // 'bowels',
    'bread',
    // 'business',
    'butter',
    'carbon',
    'cardboard',
    'cash',
    'chalk',
    'chaos',
    'chess',
    'crossroads',
    'countryside',
    // 'damage',
    'dancing',
    // 'danger',
    'deer',
    // 'delight',
    // 'dessert',
    'dignity',
    'dirt',
    // 'distribution',
    'dust',
    'economics',
    'education',
    'electricity',
    // 'employment',
    // 'energy',
    'engineering',
    'enjoyment',
    // 'entertainment',
    'envy',
    'equipment',
    'ethics',
    'evidence',
    'evolution',
    // 'failure',
    // 'faith',
    'fame',
    'fiction',
    // 'fish',
    'flour',
    'flu',
    'food',
    // 'freedom',
    // 'fruit',
    'fuel',
    'fun',
    // 'funeral',
    'furniture',
    'gallows',
    'garbage',
    'garlic',
    // 'gas',
    'genetics',
    // 'glass',
    'gold',
    'golf',
    'gossip',
    'grammar',
    // 'grass',
    'gratitude',
    'grief',
    // 'ground',
    'guilt',
    'gymnastics',
    // 'hair',
    'happiness',
    'hardware',
    'harm',
    'hate',
    'hatred',
    'health',
    'heat',
    // 'height',
    'help',
    'homework',
    'honesty',
    'honey',
    'hospitality',
    'housework',
    'humour',
    'hunger',
    'hydrogen',
    'ice',
    'importance',
    'inflation',
    'information',
    // 'injustice',
    'innocence',
    // 'intelligence',
    'iron',
    'irony',
    'jam',
    // 'jealousy',
    // 'jelly',
    'jewelry',
    // 'joy',
    'judo',
    // 'juice',
    // 'justice',
    'karate',
    // 'kindness',
    'knowledge',
    // 'labour',
    'lack',
    // 'land',
    'laughter',
    'lava',
    'leather',
    'leisure',
    'lightning',
    'linguine',
    'linguini',
    'linguistics',
    'literature',
    'litter',
    'livestock',
    'logic',
    'loneliness',
    // 'love',
    'luck',
    'luggage',
    'macaroni',
    'machinery',
    'magic',
    // 'mail',
    'management',
    'mankind',
    'marble',
    'mathematics',
    'mayonnaise',
    'measles',
    // 'meat',
    // 'metal',
    'methane',
    'milk',
    'minus',
    'money',
    // 'moose',
    'mud',
    'music',
    'mumps',
    'nature',
    'news',
    'nitrogen',
    'nonsense',
    'nurture',
    'nutrition',
    'obedience',
    'obesity',
    // 'oil',
    'oxygen',
    // 'paper',
    // 'passion',
    'pasta',
    'patience',
    // 'permission',
    'physics',
    'poetry',
    'pollution',
    'poverty',
    // 'power',
    'pride',
    // 'production',
    // 'progress',
    // 'pronunciation',
    'psychology',
    'publicity',
    'punctuation',
    // 'quality',
    // 'quantity',
    'quartz',
    'racism',
    // 'rain',
    // 'recreation',
    'relaxation',
    'reliability',
    'research',
    'respect',
    'revenge',
    'rice',
    'rubbish',
    'rum',
    'safety',
    // 'salad',
    // 'salt',
    // 'sand',
    // 'satire',
    'scenery',
    'seafood',
    'seaside',
    'series',
    'shame',
    'sheep',
    'shopping',
    // 'silence',
    'sleep',
    // 'slang'
    'smoke',
    'smoking',
    'snow',
    'soap',
    'software',
    'soil',
    // 'sorrow',
    // 'soup',
    'spaghetti',
    // 'speed',
    'species',
    // 'spelling',
    // 'sport',
    'steam',
    // 'strength',
    'stuff',
    'stupidity',
    // 'success',
    // 'sugar',
    'sunshine',
    'symmetry',
    // 'tea',
    'tennis',
    'thirst',
    'thunder',
    'timber',
    // 'time',
    // 'toast',
    // 'tolerance',
    // 'trade',
    'traffic',
    'transportation',
    // 'travel',
    'trust',
    // 'understanding',
    'underwear',
    'unemployment',
    'unity',
    // 'usage',
    'validity',
    'veal',
    'vegetation',
    'vegetarianism',
    'vengeance',
    'violence',
    // 'vision',
    'vitality',
    'warmth',
    // 'water',
    'wealth',
    'weather',
    // 'weight',
    'welfare',
    'wheat',
    // 'whiskey',
    // 'width',
    'wildlife',
    // 'wine',
    'wisdom',
    // 'wood',
    // 'wool',
    // 'work',
    // 'yeast',
    'yoga',
    'zinc',
    'zoology',
];
exports.default = exports.uncountable_words;

});

var regex = createCommonjsModule(function (module, exports) {
/**
 * @description These rules translate from the singular form of a noun to its plural form.
 * @private
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.regex = void 0;
exports.regex = {
    plural: {
        men: new RegExp('^(m|wom)en$', 'gi'),
        people: new RegExp('(pe)ople$', 'gi'),
        children: new RegExp('(child)ren$', 'gi'),
        tia: new RegExp('([ti])a$', 'gi'),
        analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),
        hives: new RegExp('(hi|ti)ves$', 'gi'),
        curves: new RegExp('(curve)s$', 'gi'),
        lrves: new RegExp('([lr])ves$', 'gi'),
        aves: new RegExp('([a])ves$', 'gi'),
        foves: new RegExp('([^fo])ves$', 'gi'),
        movies: new RegExp('(m)ovies$', 'gi'),
        aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),
        series: new RegExp('(s)eries$', 'gi'),
        xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),
        mice: new RegExp('([m|l])ice$', 'gi'),
        buses: new RegExp('(bus)es$', 'gi'),
        oes: new RegExp('(o)es$', 'gi'),
        shoes: new RegExp('(shoe)s$', 'gi'),
        crises: new RegExp('(cris|ax|test)es$', 'gi'),
        octopi: new RegExp('(octop|vir)i$', 'gi'),
        aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),
        summonses: new RegExp('^(summons)es$', 'gi'),
        oxen: new RegExp('^(ox)en', 'gi'),
        matrices: new RegExp('(matr)ices$', 'gi'),
        vertices: new RegExp('(vert|ind)ices$', 'gi'),
        feet: new RegExp('^feet$', 'gi'),
        teeth: new RegExp('^teeth$', 'gi'),
        geese: new RegExp('^geese$', 'gi'),
        quizzes: new RegExp('(quiz)zes$', 'gi'),
        whereases: new RegExp('^(whereas)es$', 'gi'),
        criteria: new RegExp('^(criteri)a$', 'gi'),
        genera: new RegExp('^genera$', 'gi'),
        ss: new RegExp('ss$', 'gi'),
        s: new RegExp('s$', 'gi'),
    },
    singular: {
        man: new RegExp('^(m|wom)an$', 'gi'),
        person: new RegExp('(pe)rson$', 'gi'),
        child: new RegExp('(child)$', 'gi'),
        ox: new RegExp('^(ox)$', 'gi'),
        axis: new RegExp('(ax|test)is$', 'gi'),
        octopus: new RegExp('(octop|vir)us$', 'gi'),
        alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),
        summons: new RegExp('^(summons)$', 'gi'),
        bus: new RegExp('(bu)s$', 'gi'),
        buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),
        tium: new RegExp('([ti])um$', 'gi'),
        sis: new RegExp('sis$', 'gi'),
        ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),
        hive: new RegExp('(hi|ti)ve$', 'gi'),
        aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),
        x: new RegExp('(x|ch|ss|sh)$', 'gi'),
        matrix: new RegExp('(matr)ix$', 'gi'),
        vertex: new RegExp('(vert|ind)ex$', 'gi'),
        mouse: new RegExp('([m|l])ouse$', 'gi'),
        foot: new RegExp('^foot$', 'gi'),
        tooth: new RegExp('^tooth$', 'gi'),
        goose: new RegExp('^goose$', 'gi'),
        quiz: new RegExp('(quiz)$', 'gi'),
        whereas: new RegExp('^(whereas)$', 'gi'),
        criterion: new RegExp('^(criteri)on$', 'gi'),
        genus: new RegExp('^genus$', 'gi'),
        s: new RegExp('s$', 'gi'),
        common: new RegExp('$', 'gi'),
    },
};
exports.default = exports.regex;

});

var plural_rules = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.plural_rules = void 0;

exports.plural_rules = [
    // do not replace if its already a plural word
    [regex.regex.plural.men],
    [regex.regex.plural.people],
    [regex.regex.plural.children],
    [regex.regex.plural.tia],
    [regex.regex.plural.analyses],
    [regex.regex.plural.hives],
    [regex.regex.plural.curves],
    [regex.regex.plural.lrves],
    [regex.regex.plural.foves],
    [regex.regex.plural.aeiouyies],
    [regex.regex.plural.series],
    [regex.regex.plural.movies],
    [regex.regex.plural.xes],
    [regex.regex.plural.mice],
    [regex.regex.plural.buses],
    [regex.regex.plural.oes],
    [regex.regex.plural.shoes],
    [regex.regex.plural.crises],
    [regex.regex.plural.octopi],
    [regex.regex.plural.aliases],
    [regex.regex.plural.summonses],
    [regex.regex.plural.oxen],
    [regex.regex.plural.matrices],
    [regex.regex.plural.feet],
    [regex.regex.plural.teeth],
    [regex.regex.plural.geese],
    [regex.regex.plural.quizzes],
    [regex.regex.plural.whereases],
    [regex.regex.plural.criteria],
    [regex.regex.plural.genera],
    // original rule
    [regex.regex.singular.man, '$1en'],
    [regex.regex.singular.person, '$1ople'],
    [regex.regex.singular.child, '$1ren'],
    [regex.regex.singular.ox, '$1en'],
    [regex.regex.singular.axis, '$1es'],
    [regex.regex.singular.octopus, '$1i'],
    [regex.regex.singular.alias, '$1es'],
    [regex.regex.singular.summons, '$1es'],
    [regex.regex.singular.bus, '$1ses'],
    [regex.regex.singular.buffalo, '$1oes'],
    [regex.regex.singular.tium, '$1a'],
    [regex.regex.singular.sis, 'ses'],
    [regex.regex.singular.ffe, '$1$2ves'],
    [regex.regex.singular.hive, '$1ves'],
    [regex.regex.singular.aeiouyy, '$1ies'],
    [regex.regex.singular.matrix, '$1ices'],
    [regex.regex.singular.vertex, '$1ices'],
    [regex.regex.singular.x, '$1es'],
    [regex.regex.singular.mouse, '$1ice'],
    [regex.regex.singular.foot, 'feet'],
    [regex.regex.singular.tooth, 'teeth'],
    [regex.regex.singular.goose, 'geese'],
    [regex.regex.singular.quiz, '$1zes'],
    [regex.regex.singular.whereas, '$1es'],
    [regex.regex.singular.criterion, '$1a'],
    [regex.regex.singular.genus, 'genera'],
    [regex.regex.singular.s, 's'],
    [regex.regex.singular.common, 's'],
];
exports.default = exports.plural_rules;

});

var pluralize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluralize = void 0;



/**
 * This function adds pluralization support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {String} plural Overrides normal output with said String.(optional)
 * @returns {String} Singular English language nouns are returned in plural form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.pluralize( 'person' ); // === 'people'
 *     inflection.pluralize( 'octopus' ); // === 'octopi'
 *     inflection.pluralize( 'Hat' ); // === 'Hats'
 *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
 */
function pluralize(str, plural) {
    return _apply_rules_1._apply_rules(str, plural_rules.plural_rules, uncountable_words.uncountable_words, plural);
}
exports.pluralize = pluralize;
exports.default = pluralize;

});

var singular_rules = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.singular_rules = void 0;

/**
 * @description These rules translate from the plural form of a noun to its singular form.
 * @private
 */
exports.singular_rules = [
    // do not replace if its already a singular word
    [regex.regex.singular.man],
    [regex.regex.singular.person],
    [regex.regex.singular.child],
    [regex.regex.singular.ox],
    [regex.regex.singular.axis],
    [regex.regex.singular.octopus],
    [regex.regex.singular.alias],
    [regex.regex.singular.summons],
    [regex.regex.singular.bus],
    [regex.regex.singular.buffalo],
    [regex.regex.singular.tium],
    [regex.regex.singular.sis],
    [regex.regex.singular.ffe],
    [regex.regex.singular.hive],
    [regex.regex.singular.aeiouyy],
    [regex.regex.singular.x],
    [regex.regex.singular.matrix],
    [regex.regex.singular.mouse],
    [regex.regex.singular.foot],
    [regex.regex.singular.tooth],
    [regex.regex.singular.goose],
    [regex.regex.singular.quiz],
    [regex.regex.singular.whereas],
    [regex.regex.singular.criterion],
    [regex.regex.singular.genus],
    // original rule
    [regex.regex.plural.men, '$1an'],
    [regex.regex.plural.people, '$1rson'],
    [regex.regex.plural.children, '$1'],
    [regex.regex.plural.genera, 'genus'],
    [regex.regex.plural.criteria, '$1on'],
    [regex.regex.plural.tia, '$1um'],
    [regex.regex.plural.analyses, '$1$2sis'],
    [regex.regex.plural.hives, '$1ve'],
    [regex.regex.plural.curves, '$1'],
    [regex.regex.plural.lrves, '$1f'],
    [regex.regex.plural.aves, '$1ve'],
    [regex.regex.plural.foves, '$1fe'],
    [regex.regex.plural.movies, '$1ovie'],
    [regex.regex.plural.aeiouyies, '$1y'],
    [regex.regex.plural.series, '$1eries'],
    [regex.regex.plural.xes, '$1'],
    [regex.regex.plural.mice, '$1ouse'],
    [regex.regex.plural.buses, '$1'],
    [regex.regex.plural.oes, '$1'],
    [regex.regex.plural.shoes, '$1'],
    [regex.regex.plural.crises, '$1is'],
    [regex.regex.plural.octopi, '$1us'],
    [regex.regex.plural.aliases, '$1'],
    [regex.regex.plural.summonses, '$1'],
    [regex.regex.plural.oxen, '$1'],
    [regex.regex.plural.matrices, '$1ix'],
    [regex.regex.plural.vertices, '$1ex'],
    [regex.regex.plural.feet, 'foot'],
    [regex.regex.plural.teeth, 'tooth'],
    [regex.regex.plural.geese, 'goose'],
    [regex.regex.plural.quizzes, '$1'],
    [regex.regex.plural.whereases, '$1'],
    [regex.regex.plural.ss, 'ss'],
    [regex.regex.plural.s, ''],
];
exports.default = exports.singular_rules;

});

var singularize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.singularize = void 0;



/**
 * This function adds singularization support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {String} singular Overrides normal output with said String.(optional)
 * @returns {String} Plural English language nouns are returned in singular form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.singularize( 'people' ); // === 'person'
 *     inflection.singularize( 'octopi' ); // === 'octopus'
 *     inflection.singularize( 'Hats' ); // === 'Hat'
 *     inflection.singularize( 'guys', 'person' ); // === 'person'
 */
function singularize(str, singular) {
    return _apply_rules_1._apply_rules(str, singular_rules.singular_rules, uncountable_words.uncountable_words, singular);
}
exports.singularize = singularize;
exports.default = singularize;

});

var inflect_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.inflect = void 0;




/**
 * This function will pluralize or singularlize a String appropriately based on an integer value
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Number} count The number to base pluralization off of.
 * @param {String} singular Overrides normal output with said String.(optional)
 * @param {String} plural Overrides normal output with said String.(optional)
 * @returns {String} English language nouns are returned in the plural or singular form based on the count.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.inflect( 'people' 1 ); // === 'person'
 *     inflection.inflect( 'octopi' 1 ); // === 'octopus'
 *     inflection.inflect( 'Hats' 1 ); // === 'Hat'
 *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'
 *     inflection.inflect( 'person', 2 ); // === 'people'
 *     inflection.inflect( 'octopus', 2 ); // === 'octopi'
 *     inflection.inflect( 'Hat', 2 ); // === 'Hats'
 *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'
 */
function inflect(str, count, singular, plural) {
    count = parseInt(count, 10);
    if (isNaN(count))
        return str;
    if (count === 0 || count > 1) {
        return _apply_rules_1._apply_rules(str, plural_rules.plural_rules, uncountable_words.uncountable_words, plural);
    }
    else {
        return _apply_rules_1._apply_rules(str, singular_rules.singular_rules, uncountable_words.uncountable_words, singular);
    }
}
exports.inflect = inflect;
exports.default = inflect;

});

var camelize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.camelize = void 0;
/**
 * This function adds camelization support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
 *                                 Passing true will lowercase it.
 * @returns {String} Lower case underscored words will be returned in camel case.
 *                  additionally '/' is translated to '::'
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
 *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
 */
function camelize(str, low_first_letter) {
    const str_path = str.split('/');
    let i = 0;
    const j = str_path.length;
    let str_arr, k, l, first;
    for (; i < j; i++) {
        str_arr = str_path[i].split('_');
        k = 0;
        l = str_arr.length;
        for (; k < l; k++) {
            if (k !== 0) {
                str_arr[k] = str_arr[k].toLowerCase();
            }
            first = str_arr[k].charAt(0);
            first = low_first_letter && i === 0 && k === 0
                ? first.toLowerCase() : first.toUpperCase();
            str_arr[k] = first + str_arr[k].substring(1);
        }
        str_path[i] = str_arr.join('');
    }
    return str_path.join('::');
}
exports.camelize = camelize;
exports.default = camelize;

});

var underscore_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.underscore = void 0;

/**
 * This function adds underscore support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)
 *                  Passing true will return as entered.
 * @returns {String} Camel cased words are returned as lower cased and underscored.
 *                  additionally '::' is translated to '/'.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
 *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
 *     inflection.underscore( 'MP', true ); // === 'MP'
 */
function underscore(str, all_upper_case) {
    if (all_upper_case && str === str.toUpperCase())
        return str;
    const str_path = str.split('::');
    let i = 0;
    const j = str_path.length;
    for (; i < j; i++) {
        str_path[i] = str_path[i].replace(util.uppercase, '_$1');
        str_path[i] = str_path[i].replace(util.underbar_prefix, '');
    }
    return str_path.join('/').toLowerCase();
}
exports.underscore = underscore;
exports.default = underscore;

});

var capitalize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalize = void 0;
/**
 * This function adds capitalization support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} All characters will be lower case and the first will be upper.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
 *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
 */
function capitalize(str) {
    str = str.toLowerCase();
    return str.substring(0, 1).toUpperCase() + str.substring(1);
}
exports.capitalize = capitalize;
exports.default = capitalize;

});

var non_titlecased_words = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.non_titlecased_words = void 0;
/**
 * @description This is a list of words that should not be capitalized for title case.
 * @private
 */
exports.non_titlecased_words = [
    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by',
    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for',
];
exports.default = exports.non_titlecased_words;

});

var titleize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.titleize = void 0;




/**
 * This function adds titleize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Capitalizes words as you would for a book title.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
 *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
 */
function titleize(str) {
    str = str.toLowerCase().replace(util.underbar, ' ');
    const str_arr = str.split(' ');
    let i = 0;
    const j = str_arr.length;
    let d, k, l;
    for (; i < j; i++) {
        d = str_arr[i].split('-');
        k = 0;
        l = d.length;
        for (; k < l; k++) {
            if (indexOf_1.indexOf(non_titlecased_words.non_titlecased_words, d[k].toLowerCase()) < 0) {
                d[k] = capitalize_1.capitalize(d[k]);
            }
        }
        str_arr[i] = d.join('-');
    }
    str = str_arr.join(' ');
    str = str.substring(0, 1).toUpperCase() + str.substring(1);
    return str;
}
exports.titleize = titleize;
exports.default = titleize;

});

var tableize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableize = void 0;


/**
 * This function adds tableize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Return camel cased words into their underscored plural form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
 */
function tableize(str) {
    str = underscore_1.underscore(str);
    str = pluralize_1.pluralize(str);
    return str;
}
exports.tableize = tableize;
exports.default = tableize;

});

var kebabize_1 = createCommonjsModule(function (module, exports) {
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.kebabize = void 0;

const dasherize_1$1 = __importDefault(dasherize_1);
/**
 * This function adds kebabize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Return camel cased words into kebab-case form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.kebabize( 'MessageBusProperty' ); // === 'message-bus-property'
 */
function kebabize(str) {
    str = underscore_1.underscore(str);
    str = dasherize_1$1.default(str);
    return str;
}
exports.kebabize = kebabize;
exports.default = kebabize;

});

var classify_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.classify = void 0;


/**
 * This function adds classification support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Underscored plural nouns become the camel cased singular form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
 */
function classify(str) {
    str = camelize_1.camelize(str);
    str = singularize_1.singularize(str);
    return str;
}
exports.classify = classify;
exports.default = classify;

});

var demodulize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.demodulize = void 0;
/**
 * This function adds demodulize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @returns {String} Removes module names leaving only class names.(Ruby style)
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
 */
function demodulize(str) {
    const str_arr = str.split('::');
    return str_arr[str_arr.length - 1];
}
exports.demodulize = demodulize;
exports.default = demodulize;

});

var humanize_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.humanize = void 0;


/**
 * This function adds humanize support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
 *                                 Passing true will lowercase it.
 * @returns {String} Lower case underscored words will be returned in humanized form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.humanize( 'message_properties' ); // === 'Message properties'
 *     inflection.humanize( 'message_properties', true ); // === 'message properties'
 */
function humanize(str, low_first_letter) {
    str = str.toLowerCase();
    str = str.replace(util.id_suffix, '');
    str = str.replace(util.underbar, ' ');
    if (!low_first_letter) {
        str = capitalize_1.capitalize(str);
    }
    return str;
}
exports.humanize = humanize;
exports.default = humanize;

});

var foreign_key_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.foreign_key = void 0;


/**
 * This function adds foreign key support to every String object.
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,
you can pass true to skip it.(optional)
 * @returns {String} Underscored plural nouns become the camel cased singular form.
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
 *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
 */
function foreign_key(str, drop_id_ubar) {
    str = demodulize_1.demodulize(str);
    str = underscore_1.underscore(str) + ((drop_id_ubar) ? ('') : ('_')) + 'id';
    return str;
}
exports.foreign_key = foreign_key;
exports.default = foreign_key;

});

var inflector = createCommonjsModule(function (module, exports) {
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inflector = void 0;
const pluralize_1$1 = __importDefault(pluralize_1);
const singularize_1$1 = __importDefault(singularize_1);
const inflect_1$1 = __importDefault(inflect_1);
const camelize_1$1 = __importDefault(camelize_1);
const underscore_1$1 = __importDefault(underscore_1);
const humanize_1$1 = __importDefault(humanize_1);
const capitalize_1$1 = __importDefault(capitalize_1);
const dasherize_1$1 = __importDefault(dasherize_1);
const titleize_1$1 = __importDefault(titleize_1);
const demodulize_1$1 = __importDefault(demodulize_1);
const tableize_1$1 = __importDefault(tableize_1);
const kebabize_1$1 = __importDefault(kebabize_1);
const classify_1$1 = __importDefault(classify_1);
const foreign_key_1$1 = __importDefault(foreign_key_1);
const ordinalize_1$1 = __importDefault(ordinalize_1);
exports.inflector = {
    pluralize: pluralize_1$1.default,
    singularize: singularize_1$1.default,
    inflect: inflect_1$1.default,
    camelize: camelize_1$1.default,
    underscore: underscore_1$1.default,
    humanize: humanize_1$1.default,
    capitalize: capitalize_1$1.default,
    dasherize: dasherize_1$1.default,
    titleize: titleize_1$1.default,
    demodulize: demodulize_1$1.default,
    tableize: tableize_1$1.default,
    kebabize: kebabize_1$1.default,
    classify: classify_1$1.default,
    foreign_key: foreign_key_1$1.default,
    ordinalize: ordinalize_1$1.default,
};
exports.default = exports.inflector;

});

var transform_1 = createCommonjsModule(function (module, exports) {
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
/**
 * This function performs multiple inflection methods on a string
 * @public
 * @function
 * @param {String} str The subject string.
 * @param {Array} arr An array of inflection methods.
 * @returns {String}
 * @example
 *
 *     var inflection = require( 'inflection' );
 *
 *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'
 */
const inflector_1 = __importDefault(inflector);
function transform(str, arr) {
    for (const method of arr) {
        if (typeof method === 'function') {
            str = method(str);
        }
        else if (inflector_1.default.hasOwnProperty(method)) {
            str = inflector_1.default[method](str);
        }
    }
    return str;
}
exports.transform = transform;
exports.default = transform;

});

var inflection2 = createCommonjsModule(function (module, exports) {
/*!
 * inflection
 * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
 * MIT Licensed
 *
 * @fileoverview
 * A port of inflection-js to node.js module.
 */
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.ordinalize = exports.foreign_key = exports.classify = exports.kebabize = exports.tableize = exports.demodulize = exports.titleize = exports.dasherize = exports.capitalize = exports.humanize = exports.underscore = exports.camelize = exports.inflect = exports.singularize = exports.pluralize = exports.indexOf = exports._apply_rules = void 0;
const dasherize_1$1 = __importDefault(dasherize_1);
exports.dasherize = dasherize_1$1.default;
const ordinalize_1$1 = __importDefault(ordinalize_1);
exports.ordinalize = ordinalize_1$1.default;
const indexOf_1$1 = __importDefault(indexOf_1);
exports.indexOf = indexOf_1$1.default;
const _apply_rules_1$1 = __importDefault(_apply_rules_1);
exports._apply_rules = _apply_rules_1$1.default;
const pluralize_1$1 = __importDefault(pluralize_1);
exports.pluralize = pluralize_1$1.default;
const singularize_1$1 = __importDefault(singularize_1);
exports.singularize = singularize_1$1.default;
const inflect_1$1 = __importDefault(inflect_1);
exports.inflect = inflect_1$1.default;
const camelize_1$1 = __importDefault(camelize_1);
exports.camelize = camelize_1$1.default;
const underscore_1$1 = __importDefault(underscore_1);
exports.underscore = underscore_1$1.default;
const capitalize_1$1 = __importDefault(capitalize_1);
exports.capitalize = capitalize_1$1.default;
const titleize_1$1 = __importDefault(titleize_1);
exports.titleize = titleize_1$1.default;
const tableize_1$1 = __importDefault(tableize_1);
exports.tableize = tableize_1$1.default;
const kebabize_1$1 = __importDefault(kebabize_1);
exports.kebabize = kebabize_1$1.default;
const classify_1$1 = __importDefault(classify_1);
exports.classify = classify_1$1.default;
const demodulize_1$1 = __importDefault(demodulize_1);
exports.demodulize = demodulize_1$1.default;
const humanize_1$1 = __importDefault(humanize_1);
exports.humanize = humanize_1$1.default;
const foreign_key_1$1 = __importDefault(foreign_key_1);
exports.foreign_key = foreign_key_1$1.default;
const transform_1$1 = __importDefault(transform_1);
exports.transform = transform_1$1.default;
exports.default = {
    _apply_rules: _apply_rules_1$1.default,
    indexOf: indexOf_1$1.default,
    pluralize: pluralize_1$1.default,
    singularize: singularize_1$1.default,
    inflect: inflect_1$1.default,
    camelize: camelize_1$1.default,
    underscore: underscore_1$1.default,
    humanize: humanize_1$1.default,
    capitalize: capitalize_1$1.default,
    dasherize: dasherize_1$1.default,
    titleize: titleize_1$1.default,
    demodulize: demodulize_1$1.default,
    tableize: tableize_1$1.default,
    kebabize: kebabize_1$1.default,
    classify: classify_1$1.default,
    foreign_key: foreign_key_1$1.default,
    ordinalize: ordinalize_1$1.default,
    transform: transform_1$1.default,
};

});

var index = /*@__PURE__*/unwrapExports(inflection2);

class RailsHelper {
    constructor(relativeFileName, line) {
        this.patterns = [
            path.join(REL_CONTROLLERS, 'PTN', '*'),
            path.join(REL_CONTROLLERS, 'PTN*'),
            path.join(REL_MODELS, 'SINGULARIZE', '*'),
            path.join(REL_MODELS, 'SINGULARIZE*'),
            path.join(REL_MODELS, 'BASENAME_SINGULARIZE', '*'),
            path.join(REL_MODELS, 'BASENAME_SINGULARIZE*'),
            path.join(REL_VIEWS, 'PTN', '*'),
            path.join(REL_VIEWS, 'PTN*'),
            path.join(REL_LAYOUTS, 'PTN', '*'),
            path.join(REL_LAYOUTS, 'PTN*'),
            path.join(REL_HELPERS, 'PTN', '*'),
            path.join(REL_HELPERS, 'PTN*'),
            path.join(REL_JAVASCRIPTS, 'PTN', '*'),
            path.join(REL_JAVASCRIPTS, 'PTN*'),
            path.join(REL_STYLESHEETS, 'PTN', '*'),
            path.join(REL_STYLESHEETS, 'PTN*'),
        ];
        this.relativeFileName = relativeFileName;
        this.fileName = path.basename(relativeFileName);
        const filePath = path.dirname(relativeFileName);
        this.line = line;
        this.initPatten(filePath);
    }
    searchPaths() {
        const res = [];
        this.patterns.forEach((e) => {
            let p = e.replace('PTN', this.filePatten.toString());
            p = p.replace('BASENAME_SINGULARIZE', index.singularize(path.basename(this.filePatten.toString())));
            p = p.replace('SINGULARIZE', index.singularize(this.filePatten.toString()));
            res.push(p);
        });
        return res;
    }
    initPatten(filePath) {
        this.filePatten = null;
        this.targetFile = null;
        const fileType = dectFileType(filePath), prefix = filePath.substring(FileTypeRelPath.get(fileType).length + 1);
        switch (fileType) {
            case FileType.Controller:
                this.filePatten = path.join(prefix, this.fileName.replace(/_controller\.rb$/, ''));
                if (this.line && /^def\s+/.test(this.line)) {
                    this.filePatten = path.join(this.filePatten, this.line.replace(/^def\s+/, ''));
                }
                break;
            case FileType.Model:
                const filePatten = path.join(prefix, this.fileName.replace(/\.rb$/, ''));
                this.filePatten = index.pluralize(this.filePatten.toString());
                break;
            case FileType.Layout:
                this.filePatten = path.join(prefix, this.fileName.replace(/\..*?\..*?$/, ''));
                break;
            case FileType.View:
                this.filePatten = prefix;
                break;
            case FileType.Helper:
                this.filePatten =
                    prefix === '' && this.fileName === 'application_helper.rb'
                        ? ''
                        : path.join(prefix, this.fileName.replace(/_helper\.rb$/, ''));
                break;
            case FileType.Javascript:
                this.filePatten = path.join(prefix, this.fileName.replace(/\.js$/, '').replace(/\..*?\..*?$/, ''));
                break;
            case FileType.StyleSheet:
                this.filePatten = path.join(prefix, this.fileName.replace(/\.css$/, '').replace(/\..*?\..*?$/, ''));
                break;
            case FileType.Rspec:
                this.targetFile = path.join('app', prefix, this.fileName.replace('_spec.rb', '.rb'));
                break;
            case FileType.Test:
                this.filePatten = path.join('app', prefix, this.fileName.replace('_test.rb', '.rb'));
                break;
        }
    }
    generateList(arr) {
        const ap = arr.map(async (cur) => {
            const res = await vscode.workspace.findFiles(cur.toString(), null);
            return res
                .map((i) => {
                return vscode.workspace.asRelativePath(i);
            })
                .filter((v) => this.relativeFileName !== v);
        });
        return Promise.all(ap).then((lists) => {
            return flatten(lists);
        });
    }
    showQuickPick(items) {
        const p = vscode.window.showQuickPick(items, {
            placeHolder: 'Select File',
            matchOnDetail: true,
        });
        p.then((value) => {
            if (!value)
                return;
            const fn = vscode.Uri.parse('file://' + path.join(vscode.workspace.rootPath, value));
            vscode.workspace.openTextDocument(fn).then((doc) => {
                return vscode.window.showTextDocument(doc);
            });
        });
    }
    showFileList() {
        if (this.filePatten != null) {
            const paths = this.searchPaths().slice();
            this.generateList(paths).then((v) => {
                this.showQuickPick(v);
            });
        }
        else if (this.targetFile != null) {
            this.generateList([this.targetFile]).then((v) => {
                this.showQuickPick(v);
            });
        }
    }
}

// This file generated through ./bin/gen_symbols.js,Do NOT modify it!
const RAILS = new Set([
    'abstractcontroller',
    'abstractcontroller::actionnotfound',
    'abstractcontroller::base',
    'abstractcontroller::caching',
    'abstractcontroller::caching::classmethods',
    'abstractcontroller::caching::configmethods',
    'abstractcontroller::caching::fragments',
    'abstractcontroller::caching::fragments::classmethods',
    'abstractcontroller::callbacks',
    'abstractcontroller::callbacks::classmethods',
    'abstractcontroller::collector',
    'abstractcontroller::collector::mime',
    'abstractcontroller::doublerendererror',
    'abstractcontroller::helpers',
    'abstractcontroller::helpers::classmethods',
    'abstractcontroller::helpers::missinghelpererror',
    'abstractcontroller::railties',
    'abstractcontroller::railties::routeshelpers',
    'abstractcontroller::rendering',
    'abstractcontroller::translation',
    'abstractcontroller::urlfor',
    'abstractcontroller::urlfor::classmethods',
    'actioncable',
    'actioncable::channel',
    'actioncable::channel::base',
    'actioncable::channel::broadcasting',
    'actioncable::channel::callbacks',
    'actioncable::channel::naming',
    'actioncable::channel::periodictimers',
    'actioncable::channel::periodictimers::classmethods',
    'actioncable::channel::streams',
    'actioncable::connection',
    'actioncable::connection::authorization',
    'actioncable::connection::authorization::unauthorizederror',
    'actioncable::connection::base',
    'actioncable::connection::identification',
    'actioncable::connection::internalchannel',
    'actioncable::connection::streameventloop',
    'actioncable::connection::taggedloggerproxy',
    'actioncable::engine',
    'actioncable::engine::activesupport',
    'actioncable::helpers',
    'actioncable::helpers::actioncablehelper',
    'actioncable::remoteconnections',
    'actioncable::remoteconnections::remoteconnection',
    'actioncable::remoteconnections::remoteconnection::invalididentifierserror',
    'actioncable::server',
    'actioncable::server::base',
    'actioncable::server::broadcasting',
    'actioncable::server::broadcasting::broadcaster',
    'actioncable::server::configuration',
    'actioncable::server::worker',
    'actioncable::server::worker::activerecordconnectionmanagement',
    'actioncable::server::worker::activerecordconnectionmanagement::activerecord',
    'actioncable::subscriptionadapter',
    'actioncable::subscriptionadapter::async',
    'actioncable::subscriptionadapter::async::asyncsubscribermap',
    'actioncable::subscriptionadapter::base',
    'actioncable::subscriptionadapter::postgresql',
    'actioncable::subscriptionadapter::postgresql::listener',
    'actioncable::subscriptionadapter::redis',
    'actioncable::subscriptionadapter::redis::listener',
    'actioncable::subscriptionadapter::subscribermap',
    'actioncable::version',
    'actioncontroller',
    'actioncontroller::api',
    'actioncontroller::apirendering',
    'actioncontroller::base',
    'actioncontroller::caching',
    'actioncontroller::conditionalget',
    'actioncontroller::conditionalget::classmethods',
    'actioncontroller::contentsecuritypolicy',
    'actioncontroller::contentsecuritypolicy::classmethods',
    'actioncontroller::cookies',
    'actioncontroller::datastreaming',
    'actioncontroller::etagwithflash',
    'actioncontroller::etagwithtemplatedigest',
    'actioncontroller::flash',
    'actioncontroller::flash::classmethods',
    'actioncontroller::forcessl',
    'actioncontroller::forcessl::classmethods',
    'actioncontroller::formbuilder',
    'actioncontroller::formbuilder::classmethods',
    'actioncontroller::head',
    'actioncontroller::helpers',
    'actioncontroller::helpers::classmethods',
    'actioncontroller::httpauthentication',
    'actioncontroller::httpauthentication::basic',
    'actioncontroller::httpauthentication::basic::controllermethods',
    'actioncontroller::httpauthentication::basic::controllermethods::classmethods',
    'actioncontroller::httpauthentication::digest',
    'actioncontroller::httpauthentication::digest::controllermethods',
    'actioncontroller::httpauthentication::token',
    'actioncontroller::httpauthentication::token::controllermethods',
    'actioncontroller::implicitrender',
    'actioncontroller::instrumentation',
    'actioncontroller::instrumentation::classmethods',
    'actioncontroller::live',
    'actioncontroller::live::classmethods',
    'actioncontroller::live::clientdisconnected',
    'actioncontroller::live::sse',
    'actioncontroller::livetestresponse',
    'actioncontroller::logsubscriber',
    'actioncontroller::metal',
    'actioncontroller::mimeresponds',
    'actioncontroller::mimeresponds::collector',
    'actioncontroller::missingrenderer',
    'actioncontroller::parameterencoding',
    'actioncontroller::parameterencoding::classmethods',
    'actioncontroller::parametermissing',
    'actioncontroller::parameters',
    'actioncontroller::paramswrapper',
    'actioncontroller::paramswrapper::classmethods',
    'actioncontroller::railtie',
    'actioncontroller::railtie::activesupport',
    'actioncontroller::railties',
    'actioncontroller::railties::helpers',
    'actioncontroller::redirecting',
    'actioncontroller::renderer',
    'actioncontroller::renderers',
    'actioncontroller::renderers::all',
    'actioncontroller::renderers::classmethods',
    'actioncontroller::rendering',
    'actioncontroller::rendering::classmethods',
    'actioncontroller::requestforgeryprotection',
    'actioncontroller::requestforgeryprotection::classmethods',
    'actioncontroller::requestforgeryprotection::protectionmethods',
    'actioncontroller::requestforgeryprotection::protectionmethods::exception',
    'actioncontroller::requestforgeryprotection::protectionmethods::nullsession',
    'actioncontroller::requestforgeryprotection::protectionmethods::resetsession',
    'actioncontroller::rescue',
    'actioncontroller::streaming',
    'actioncontroller::strongparameters',
    'actioncontroller::templateassertions',
    'actioncontroller::testcase',
    'actioncontroller::testcase::behavior',
    'actioncontroller::testcase::behavior::classmethods',
    'actioncontroller::testing',
    'actioncontroller::unfilteredparameters',
    'actioncontroller::unpermittedparameters',
    'actioncontroller::urlfor',
    'actiondispatch',
    'actiondispatch::assertionresponse',
    'actiondispatch::assertions',
    'actiondispatch::assertions::responseassertions',
    'actiondispatch::assertions::routingassertions',
    'actiondispatch::callbacks',
    'actiondispatch::contentsecuritypolicy',
    'actiondispatch::contentsecuritypolicy::middleware',
    'actiondispatch::contentsecuritypolicy::request',
    'actiondispatch::cookies',
    'actiondispatch::cookies::chainedcookiejars',
    'actiondispatch::debugexceptions',
    'actiondispatch::debugexceptions::debugview',
    'actiondispatch::debuglocks',
    'actiondispatch::exceptionwrapper',
    'actiondispatch::executor',
    'actiondispatch::filehandler',
    'actiondispatch::flash',
    'actiondispatch::flash::flashhash',
    'actiondispatch::flash::requestmethods',
    'actiondispatch::http',
    'actiondispatch::http::cache',
    'actiondispatch::http::cache::request',
    'actiondispatch::http::cache::response',
    'actiondispatch::http::filterparameters',
    'actiondispatch::http::filterredirect',
    'actiondispatch::http::headers',
    'actiondispatch::http::mimenegotiation',
    'actiondispatch::http::parameterfilter',
    'actiondispatch::http::parameters',
    'actiondispatch::http::parameters::classmethods',
    'actiondispatch::http::parameters::parseerror',
    'actiondispatch::http::url',
    'actiondispatch::http::uploadedfile',
    'actiondispatch::integration',
    'actiondispatch::integration::requesthelpers',
    'actiondispatch::integration::runner',
    'actiondispatch::integration::session',
    'actiondispatch::integrationtest',
    'actiondispatch::integrationtest::behavior',
    'actiondispatch::integrationtest::behavior::classmethods',
    'actiondispatch::integrationtest::urloptions',
    'actiondispatch::journey',
    'actiondispatch::journey::format',
    'actiondispatch::journey::formatter',
    'actiondispatch::journey::formatter::regexcasecomparator',
    'actiondispatch::journey::parser',
    'actiondispatch::journey::route',
    'actiondispatch::journey::route::verbmatchers',
    'actiondispatch::journey::route::verbmatchers::all',
    'actiondispatch::journey::route::verbmatchers::unknown',
    'actiondispatch::middlewarestack',
    'actiondispatch::middlewarestack::middleware',
    'actiondispatch::publicexceptions',
    'actiondispatch::railsentitystore',
    'actiondispatch::railsentitystore::rack',
    'actiondispatch::railsentitystore::rack::cache',
    'actiondispatch::railsentitystore::rack::cache::entitystore',
    'actiondispatch::railsmetastore',
    'actiondispatch::railsmetastore::rack',
    'actiondispatch::railsmetastore::rack::cache',
    'actiondispatch::railsmetastore::rack::cache::metastore',
    'actiondispatch::railtie',
    'actiondispatch::railtie::activesupport',
    'actiondispatch::railtie::activesupport::messages',
    'actiondispatch::reloader',
    'actiondispatch::remoteip',
    'actiondispatch::remoteip::getip',
    'actiondispatch::remoteip::ipspoofattackerror',
    'actiondispatch::request',
    'actiondispatch::requestencoder',
    'actiondispatch::requestencoder::identityencoder',
    'actiondispatch::requestid',
    'actiondispatch::response',
    'actiondispatch::response::rackbody',
    'actiondispatch::routing',
    'actiondispatch::routing::consoleformatter',
    'actiondispatch::routing::htmltableformatter',
    'actiondispatch::routing::mapper',
    'actiondispatch::routing::mapper::base',
    'actiondispatch::routing::mapper::concerns',
    'actiondispatch::routing::mapper::customurls',
    'actiondispatch::routing::mapper::httphelpers',
    'actiondispatch::routing::mapper::resources',
    'actiondispatch::routing::mapper::scoping',
    'actiondispatch::routing::pathredirect',
    'actiondispatch::routing::polymorphicroutes',
    'actiondispatch::routing::redirection',
    'actiondispatch::routing::routeset',
    'actiondispatch::routing::routeset::customurlhelper',
    'actiondispatch::routing::routeset::dispatcher',
    'actiondispatch::routing::routeset::generator',
    'actiondispatch::routing::routeset::mountedhelpers',
    'actiondispatch::routing::routeset::namedroutecollection',
    'actiondispatch::routing::routeset::namedroutecollection::urlhelper',
    'actiondispatch::routing::routeset::namedroutecollection::urlhelper::optimizedurlhelper',
    'actiondispatch::routing::routeset::staticdispatcher',
    'actiondispatch::routing::routewrapper',
    'actiondispatch::routing::urlfor',
    'actiondispatch::ssl',
    'actiondispatch::session',
    'actiondispatch::session::abstractstore',
    'actiondispatch::session::cachestore',
    'actiondispatch::session::compatibility',
    'actiondispatch::session::cookiestore',
    'actiondispatch::session::memcachestore',
    'actiondispatch::session::stalesessioncheck',
    'actiondispatch::showexceptions',
    'actiondispatch::static',
    'actiondispatch::systemtestcase',
    'actiondispatch::systemtesting',
    'actiondispatch::systemtesting::testhelpers',
    'actiondispatch::systemtesting::testhelpers::screenshothelper',
    'actiondispatch::testprocess',
    'actiondispatch::testprocess::fixturefile',
    'actiondispatch::testrequest',
    'actiondispatch::testresponse',
    'actionmailer',
    'actionmailer::base',
    'actionmailer::base::lateattachmentsproxy',
    'actionmailer::collector',
    'actionmailer::deliverymethods',
    'actionmailer::deliverymethods::classmethods',
    'actionmailer::deliverymethods::mail',
    'actionmailer::inlinepreviewinterceptor',
    'actionmailer::logsubscriber',
    'actionmailer::mailhelper',
    'actionmailer::messagedelivery',
    'actionmailer::noninferrablemailererror',
    'actionmailer::parameterized',
    'actionmailer::parameterized::classmethods',
    'actionmailer::preview',
    'actionmailer::previews',
    'actionmailer::previews::classmethods',
    'actionmailer::railtie',
    'actionmailer::railtie::activesupport',
    'actionmailer::rescuable',
    'actionmailer::testcase',
    'actionmailer::testcase::behavior',
    'actionmailer::testcase::behavior::classmethods',
    'actionmailer::testcase::cleartestdeliveries',
    'actionmailer::testhelper',
    'actionmailer::version',
    'actionview',
    'actionview::base',
    'actionview::collectioncaching',
    'actionview::collectioncaching::activesupport',
    'actionview::collectioncaching::activesupport::cache',
    'actionview::context',
    'actionview::dependencytracker',
    'actionview::dependencytracker::concurrent',
    'actionview::digestor',
    'actionview::digestor::injected',
    'actionview::digestor::missing',
    'actionview::digestor::node',
    'actionview::digestor::nulllogger',
    'actionview::digestor::partial',
    'actionview::digestor::perexecutiondigestcacheexpiry',
    'actionview::filesystemresolver',
    'actionview::fixtureresolver',
    'actionview::helpers',
    'actionview::helpers::activemodelhelper',
    'actionview::helpers::activemodelinstancetag',
    'actionview::helpers::assettaghelper',
    'actionview::helpers::asseturlhelper',
    'actionview::helpers::atomfeedhelper',
    'actionview::helpers::cachehelper',
    'actionview::helpers::capturehelper',
    'actionview::helpers::csphelper',
    'actionview::helpers::csrfhelper',
    'actionview::helpers::datehelper',
    'actionview::helpers::debughelper',
    'actionview::helpers::formbuilder',
    'actionview::helpers::formhelper',
    'actionview::helpers::formoptionshelper',
    'actionview::helpers::formtaghelper',
    'actionview::helpers::javascripthelper',
    'actionview::helpers::numberhelper',
    'actionview::helpers::numberhelper::invalidnumbererror',
    'actionview::helpers::outputsafetyhelper',
    'actionview::helpers::recordtaghelper',
    'actionview::helpers::renderinghelper',
    'actionview::helpers::sanitizehelper',
    'actionview::helpers::taghelper',
    'actionview::helpers::texthelper',
    'actionview::helpers::translationhelper',
    'actionview::helpers::urlhelper',
    'actionview::helpers::urlhelper::classmethods',
    'actionview::layouts',
    'actionview::layouts::classmethods',
    'actionview::logsubscriber',
    'actionview::lookupcontext',
    'actionview::lookupcontext::detailscache',
    'actionview::lookupcontext::detailskey',
    'actionview::lookupcontext::detailskey::concurrent',
    'actionview::lookupcontext::template',
    'actionview::lookupcontext::viewpaths',
    'actionview::nullresolver',
    'actionview::partialiteration',
    'actionview::partialrenderer',
    'actionview::railtie',
    'actionview::railtie::activesupport',
    'actionview::recordidentifier',
    'actionview::renderer',
    'actionview::rendering',
    'actionview::rendering::classmethods',
    'actionview::resolver',
    'actionview::resolver::cache',
    'actionview::resolver::cache::smallcache',
    'actionview::resolver::path',
    'actionview::routingurlfor',
    'actionview::template',
    'actionview::template::handlers',
    'actionview::template::handlers::builder',
    'actionview::template::handlers::erb',
    'actionview::template::handlers::html',
    'actionview::template::handlers::raw',
    'actionview::template::types',
    'actionview::template::types::type',
    'actionview::testcase',
    'actionview::testcase::behavior',
    'actionview::testcase::behavior::classmethods',
    'actionview::testcase::behavior::locals',
    'actionview::testcase::behavior::renderedviewscollection',
    'actionview::testcase::testcontroller',
    'actionview::version',
    'actionview::viewpaths',
    'actionview::viewpaths::classmethods',
    'activejob',
    'activejob::base',
    'activejob::callbacks',
    'activejob::callbacks::classmethods',
    'activejob::core',
    'activejob::core::classmethods',
    'activejob::deserializationerror',
    'activejob::enqueuing',
    'activejob::enqueuing::classmethods',
    'activejob::exceptions',
    'activejob::exceptions::classmethods',
    'activejob::execution',
    'activejob::execution::classmethods',
    'activejob::logging',
    'activejob::logging::activesupport',
    'activejob::queueadapter',
    'activejob::queueadapter::classmethods',
    'activejob::queueadapters',
    'activejob::queueadapters::asyncadapter',
    'activejob::queueadapters::backburneradapter',
    'activejob::queueadapters::delayedjobadapter',
    'activejob::queueadapters::inlineadapter',
    'activejob::queueadapters::quadapter',
    'activejob::queueadapters::queadapter',
    'activejob::queueadapters::queueclassicadapter',
    'activejob::queueadapters::resqueadapter',
    'activejob::queueadapters::sidekiqadapter',
    'activejob::queueadapters::sneakersadapter',
    'activejob::queueadapters::suckerpunchadapter',
    'activejob::queueadapters::testadapter',
    'activejob::queuename',
    'activejob::queuename::classmethods',
    'activejob::queuepriority',
    'activejob::queuepriority::classmethods',
    'activejob::railtie',
    'activejob::railtie::activesupport',
    'activejob::serializationerror',
    'activejob::testcase',
    'activejob::testhelper',
    'activejob::testhelper::testqueueadapter',
    'activejob::testhelper::testqueueadapter::classmethods',
    'activejob::version',
    'activemodel',
    'activemodel::attributeassignment',
    'activemodel::attributemethods',
    'activemodel::attributemethods::classmethods',
    'activemodel::attributes',
    'activemodel::attributes::classmethods',
    'activemodel::callbacks',
    'activemodel::conversion',
    'activemodel::dirty',
    'activemodel::errors',
    'activemodel::forbiddenattributeserror',
    'activemodel::lint',
    'activemodel::lint::tests',
    'activemodel::missingattributeerror',
    'activemodel::model',
    'activemodel::name',
    'activemodel::naming',
    'activemodel::rangeerror',
    'activemodel::securepassword',
    'activemodel::securepassword::classmethods',
    'activemodel::securepassword::instancemethodsonactivation',
    'activemodel::serialization',
    'activemodel::serializers',
    'activemodel::serializers::json',
    'activemodel::strictvalidationfailed',
    'activemodel::translation',
    'activemodel::type',
    'activemodel::type::boolean',
    'activemodel::type::helpers',
    'activemodel::type::helpers::acceptsmultiparametertime',
    'activemodel::type::helpers::mutable',
    'activemodel::type::helpers::numeric',
    'activemodel::type::helpers::timevalue',
    'activemodel::type::registration',
    'activemodel::type::registry',
    'activemodel::type::value',
    'activemodel::unknownattributeerror',
    'activemodel::version',
    'activemodel::validationerror',
    'activemodel::validations',
    'activemodel::validations::acceptancevalidator',
    'activemodel::validations::acceptancevalidator::attributedefinition',
    'activemodel::validations::acceptancevalidator::lazilydefineattributes',
    'activemodel::validations::callbacks',
    'activemodel::validations::callbacks::classmethods',
    'activemodel::validations::classmethods',
    'activemodel::validations::helpermethods',
    'activemodel::validator',
    'activerecord',
    'activerecord::activerecorderror',
    'activerecord::adapternotfound',
    'activerecord::adapternotspecified',
    'activerecord::aggregations',
    'activerecord::aggregations::classmethods',
    'activerecord::associationrelation',
    'activerecord::associationtypemismatch',
    'activerecord::associations',
    'activerecord::associations::classmethods',
    'activerecord::associations::collectionproxy',
    'activerecord::attributeassignment',
    'activerecord::attributeassignmenterror',
    'activerecord::attributemethods',
    'activerecord::attributemethods::beforetypecast',
    'activerecord::attributemethods::classmethods',
    'activerecord::attributemethods::dirty',
    'activerecord::attributemethods::primarykey',
    'activerecord::attributemethods::primarykey::classmethods',
    'activerecord::attributemethods::query',
    'activerecord::attributemethods::read',
    'activerecord::attributemethods::serialization',
    'activerecord::attributemethods::serialization::classmethods',
    'activerecord::attributemethods::serialization::columnnotserializableerror',
    'activerecord::attributemethods::timezoneconversion',
    'activerecord::attributemethods::write',
    'activerecord::attributes',
    'activerecord::attributes::classmethods',
    'activerecord::autosaveassociation',
    'activerecord::base',
    'activerecord::batches',
    'activerecord::batches::batchenumerator',
    'activerecord::calculations',
    'activerecord::callbacks',
    'activerecord::collectioncachekey',
    'activerecord::configurationerror',
    'activerecord::connectionadapters',
    'activerecord::connectionadapters::abstractadapter',
    'activerecord::connectionadapters::abstractadapter::version',
    'activerecord::connectionadapters::abstractmysqladapter',
    'activerecord::connectionadapters::abstractmysqladapter::type',
    'activerecord::connectionadapters::column',
    'activerecord::connectionadapters::columnmethods',
    'activerecord::connectionadapters::connectionhandler',
    'activerecord::connectionadapters::connectionpool',
    'activerecord::connectionadapters::connectionpool::queue',
    'activerecord::connectionadapters::connectionpool::reaper',
    'activerecord::connectionadapters::databaselimits',
    'activerecord::connectionadapters::databasestatements',
    'activerecord::connectionadapters::databasestatements::partialquerycollector',
    'activerecord::connectionadapters::determineifpreparablevisitor',
    'activerecord::connectionadapters::mysql',
    'activerecord::connectionadapters::mysql::columnmethods',
    'activerecord::connectionadapters::mysql::databasestatements',
    'activerecord::connectionadapters::mysql::table',
    'activerecord::connectionadapters::mysql::tabledefinition',
    'activerecord::connectionadapters::mysql2adapter',
    'activerecord::connectionadapters::nullcolumn',
    'activerecord::connectionadapters::postgresql',
    'activerecord::connectionadapters::postgresql::altertable',
    'activerecord::connectionadapters::postgresql::columnmethods',
    'activerecord::connectionadapters::postgresql::databasestatements',
    'activerecord::connectionadapters::postgresql::oid',
    'activerecord::connectionadapters::postgresql::oid::bit',
    'activerecord::connectionadapters::postgresql::oid::bit::data',
    'activerecord::connectionadapters::postgresql::quoting',
    'activerecord::connectionadapters::postgresql::schemastatements',
    'activerecord::connectionadapters::postgresql::table',
    'activerecord::connectionadapters::postgresql::tabledefinition',
    'activerecord::connectionadapters::postgresqladapter',
    'activerecord::connectionadapters::postgresqladapter::oid',
    'activerecord::connectionadapters::postgresqltypemetadata',
    'activerecord::connectionadapters::querycache',
    'activerecord::connectionadapters::querycache::connectionpoolconfiguration',
    'activerecord::connectionadapters::quoting',
    'activerecord::connectionadapters::realtransaction',
    'activerecord::connectionadapters::sqlite3',
    'activerecord::connectionadapters::sqlite3::tabledefinition',
    'activerecord::connectionadapters::sqlite3adapter',
    'activerecord::connectionadapters::savepointtransaction',
    'activerecord::connectionadapters::savepoints',
    'activerecord::connectionadapters::schemacache',
    'activerecord::connectionadapters::schemastatements',
    'activerecord::connectionadapters::sqltypemetadata',
    'activerecord::connectionadapters::table',
    'activerecord::connectionadapters::tabledefinition',
    'activerecord::connectionadapters::transactionstate',
    'activerecord::connectionhandling',
    'activerecord::connectionnotestablished',
    'activerecord::connectiontimeouterror',
    'activerecord::core',
    'activerecord::countercache',
    'activerecord::countercache::classmethods',
    'activerecord::dangerousattributeerror',
    'activerecord::deadlocked',
    'activerecord::definecallbacks',
    'activerecord::dynamicmatchers',
    'activerecord::dynamicmatchers::findby',
    'activerecord::dynamicmatchers::findbybang',
    'activerecord::dynamicmatchers::method',
    'activerecord::eagerloadpolymorphicerror',
    'activerecord::enum',
    'activerecord::environmentmismatcherror',
    'activerecord::exclusiveconnectiontimeouterror',
    'activerecord::explain',
    'activerecord::explainsubscriber',
    'activerecord::explainsubscriber::activesupport',
    'activerecord::findermethods',
    'activerecord::fixtureset',
    'activerecord::fixtureset::classcache',
    'activerecord::immutablerelation',
    'activerecord::inheritance',
    'activerecord::inheritance::classmethods',
    'activerecord::integration',
    'activerecord::integration::classmethods',
    'activerecord::invalidforeignkey',
    'activerecord::irreversiblemigration',
    'activerecord::irreversibleordererror',
    'activerecord::legacyyamladapter',
    'activerecord::legacyyamladapter::rails41',
    'activerecord::legacyyamladapter::rails420',
    'activerecord::lockwaittimeout',
    'activerecord::locking',
    'activerecord::locking::optimistic',
    'activerecord::locking::optimistic::classmethods',
    'activerecord::locking::pessimistic',
    'activerecord::logsubscriber',
    'activerecord::migration',
    'activerecord::migration::checkpending',
    'activerecord::migration::commandrecorder',
    'activerecord::migration::compatibility',
    'activerecord::migration::compatibility::v4_2',
    'activerecord::migration::compatibility::v4_2::tabledefinition',
    'activerecord::migration::compatibility::v5_0',
    'activerecord::migration::compatibility::v5_0::tabledefinition',
    'activerecord::migration::compatibility::v5_1',
    'activerecord::mismatchedforeignkey',
    'activerecord::modelschema',
    'activerecord::modelschema::classmethods',
    'activerecord::multiparameterassignmenterrors',
    'activerecord::nestedattributes',
    'activerecord::nestedattributes::classmethods',
    'activerecord::nestedattributes::toomanyrecords',
    'activerecord::nodatabaseerror',
    'activerecord::notouching',
    'activerecord::notouching::classmethods',
    'activerecord::notnullviolation',
    'activerecord::persistence',
    'activerecord::persistence::classmethods',
    'activerecord::predicatebuilder',
    'activerecord::predicatebuilder::rangehandler',
    'activerecord::predicatebuilder::rangehandler::rangewithbinds',
    'activerecord::preparedstatementcacheexpired',
    'activerecord::preparedstatementinvalid',
    'activerecord::querycache',
    'activerecord::querycache::classmethods',
    'activerecord::querycanceled',
    'activerecord::querymethods',
    'activerecord::querymethods::wherechain',
    'activerecord::querying',
    'activerecord::railtie',
    'activerecord::railtie::activesupport',
    'activerecord::railtie::rails',
    'activerecord::rangeerror',
    'activerecord::readonlyrecord',
    'activerecord::readonlyattributes',
    'activerecord::readonlyattributes::classmethods',
    'activerecord::recordinvalid',
    'activerecord::recordnotdestroyed',
    'activerecord::recordnotfound',
    'activerecord::recordnotsaved',
    'activerecord::recordnotunique',
    'activerecord::reflection',
    'activerecord::reflection::classmethods',
    'activerecord::reflection::macroreflection',
    'activerecord::relation',
    'activerecord::relation::recordfetchwarning',
    'activerecord::relation::recordfetchwarning::activesupport',
    'activerecord::result',
    'activerecord::rollback',
    'activerecord::sanitization',
    'activerecord::sanitization::classmethods',
    'activerecord::schema',
    'activerecord::scoping',
    'activerecord::scoping::default',
    'activerecord::scoping::default::classmethods',
    'activerecord::scoping::named',
    'activerecord::scoping::named::classmethods',
    'activerecord::securetoken',
    'activerecord::securetoken::classmethods',
    'activerecord::serialization',
    'activerecord::serializationfailure',
    'activerecord::serializationtypemismatch',
    'activerecord::spawnmethods',
    'activerecord::staleobjecterror',
    'activerecord::statementinvalid',
    'activerecord::statementtimeout',
    'activerecord::store',
    'activerecord::store::classmethods',
    'activerecord::subclassnotfound',
    'activerecord::suppressor',
    'activerecord::suppressor::classmethods',
    'activerecord::tasks',
    'activerecord::tasks::databasetasks',
    'activerecord::testfixtures',
    'activerecord::testfixtures::classmethods',
    'activerecord::timestamp',
    'activerecord::touchlater',
    'activerecord::transactionisolationerror',
    'activerecord::transactionrollbackerror',
    'activerecord::transactions',
    'activerecord::transactions::classmethods',
    'activerecord::translation',
    'activerecord::type',
    'activerecord::type::adapterspecificregistry',
    'activerecord::type::biginteger',
    'activerecord::type::binary',
    'activerecord::type::boolean',
    'activerecord::type::date',
    'activerecord::type::datetime',
    'activerecord::type::decimal',
    'activerecord::type::decorationregistration',
    'activerecord::type::float',
    'activerecord::type::helpers',
    'activerecord::type::integer',
    'activerecord::type::internal',
    'activerecord::type::internal::timezone',
    'activerecord::type::json',
    'activerecord::type::registration',
    'activerecord::type::string',
    'activerecord::type::time',
    'activerecord::type::value',
    'activerecord::typeconflicterror',
    'activerecord::unknownattributeerror',
    'activerecord::unknownattributereference',
    'activerecord::unknownprimarykey',
    'activerecord::version',
    'activerecord::validations',
    'activerecord::validations::classmethods',
    'activerecord::valuetoolong',
    'activerecord::wrappeddatabaseexception',
    'activestorage',
    'activestorage::analyzejob',
    'activestorage::analyzer',
    'activestorage::analyzer::imageanalyzer',
    'activestorage::analyzer::videoanalyzer',
    'activestorage::attached',
    'activestorage::attached::macros',
    'activestorage::attached::many',
    'activestorage::attached::one',
    'activestorage::attachment',
    'activestorage::basecontroller',
    'activestorage::basejob',
    'activestorage::blob',
    'activestorage::blob::analyzable',
    'activestorage::blob::identifiable',
    'activestorage::blob::representable',
    'activestorage::blobscontroller',
    'activestorage::directuploadscontroller',
    'activestorage::diskcontroller',
    'activestorage::downloading',
    'activestorage::engine',
    'activestorage::engine::activesupport',
    'activestorage::filename',
    'activestorage::integrityerror',
    'activestorage::invariableerror',
    'activestorage::logsubscriber',
    'activestorage::preview',
    'activestorage::preview::unprocessederror',
    'activestorage::previewer',
    'activestorage::previewer::mupdfpreviewer',
    'activestorage::previewer::popplerpdfpreviewer',
    'activestorage::previewer::videopreviewer',
    'activestorage::purgejob',
    'activestorage::representationscontroller',
    'activestorage::service',
    'activestorage::service::azurestorageservice',
    'activestorage::service::diskservice',
    'activestorage::service::gcsservice',
    'activestorage::service::mirrorservice',
    'activestorage::service::s3service',
    'activestorage::unpreviewableerror',
    'activestorage::unrepresentableerror',
    'activestorage::version',
    'activestorage::variant',
    'activestorage::variation',
    'activesupport',
    'activesupport::arrayinquirer',
    'activesupport::autoload',
    'activesupport::backtracecleaner',
    'activesupport::benchmarkable',
    'activesupport::cache',
    'activesupport::cache::connectionpoollike',
    'activesupport::cache::filestore',
    'activesupport::cache::memcachestore',
    'activesupport::cache::memorystore',
    'activesupport::cache::nullstore',
    'activesupport::cache::redis',
    'activesupport::cache::rediscachestore',
    'activesupport::cache::store',
    'activesupport::cache::strategy',
    'activesupport::cache::strategy::localcache',
    'activesupport::cache::strategy::localcache::localstore',
    'activesupport::cachingkeygenerator',
    'activesupport::callbacks',
    'activesupport::callbacks::classmethods',
    'activesupport::callbacks::conditionals',
    'activesupport::callbacks::conditionals::value',
    'activesupport::callbacks::filters',
    'activesupport::callbacks::filters::after',
    'activesupport::callbacks::filters::before',
    'activesupport::concern',
    'activesupport::concurrency',
    'activesupport::concurrency::loadinterlockawaremonitor',
    'activesupport::concurrency::sharelock',
    'activesupport::configurable',
    'activesupport::configurable::classmethods',
    'activesupport::configurable::configuration',
    'activesupport::currentattributes',
    'activesupport::dependencies',
    'activesupport::dependencies::classcache',
    'activesupport::dependencies::interlock',
    'activesupport::dependencies::watchstack',
    'activesupport::deprecation',
    'activesupport::deprecation::behavior',
    'activesupport::deprecation::deprecatedconstantaccessor',
    'activesupport::deprecation::deprecatedconstantproxy',
    'activesupport::deprecation::deprecatedinstancevariableproxy',
    'activesupport::deprecation::deprecatedobjectproxy',
    'activesupport::deprecation::methodwrapper',
    'activesupport::deprecation::reporting',
    'activesupport::deprecationexception',
    'activesupport::descendantstracker',
    'activesupport::duration',
    'activesupport::duration::iso8601parser',
    'activesupport::duration::iso8601parser::parsingerror',
    'activesupport::encryptedconfiguration',
    'activesupport::encryptedfile',
    'activesupport::encryptedfile::missingcontenterror',
    'activesupport::encryptedfile::missingkeyerror',
    'activesupport::eventedfileupdatechecker',
    'activesupport::eventedfileupdatechecker::pathhelper',
    'activesupport::executionwrapper',
    'activesupport::executionwrapper::concurrent',
    'activesupport::executor',
    'activesupport::fileupdatechecker',
    'activesupport::gzip',
    'activesupport::gzip::stream',
    'activesupport::hashwithindifferentaccess',
    'activesupport::inflector',
    'activesupport::inflector::inflections',
    'activesupport::inflector::inflections::concurrent',
    'activesupport::inflector::inflections::uncountables',
    'activesupport::inheritableoptions',
    'activesupport::json',
    'activesupport::keygenerator',
    'activesupport::lazyloadhooks',
    'activesupport::logsubscriber',
    'activesupport::logsubscriber::testhelper',
    'activesupport::logsubscriber::testhelper::mocklogger',
    'activesupport::logger',
    'activesupport::logger::simpleformatter',
    'activesupport::messageencryptor',
    'activesupport::messageencryptor::invalidmessage',
    'activesupport::messageencryptor::messages',
    'activesupport::messageencryptor::messages::rotator',
    'activesupport::messageverifier',
    'activesupport::messageverifier::invalidsignature',
    'activesupport::messageverifier::messages',
    'activesupport::messageverifier::messages::rotator',
    'activesupport::messages',
    'activesupport::messages::rotator',
    'activesupport::messages::rotator::encryptor',
    'activesupport::messages::rotator::verifier',
    'activesupport::multibyte',
    'activesupport::multibyte::chars',
    'activesupport::multibyte::unicode',
    'activesupport::multibyte::unicode::codepoint',
    'activesupport::multibyte::unicode::unicodedatabase',
    'activesupport::notifications',
    'activesupport::notifications::event',
    'activesupport::notifications::fanout',
    'activesupport::notifications::instrumenter',
    'activesupport::numberhelper',
    'activesupport::numericwithformat',
    'activesupport::orderedhash',
    'activesupport::orderedoptions',
    'activesupport::perthreadregistry',
    'activesupport::proxyobject',
    'activesupport::railtie',
    'activesupport::railtie::tzinfo',
    'activesupport::rangewithformat',
    'activesupport::reloader',
    'activesupport::rescuable',
    'activesupport::rescuable::classmethods',
    'activesupport::safebuffer',
    'activesupport::safebuffer::safeconcaterror',
    'activesupport::securityutils',
    'activesupport::stringinquirer',
    'activesupport::subscriber',
    'activesupport::taggedlogging',
    'activesupport::testcase',
    'activesupport::testing',
    'activesupport::testing::assertions',
    'activesupport::testing::constantlookup',
    'activesupport::testing::declarative',
    'activesupport::testing::filefixtures',
    'activesupport::testing::isolation',
    'activesupport::testing::isolation::forking',
    'activesupport::testing::isolation::subprocess',
    'activesupport::testing::setupandteardown',
    'activesupport::testing::setupandteardown::classmethods',
    'activesupport::testing::timehelpers',
    'activesupport::timewithzone',
    'activesupport::timezone',
    'activesupport::timezone::concurrent',
    'activesupport::version',
    'activesupport::xmlconverter',
    'activesupport::xmlconverter::disallowedtype',
    'activesupport::xmlmini',
    'activesupport::xmlmini_libxmlsax',
    'activesupport::xmlmini_libxmlsax::hashbuilder',
    'activesupport::xmlmini_nokogiri',
    'activesupport::xmlmini_nokogiri::nokogiri',
    'activesupport::xmlmini_nokogiri::nokogiri::xml',
    'activesupport::xmlmini_nokogirisax',
    'activesupport::xmlmini_nokogirisax::hashbuilder',
    'array',
    'benchmark',
    'bigdecimal',
    'class',
    'complex',
    'date',
    'dateandtime',
    'dateandtime::calculations',
    'dateandtime::compatibility',
    'dateandtime::zones',
    'datetime',
    'delegator',
    'digest',
    'digest::uuid',
    'erb',
    'erb::util',
    'encoding',
    'enumerable',
    'exception',
    'falseclass',
    'file',
    'float',
    'gem',
    'hash',
    'io',
    'integer',
    'kernel',
    'loaderror',
    'loggersilence',
    'method',
    'mime',
    'mime::alltype',
    'mime::mimes',
    'mime::nulltype',
    'mime::type',
    'minitest',
    'minitest::suppressedsummaryreporter',
    'module',
    'module::concerning',
    'module::delegationerror',
    'nameerror',
    'nilclass',
    'numeric',
    'object',
    'process',
    'rails',
    'rails::api',
    'rails::api::edgetask',
    'rails::api::repotask',
    'rails::api::stabletask',
    'rails::api::task',
    'rails::appbuilder',
    'rails::application',
    'rails::application::bootstrap',
    'rails::application::bootstrap::rack',
    'rails::application::configuration',
    'rails::application::defaultmiddlewarestack',
    'rails::application::finisher',
    'rails::application::finisher::interlockhook',
    'rails::application::finisher::mutexhook',
    'rails::application::routesreloader',
    'rails::backtracecleaner',
    'rails::command',
    'rails::command::actions',
    'rails::command::base',
    'rails::command::helpers',
    'rails::command::helpers::editor',
    'rails::configuration',
    'rails::configuration::middlewarestackproxy',
    'rails::console',
    'rails::console::backtracecleaner',
    'rails::consolemethods',
    'rails::dbconsole',
    'rails::engine',
    'rails::engine::configuration',
    'rails::engine::railties',
    'rails::engine::rake',
    'rails::engine::updater',
    'rails::generators',
    'rails::generators::actions',
    'rails::generators::activemodel',
    'rails::generators::appbase',
    'rails::generators::appbase::gemfileentry',
    'rails::generators::base',
    'rails::generators::migration',
    'rails::generators::namedbase',
    'rails::generators::testcase',
    'rails::generators::testing',
    'rails::generators::testing::assertions',
    'rails::generators::testing::behaviour',
    'rails::generators::testing::behaviour::classmethods',
    'rails::generators::testing::setupandteardown',
    'rails::info',
    'rails::info::gem',
    'rails::initializable',
    'rails::initializable::classmethods',
    'rails::initializable::collection',
    'rails::initializable::initializer',
    'rails::paths',
    'rails::paths::path',
    'rails::paths::root',
    'rails::pluginbuilder',
    'rails::rack',
    'rails::rack::logger',
    'rails::railtie',
    'rails::railtie::configurable',
    'rails::railtie::configurable::classmethods',
    'rails::railtie::configuration',
    'rails::secrets',
    'rails::secrets::missingkeyerror',
    'rails::server',
    'rails::server::options',
    'rails::version',
    'range',
    'rational',
    'securerandom',
    'sourceannotationextractor',
    'string',
    'symbol',
    'time',
    'trueclass',
    'uri',
    'activemodel::name#!~()',
    'activesupport::duration#%()',
    'activesupport::safebuffer#%()',
    'activesupport::duration#*()',
    'activesupport::duration#+()',
    'activesupport::safebuffer#+()',
    'activesupport::timewithzone#+()',
    'rails::initializable::collection#+()',
    'activesupport::duration#-()',
    'activesupport::timewithzone#-()',
    'rails::engine::railties#-()',
    'time#-()',
    'activesupport::duration#/()',
    'activerecord::associations::collectionproxy#<<()',
    'activerecord::connectionadapters::databasestatements::partialquerycollector#<<()',
    'activesupport::inflector::inflections::uncountables#<<()',
    'activesupport::notifications::event#<<()',
    'activesupport::safebuffer#<<()',
    'mime::mimes#<<()',
    'rails::paths::path#<<()',
    'activemodel::name#<=>()',
    'activerecord::connectionadapters::abstractadapter::version#<=>()',
    'activerecord::core#<=>()',
    'activestorage::filename#<=>()',
    'activesupport::duration#<=>()',
    'activesupport::timewithzone#<=>()',
    'activesupport::timezone#<=>()',
    'date#<=>()',
    'datetime#<=>()',
    'time#<=>()',
    'actioncontroller::parameters#==()',
    'actiondispatch::middlewarestack::middleware#==()',
    'actionview::filesystemresolver#==()',
    'actionview::template::types::type#==()',
    'activemodel::name#==()',
    'activemodel::type::value#==()',
    'activerecord::associationrelation#==()',
    'activerecord::associations::collectionproxy#==()',
    'activerecord::connectionadapters::postgresqltypemetadata#==()',
    'activerecord::core#==()',
    'activerecord::reflection::macroreflection#==()',
    'activerecord::relation#==()',
    'activesupport::duration#==()',
    'mime::type#==()',
    'activemodel::name#===()',
    'activesupport::multibyte::unicode::unicodedatabase#===()',
    'mime::type#===()',
    'time::===()',
    'activemodel::name#=~()',
    'activesupport::timezone#=~()',
    'mime::type#=~()',
    'actiondispatch::request#get()',
    'actiondispatch::request#post()',
    'actioncontroller::parameters#[]()',
    'actiondispatch::flash::flashhash#[]()',
    'actiondispatch::http::headers#[]()',
    'actiondispatch::middlewarestack#[]()',
    'actionview::template::types::[]()',
    'actionview::template::types::type::[]()',
    'activemodel::errors#[]()',
    'activerecord::attributemethods#[]()',
    'activerecord::connectionadapters::tabledefinition#[]()',
    'activerecord::fixtureset#[]()',
    'activerecord::fixtureset::classcache#[]()',
    'activerecord::migration::[]()',
    'activerecord::result#[]()',
    'activesupport::dependencies::classcache#[]()',
    'activesupport::hashwithindifferentaccess::[]()',
    'activesupport::hashwithindifferentaccess#[]()',
    'activesupport::orderedoptions#[]()',
    'activesupport::safebuffer#[]()',
    'activesupport::timezone::[]()',
    'mime::[]()',
    'rails::paths::root#[]()',
    'actioncontroller::parameters#[]=()',
    'actiondispatch::flash::flashhash#[]=()',
    'actiondispatch::http::headers#[]=()',
    'actionmailer::base::lateattachmentsproxy#[]=()',
    'activerecord::attributemethods#[]=()',
    'activerecord::fixtureset#[]=()',
    'activesupport::hashwithindifferentaccess#[]=()',
    'activesupport::orderedoptions#[]=()',
    'rails::paths::root#[]=()',
    'activesupport::orderedoptions#_get()',
    'abstractcontroller::callbacks::classmethods#_insert_callbacks()',
    'actionview::context#_layout_for()',
    'actionview::helpers::renderinghelper#_layout_for()',
    'abstractcontroller::rendering#_normalize_args()',
    'abstractcontroller::callbacks::classmethods#_normalize_callback_options()',
    'abstractcontroller::rendering#_normalize_options()',
    'enumerable#_original_sum_with_required_identity()',
    'actionview::context#_prepare_context()',
    'abstractcontroller::rendering#_process_options()',
    'activerecord::attributemethods::read#_read_attribute()',
    'actioncontroller::renderers#_render_to_body_with_renderer()',
    'actioncontroller::renderers::_render_with_renderer_method_name()',
    'abstractcontroller::urlfor#_routes()',
    'abstractcontroller::urlfor::classmethods#_routes()',
    'actionview::testcase::behavior#_routes()',
    'actiondispatch::routing::urlfor#_routes_context()',
    'actionview::lookupcontext::detailscache#_set_detail()',
    'actioncontroller::paramswrapper::classmethods#_set_wrapper_options()',
    'actionview::helpers::formbuilder::_to_partial_path()',
    'actionview::helpers::urlhelper::classmethods#_url_for_modules()',
    'actiondispatch::routing::urlfor#_with_routes()',
    'actiondispatch::response#abort()',
    'abstractcontroller::base::abstract!()',
    'activerecord::inheritance::classmethods#abstract_class?()',
    'rails::railtie::abstract_railtie?()',
    'activerecord::connectionadapters::determineifpreparablevisitor#accept()',
    'actiondispatch::testrequest#accept=()',
    'activestorage::analyzer::accept?()',
    'activestorage::analyzer::imageanalyzer::accept?()',
    'activestorage::analyzer::videoanalyzer::accept?()',
    'activestorage::previewer::accept?()',
    'activestorage::previewer::mupdfpreviewer::accept?()',
    'activestorage::previewer::popplerpdfpreviewer::accept?()',
    'activestorage::previewer::videopreviewer::accept?()',
    'actiondispatch::requestencoder::identityencoder#accept_header()',
    'actiondispatch::http::mimenegotiation#accepts()',
    'activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()',
    'activerecord::attributemethods#accessed_fields()',
    'activerecord::type::json#accessor()',
    'activesupport::inflector::inflections#acronym()',
    'actioncontroller::metal::action()',
    'actiondispatch::routing::routewrapper#action()',
    'actiondispatch::testrequest#action=()',
    'actioncable::helpers::actioncablehelper#action_cable_meta_tag()',
    'actionview::layouts#action_has_layout?()',
    'abstractcontroller::base::action_methods()',
    'abstractcontroller::base#action_methods()',
    'abstractcontroller::urlfor::classmethods#action_methods()',
    'actioncable::channel::base::action_methods()',
    'abstractcontroller::base#action_name()',
    'activerecord::connectionadapters::abstractadapter#active?()',
    'activerecord::connectionadapters::mysql2adapter#active?()',
    'activerecord::connectionadapters::postgresqladapter#active?()',
    'activerecord::connectionadapters::sqlite3adapter#active?()',
    'activerecord::connectionadapters::connectionpool#active_connection?()',
    'activerecord::connectionadapters::connectionhandler#active_connections?()',
    'object#acts_like?()',
    'date#acts_like_date?()',
    'datetime#acts_like_date?()',
    'string#acts_like_string?()',
    'activesupport::timewithzone#acts_like_time?()',
    'datetime#acts_like_time?()',
    'time#acts_like_time?()',
    'activerecord::connectionadapters::abstractadapter#adapter_name()',
    'actioncontroller::renderers::add()',
    'actiondispatch::http::headers#add()',
    'actionview::testcase::behavior::renderedviewscollection#add()',
    'activemodel::errors#add()',
    'activerecord::connectionadapters::connectionpool::queue#add()',
    'activerecord::connectionadapters::schemacache#add()',
    'activesupport::inflector::inflections::uncountables#add()',
    'activesupport::logger#add()',
    'rails::paths::root#add()',
    'activerecord::connectionadapters::schemastatements#add_belongs_to()',
    'activerecord::connectionadapters::databasestatements::partialquerycollector#add_bind()',
    'actioncable::subscriptionadapter::postgresql::listener#add_channel()',
    'actioncable::subscriptionadapter::redis::listener#add_channel()',
    'actioncable::subscriptionadapter::subscribermap#add_channel()',
    'activerecord::connectionadapters::transactionstate#add_child()',
    'activerecord::connectionadapters::schemastatements#add_column()',
    'actionmailer::deliverymethods::classmethods#add_delivery_method()',
    'activesupport::subscriber::add_event_subscriber()',
    'activesupport::backtracecleaner#add_filter()',
    'actioncontroller::flash::classmethods#add_flash_types()',
    'activerecord::connectionadapters::schemastatements#add_foreign_key()',
    'activerecord::connectionadapters::schemastatements#add_index()',
    'activerecord::connectionadapters::schemastatements#add_reference()',
    'actioncontroller::add_renderer()',
    'rails::generators::base::add_shebang_option!()',
    'activesupport::backtracecleaner#add_silencer()',
    'rails::generators::actions#add_source()',
    'actioncable::subscriptionadapter::async::asyncsubscribermap#add_subscriber()',
    'actioncable::subscriptionadapter::subscribermap#add_subscriber()',
    'actioncable::connection::taggedloggerproxy#add_tags()',
    'activerecord::connectionadapters::schemastatements#add_timestamps()',
    'activerecord::connectionadapters::databasestatements#add_transaction_record()',
    'activemodel::errors#added?()',
    'activesupport::timewithzone#advance()',
    'date#advance()',
    'datetime#advance()',
    'time#advance()',
    'actiondispatch::callbacks::after()',
    'activesupport::duration#after()',
    'rails::initializable::initializer#after()',
    'abstractcontroller::callbacks::classmethods#after_action()',
    'rails::generators::actions#after_bundle()',
    'activesupport::reloader::after_class_unload()',
    'activerecord::transactions::classmethods#after_commit()',
    'activerecord::transactions::classmethods#after_create_commit()',
    'activerecord::transactions::classmethods#after_destroy_commit()',
    'activejob::callbacks::classmethods#after_enqueue()',
    'rails::railtie::configuration#after_initialize()',
    'activejob::callbacks::classmethods#after_perform()',
    'activerecord::transactions::classmethods#after_rollback()',
    'actioncable::channel::callbacks#after_subscribe()',
    'activesupport::testing::timehelpers#after_teardown()',
    'actioncable::channel::callbacks#after_unsubscribe()',
    'activerecord::transactions::classmethods#after_update_commit()',
    'activemodel::validations::callbacks::classmethods#after_validation()',
    'minitest::suppressedsummaryreporter#aggregated_results()',
    'activesupport::duration#ago()',
    'activesupport::timewithzone#ago()',
    'date#ago()',
    'datetime#ago()',
    'time#ago()',
    'actiondispatch::flash::flashhash#alert()',
    'actiondispatch::flash::flashhash#alert=()',
    'activemodel::attributemethods::classmethods#alias_attribute()',
    'module#alias_attribute()',
    'actioncontroller::mimeresponds::collector#all()',
    'actionmailer::collector#all()',
    'actionmailer::preview::all()',
    'activerecord::scoping::named::classmethods#all()',
    'activesupport::timezone::all()',
    'rails::generators::activemodel::all()',
    'mime::alltype#all?()',
    'mime::type#all?()',
    'dateandtime::calculations#all_day()',
    'actioncontroller::helpers::classmethods#all_helpers_from_path()',
    'dateandtime::calculations#all_month()',
    'rails::paths::root#all_paths()',
    'dateandtime::calculations#all_quarter()',
    'activerecord::timestamp#all_timestamp_attributes_in_model()',
    'dateandtime::calculations#all_week()',
    'dateandtime::calculations#all_year()',
    'activerecord::connectionadapters::databaselimits#allowed_index_name_length()',
    'activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()',
    'activestorage::blob::analyzable#analyze()',
    'activestorage::blob::analyzable#analyze_later()',
    'activestorage::blob::analyzable#analyzed?()',
    'rails::application::configuration#annotations()',
    'activerecord::migration#announce()',
    'module#anonymous?()',
    'actioncontroller::mimeresponds::collector#any()',
    'actionmailer::collector#any()',
    'actionview::lookupcontext::viewpaths#any?()',
    'activerecord::associations::collectionproxy#any?()',
    'activerecord::relation#any?()',
    'activesupport::arrayinquirer#any?()',
    'actioncontroller::requestforgeryprotection#any_authenticity_token_valid?()',
    'actionview::lookupcontext::viewpaths#any_templates?()',
    'activerecord::connectionadapters::connectionpool::queue#any_waiting?()',
    'rails::api::repotask#api_dir()',
    'rails::api::task#api_main()',
    'rails::generators::api_only!()',
    'rails::application::configuration#api_only=()',
    'actiondispatch::routing::mapper::resources#api_only?()',
    'actiondispatch::integrationtest::behavior#app()',
    'actiondispatch::integrationtest::behavior::classmethods#app()',
    'rails::appbuilder#app()',
    'rails::consolemethods#app()',
    'rails::engine#app()',
    'rails::pluginbuilder#app()',
    'rails::server#app()',
    'actiondispatch::integrationtest::behavior::classmethods#app=()',
    'rails::railtie::configuration#app_generators()',
    'rails::railtie::configuration#app_middleware()',
    'activerecord::associations::collectionproxy#append()',
    'abstractcontroller::callbacks::classmethods#append_after_action()',
    'abstractcontroller::callbacks::classmethods#append_around_action()',
    'abstractcontroller::callbacks::classmethods#append_before_action()',
    'activesupport::concern#append_features()',
    'actioncontroller::instrumentation#append_info_to_payload()',
    'actionview::viewpaths#append_view_path()',
    'actionview::viewpaths::classmethods#append_view_path()',
    'rails::application()',
    'rails::generators::actions#application()',
    'rails::generators::namedbase#application_name()',
    'actiondispatch::exceptionwrapper#application_trace()',
    'rails::generators::testing::behaviour::classmethods#arguments()',
    'abstractcontroller::callbacks::classmethods#around_action()',
    'activejob::callbacks::classmethods#around_enqueue()',
    'activejob::callbacks::classmethods#around_perform()',
    'actioncontroller::parameters#as_json()',
    'activemodel::errors#as_json()',
    'activemodel::serializers::json#as_json()',
    'activestorage::filename#as_json()',
    'activesupport::timewithzone#as_json()',
    'exception#as_json()',
    'activesupport::testing::assertions#assert_changes()',
    'rails::generators::testing::assertions#assert_class_method()',
    'activesupport::testing::assertions#assert_difference()',
    'rails::generators::testing::assertions#assert_directory()',
    'actionmailer::testhelper#assert_emails()',
    'actionmailer::testhelper#assert_enqueued_email_with()',
    'actionmailer::testhelper#assert_enqueued_emails()',
    'activejob::testhelper#assert_enqueued_jobs()',
    'activejob::testhelper#assert_enqueued_with()',
    'rails::generators::testing::assertions#assert_field_default_value()',
    'rails::generators::testing::assertions#assert_field_type()',
    'rails::generators::testing::assertions#assert_file()',
    'actiondispatch::assertions::routingassertions#assert_generates()',
    'rails::generators::testing::assertions#assert_instance_method()',
    'rails::generators::testing::assertions#assert_method()',
    'rails::generators::testing::assertions#assert_migration()',
    'activesupport::testing::assertions#assert_no_changes()',
    'activesupport::testing::assertions#assert_no_difference()',
    'rails::generators::testing::assertions#assert_no_directory()',
    'actionmailer::testhelper#assert_no_emails()',
    'actionmailer::testhelper#assert_no_enqueued_emails()',
    'activejob::testhelper#assert_no_enqueued_jobs()',
    'rails::generators::testing::assertions#assert_no_file()',
    'rails::generators::testing::assertions#assert_no_migration()',
    'activejob::testhelper#assert_no_performed_jobs()',
    'activesupport::testing::assertions#assert_not()',
    'activesupport::testing::assertions#assert_nothing_raised()',
    'activejob::testhelper#assert_performed_jobs()',
    'activejob::testhelper#assert_performed_with()',
    'actiondispatch::assertions::routingassertions#assert_recognizes()',
    'actiondispatch::assertions::responseassertions#assert_redirected_to()',
    'actiondispatch::assertions::responseassertions#assert_response()',
    'actiondispatch::assertions::routingassertions#assert_routing()',
    'actioncontroller::templateassertions#assert_template()',
    'hash#assert_valid_keys()',
    'activemodel::type::value#assert_valid_value()',
    'actionview::helpers::asseturlhelper#asset_path()',
    'actionview::helpers::asseturlhelper#asset_url()',
    'rails::pluginbuilder#assets_manifest()',
    'activemodel::attributeassignment#assign_attributes()',
    'actiondispatch::testprocess#assigns()',
    'activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()',
    'activesupport::timezone#at()',
    'string#at()',
    'time::at()',
    'date#at_beginning_of_day()',
    'datetime#at_beginning_of_day()',
    'time#at_beginning_of_day()',
    'datetime#at_beginning_of_hour()',
    'time#at_beginning_of_hour()',
    'datetime#at_beginning_of_minute()',
    'time#at_beginning_of_minute()',
    'dateandtime::calculations#at_beginning_of_month()',
    'dateandtime::calculations#at_beginning_of_quarter()',
    'dateandtime::calculations#at_beginning_of_week()',
    'dateandtime::calculations#at_beginning_of_year()',
    'date#at_end_of_day()',
    'datetime#at_end_of_day()',
    'time#at_end_of_day()',
    'datetime#at_end_of_hour()',
    'time#at_end_of_hour()',
    'datetime#at_end_of_minute()',
    'time#at_end_of_minute()',
    'dateandtime::calculations#at_end_of_month()',
    'dateandtime::calculations#at_end_of_quarter()',
    'dateandtime::calculations#at_end_of_week()',
    'dateandtime::calculations#at_end_of_year()',
    'date#at_midday()',
    'datetime#at_midday()',
    'time#at_midday()',
    'date#at_middle_of_day()',
    'datetime#at_middle_of_day()',
    'time#at_middle_of_day()',
    'date#at_midnight()',
    'datetime#at_midnight()',
    'time#at_midnight()',
    'date#at_noon()',
    'datetime#at_noon()',
    'time#at_noon()',
    'time::at_with_coercion()',
    'time::at_without_coercion()',
    'actionview::helpers::atomfeedhelper#atom_feed()',
    'file::atomic_write()',
    'actioncable::connection::streameventloop#attach()',
    'activestorage::attached::many#attach()',
    'activestorage::attached::one#attach()',
    'activesupport::subscriber::attach_to()',
    'activestorage::attached::many#attached?()',
    'activestorage::attached::one#attached?()',
    'activestorage::attached::one#attachment()',
    'actionmailer::base#attachments()',
    'actionmailer::mailhelper#attachments()',
    'activestorage::attached::many#attachments()',
    'module#attr_internal()',
    'module#attr_internal_accessor()',
    'module#attr_internal_reader()',
    'module#attr_internal_writer()',
    'activerecord::readonlyattributes::classmethods#attr_readonly()',
    'activemodel::attributes::classmethods#attribute()',
    'activerecord::attributes::classmethods#attribute()',
    'activesupport::currentattributes::attribute()',
    'activemodel::attributemethods::classmethods#attribute_alias()',
    'activemodel::attributemethods::classmethods#attribute_alias?()',
    'activerecord::attributemethods::dirty#attribute_before_last_save()',
    'activerecord::attributemethods::dirty#attribute_change_to_be_saved()',
    'activerecord::attributemethods#attribute_for_inspect()',
    'activerecord::attributemethods::dirty#attribute_in_database()',
    'activemodel::validations::classmethods#attribute_method?()',
    'activerecord::attributemethods::classmethods#attribute_method?()',
    'activemodel::attributemethods::classmethods#attribute_method_affix()',
    'activemodel::attributemethods::classmethods#attribute_method_prefix()',
    'activemodel::attributemethods::classmethods#attribute_method_suffix()',
    'activemodel::attributemethods#attribute_missing()',
    'activerecord::attributemethods#attribute_names()',
    'activerecord::attributemethods::classmethods#attribute_names()',
    'activerecord::attributemethods#attribute_present?()',
    'activerecord::attributemethods#attributes()',
    'activemodel::attributeassignment#attributes=()',
    'activerecord::attributemethods::beforetypecast#attributes_before_type_cast()',
    'activerecord::connectionadapters::postgresqltypemetadata#attributes_for_hash()',
    'activerecord::attributemethods::dirty#attributes_in_database()',
    'rails::generators::namedbase#attributes_names()',
    'activestorage::blob#audio?()',
    'actionview::helpers::asseturlhelper#audio_path()',
    'actionview::helpers::assettaghelper#audio_tag()',
    'actionview::helpers::asseturlhelper#audio_url()',
    'actioncontroller::httpauthentication::basic#auth_param()',
    'actioncontroller::httpauthentication::basic#auth_scheme()',
    'actioncontroller::httpauthentication::basic#authenticate()',
    'actioncontroller::httpauthentication::digest#authenticate()',
    'actioncontroller::httpauthentication::token#authenticate()',
    'activemodel::securepassword::instancemethodsonactivation#authenticate()',
    'actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()',
    'actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()',
    'actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()',
    'actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()',
    'actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()',
    'actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()',
    'actioncontroller::httpauthentication::digest#authentication_header()',
    'actioncontroller::httpauthentication::basic#authentication_request()',
    'actioncontroller::httpauthentication::digest#authentication_request()',
    'actioncontroller::httpauthentication::token#authentication_request()',
    'actiondispatch::request#authorization()',
    'actionview::helpers::assettaghelper#auto_discovery_link_tag()',
    'activesupport::autoload#autoload()',
    'activesupport::autoload#autoload_at()',
    'rails::paths::root#autoload_once()',
    'rails::engine::configuration#autoload_once_paths()',
    'rails::engine::configuration#autoload_paths()',
    'rails::paths::root#autoload_paths()',
    'activesupport::autoload#autoload_under()',
    'activesupport::autoload#autoloads()',
    'activerecord::reflection::macroreflection#autosave=()',
    'abstractcontroller::base#available_action?()',
    'activerecord::calculations#average()',
    'actiondispatch::response#await_commit()',
    'actiondispatch::response#await_sent()',
    'activesupport::xmlmini#backend()',
    'activesupport::xmlmini#backend=()',
    'rails::backtrace_cleaner()',
    'rails::command::base::banner()',
    'rails::generators::base::banner()',
    'activestorage::filename#base()',
    'securerandom::base58()',
    'activerecord::inheritance::classmethods#base_class()',
    'rails::command::base::base_name()',
    'rails::generators::base::base_name()',
    'rails::generators::base::base_root()',
    'actioncable::connection::base#beat()',
    'activerecord::persistence#becomes()',
    'activerecord::persistence#becomes!()',
    'actiondispatch::callbacks::before()',
    'actionview::digestor::perexecutiondigestcacheexpiry::before()',
    'activesupport::duration#before()',
    'rails::initializable::initializer#before()',
    'abstractcontroller::callbacks::classmethods#before_action()',
    'activesupport::reloader::before_class_unload()',
    'rails::railtie::configuration#before_configuration()',
    'rails::railtie::configuration#before_eager_load()',
    'activejob::callbacks::classmethods#before_enqueue()',
    'rails::railtie::configuration#before_initialize()',
    'activejob::callbacks::classmethods#before_perform()',
    'actioncable::channel::callbacks#before_subscribe()',
    'actioncable::channel::callbacks#before_unsubscribe()',
    'activemodel::validations::callbacks::classmethods#before_validation()',
    'activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()',
    'activerecord::connectionadapters::databasestatements#begin_db_transaction()',
    'activerecord::connectionadapters::postgresql::databasestatements#begin_db_transaction()',
    'activerecord::connectionadapters::abstractmysqladapter#begin_isolated_db_transaction()',
    'activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()',
    'activerecord::connectionadapters::postgresql::databasestatements#begin_isolated_db_transaction()',
    'date#beginning_of_day()',
    'datetime#beginning_of_day()',
    'time#beginning_of_day()',
    'datetime#beginning_of_hour()',
    'time#beginning_of_hour()',
    'datetime#beginning_of_minute()',
    'time#beginning_of_minute()',
    'dateandtime::calculations#beginning_of_month()',
    'dateandtime::calculations#beginning_of_quarter()',
    'date::beginning_of_week()',
    'dateandtime::calculations#beginning_of_week()',
    'date::beginning_of_week=()',
    'dateandtime::calculations#beginning_of_year()',
    'activesupport::deprecation::behavior#behavior()',
    'activesupport::deprecation::behavior#behavior=()',
    'activerecord::associations::classmethods#belongs_to()',
    'activerecord::connectionadapters::sqlite3::tabledefinition#belongs_to()',
    'activerecord::connectionadapters::table#belongs_to()',
    'activerecord::connectionadapters::tabledefinition#belongs_to()',
    'rails::initializable::initializer#belongs_to?()',
    'activesupport::benchmarkable#benchmark()',
    'activesupport::timewithzone#between?()',
    'activerecord::connectionadapters::postgresql::columnmethods#bigserial()',
    'rails::appbuilder#bin()',
    'rails::pluginbuilder#bin()',
    'rails::appbuilder#bin_when_updating()',
    'activerecord::connectionadapters::postgresql::oid::bit::data#binary?()',
    'rails::initializable::initializer#bind()',
    'activerecord::connectionadapters::postgresql::columnmethods#bit()',
    'activerecord::connectionadapters::postgresql::columnmethods#bit_varying()',
    'activemodel::errors#blank?()',
    'activerecord::relation#blank?()',
    'activesupport::timewithzone#blank?()',
    'falseclass#blank?()',
    'nilclass#blank?()',
    'object#blank?()',
    'string#blank?()',
    'trueclass#blank?()',
    'activerecord::connectionadapters::mysql::columnmethods#blob()',
    'actiondispatch::contentsecuritypolicy#block_all_mixed_content()',
    'actionmailer::mailhelper#block_format()',
    'actiondispatch::request#body()',
    'actiondispatch::response#body()',
    'actiondispatch::response::rackbody#body()',
    'actiondispatch::response#body=()',
    'actiondispatch::response#body_parts()',
    'activerecord::connectionadapters::postgresql::columnmethods#box()',
    'actioncable::server::broadcasting#broadcast()',
    'actioncable::server::broadcasting::broadcaster#broadcast()',
    'actioncable::subscriptionadapter::base#broadcast()',
    'actioncable::subscriptionadapter::subscribermap#broadcast()',
    'actioncable::channel::broadcasting#broadcast_to()',
    'actioncable::server::broadcasting#broadcaster_for()',
    'actiondispatch::contentsecuritypolicy#build()',
    'actiondispatch::middlewarestack#build()',
    'actiondispatch::middlewarestack::middleware#build()',
    'actionview::resolver::path::build()',
    'activerecord::associationrelation#build()',
    'activerecord::associations::collectionproxy#build()',
    'activerecord::relation#build()',
    'activesupport::callbacks::filters::after::build()',
    'activesupport::callbacks::filters::before::build()',
    'activesupport::duration::build()',
    'rails::generators::activemodel::build()',
    'activestorage::blob::build_after_upload()',
    'activejob::queueadapters::queueclassicadapter#build_queue()',
    'actioncontroller::testcase::behavior#build_response()',
    'rails::application::defaultmiddlewarestack#build_stack()',
    'activerecord::connectionadapters::postgresql::schemastatements#bulk_change_table()',
    'actionview::helpers::formbuilder#button()',
    'actionview::helpers::formtaghelper#button_tag()',
    'actionview::helpers::urlhelper#button_to()',
    'numeric#byte()',
    'numeric#bytes()',
    'abstractcontroller::caching#cache()',
    'actionview::helpers::cachehelper#cache()',
    'activerecord::connectionadapters::querycache#cache()',
    'activerecord::querycache::classmethods#cache()',
    'activerecord::fixtureset::cache_fixtures()',
    'activerecord::fixtureset::cache_for_connection()',
    'actionview::helpers::cachehelper#cache_fragment_name()',
    'actionview::helpers::cachehelper#cache_if()',
    'activerecord::integration#cache_key()',
    'activerecord::relation#cache_key()',
    'activerecord::integration#cache_key_with_version()',
    'actionview::logsubscriber#cache_message()',
    'abstractcontroller::caching::configmethods#cache_store()',
    'abstractcontroller::caching::configmethods#cache_store=()',
    'actionview::base::cache_template_loading()',
    'actionview::base::cache_template_loading=()',
    'actionview::helpers::cachehelper#cache_unless()',
    'activerecord::integration#cache_version()',
    'activerecord::fixtureset::cached_fixtures()',
    'activerecord::associations::collectionproxy#calculate()',
    'activerecord::calculations#calculate()',
    'actiondispatch::remoteip::getip#calculate_ip()',
    'actioncable::server::base#call()',
    'actiondispatch::callbacks#call()',
    'actiondispatch::contentsecuritypolicy::middleware#call()',
    'actiondispatch::cookies#call()',
    'actiondispatch::debugexceptions#call()',
    'actiondispatch::debuglocks#call()',
    'actiondispatch::executor#call()',
    'actiondispatch::filehandler#call()',
    'actiondispatch::publicexceptions#call()',
    'actiondispatch::remoteip#call()',
    'actiondispatch::requestid#call()',
    'actiondispatch::showexceptions#call()',
    'actiondispatch::static#call()',
    'actionmailer::preview::call()',
    'actionview::template::handlers::builder#call()',
    'actionview::template::handlers::erb::call()',
    'actionview::template::handlers::erb#call()',
    'actionview::template::handlers::html#call()',
    'actionview::template::handlers::raw#call()',
    'activerecord::migration::checkpending#call()',
    'activesupport::callbacks::conditionals::value#call()',
    'activesupport::logger::simpleformatter#call()',
    'rails::engine#call()',
    'rails::rack::logger#call()',
    'rails::rack::logger#call_app()',
    'string#camelcase()',
    'activesupport::inflector#camelize()',
    'string#camelize()',
    'rails::generators::actions#capify!()',
    'activesupport::multibyte::chars#capitalize()',
    'actionview::helpers::capturehelper#capture()',
    'activemodel::type::value#cast()',
    'activemodel::type::value#cast_value()',
    'module#cattr_accessor()',
    'module#cattr_reader()',
    'module#cattr_writer()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()',
    'actionview::helpers::taghelper#cdata_section()',
    'activerecord::connectionadapters::table#change()',
    'activesupport::encryptedfile#change()',
    'activesupport::timewithzone#change()',
    'date#change()',
    'datetime#change()',
    'time#change()',
    'activerecord::connectionadapters::schemastatements#change_column()',
    'activerecord::connectionadapters::schemastatements#change_column_comment()',
    'activerecord::connectionadapters::schemastatements#change_column_default()',
    'activerecord::connectionadapters::schemastatements#change_column_null()',
    'activerecord::connectionadapters::table#change_default()',
    'activerecord::connectionadapters::schemastatements#change_table()',
    'activerecord::connectionadapters::schemastatements#change_table_comment()',
    'activemodel::dirty#changed()',
    'activemodel::dirty#changed?()',
    'activemodel::type::value#changed?()',
    'activerecord::attributemethods::dirty#changed_attribute_names_to_save()',
    'activemodel::dirty#changed_attributes()',
    'activerecord::autosaveassociation#changed_for_autosave?()',
    'activemodel::type::value#changed_in_place?()',
    'activerecord::type::json#changed_in_place?()',
    'activemodel::dirty#changes()',
    'activerecord::attributemethods::dirty#changes_to_save()',
    'actioncable::channel::naming#channel_name()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#characters()',
    'actiondispatch::response#charset()',
    'activerecord::connectionadapters::abstractmysqladapter#charset()',
    'activerecord::tasks::databasetasks#charset()',
    'actiondispatch::response#charset=()',
    'activerecord::tasks::databasetasks#charset_current()',
    'actionview::helpers::formbuilder#check_box()',
    'actionview::helpers::formhelper#check_box()',
    'actionview::helpers::formtaghelper#check_box_tag()',
    'rails::generators::namedbase::check_class_collision()',
    'activerecord::migration::check_pending!()',
    'activerecord::tasks::databasetasks#check_protected_environments!()',
    'activerecord::tasks::databasetasks#check_schema_file()',
    'activerecord::tasks::databasetasks#check_target_version()',
    'activerecord::connectionadapters::connectionpool#checkin()',
    'activerecord::connectionadapters::connectionpool#checkout()',
    'rails::paths::path#children()',
    'activerecord::connectionadapters::postgresql::columnmethods#cidr()',
    'activerecord::connectionadapters::postgresql::columnmethods#circle()',
    'activerecord::connectionadapters::postgresql::columnmethods#citext()',
    'datetime::civil_from_format()',
    'activesupport::deprecation::deprecatedconstantproxy#class()',
    'class#class_attribute()',
    'kernel#class_eval()',
    'activesupport::concern#class_methods()',
    'rails::generators::namedbase#class_name()',
    'rails::generators::namedbase#class_path()',
    'activesupport::inflector#classify()',
    'string#classify()',
    'activesupport::backtracecleaner#clean()',
    'activesupport::cache::filestore#cleanup()',
    'activesupport::cache::memorystore#cleanup()',
    'activesupport::cache::nullstore#cleanup()',
    'activesupport::cache::rediscachestore#cleanup()',
    'activesupport::cache::store#cleanup()',
    'actioncontroller::instrumentation#cleanup_view_runtime()',
    'actiondispatch::flash::flashhash#clear()',
    'activemodel::errors#clear()',
    'activerecord::associations::collectionproxy#clear()',
    'activerecord::connectionadapters::connectionpool::queue#clear()',
    'activesupport::cache::filestore#clear()',
    'activesupport::cache::memcachestore#clear()',
    'activesupport::cache::memorystore#clear()',
    'activesupport::cache::nullstore#clear()',
    'activesupport::cache::rediscachestore#clear()',
    'activesupport::cache::store#clear()',
    'activesupport::cache::strategy::localcache::localstore#clear()',
    'activesupport::descendantstracker::clear()',
    'activesupport::inflector::inflections#clear()',
    'activerecord::connectionadapters::schemacache#clear!()',
    'activesupport::dependencies::classcache#clear!()',
    'abstractcontroller::base::clear_action_methods!()',
    'actioncable::channel::base::clear_action_methods!()',
    'activerecord::connectionadapters::connectionhandler#clear_active_connections!()',
    'activerecord::connectionadapters::connectionhandler#clear_all_connections!()',
    'activemodel::dirty#clear_attribute_changes()',
    'actionview::resolver#clear_cache()',
    'activerecord::connectionadapters::abstractadapter#clear_cache!()',
    'activerecord::connectionadapters::abstractmysqladapter#clear_cache!()',
    'activerecord::connectionadapters::postgresqladapter#clear_cache!()',
    'activerecord::connectionadapters::sqlite3adapter#clear_cache!()',
    'activemodel::dirty#clear_changes_information()',
    'activerecord::connectionadapters::schemacache#clear_data_source_cache!()',
    'abstractcontroller::helpers::classmethods#clear_helpers()',
    'activerecord::connectionadapters::querycache#clear_query_cache()',
    'activerecord::connectionadapters::connectionpool#clear_reloadable_connections()',
    'activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()',
    'activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()',
    'activemodel::validations::classmethods#clear_validators!()',
    'activerecord::connectionadapters::postgresql::schemastatements#client_min_messages()',
    'activerecord::connectionadapters::postgresql::schemastatements#client_min_messages=()',
    'activerecord::core#clone()',
    'activesupport::safebuffer#clone_empty()',
    'actioncable::connection::base#close()',
    'actioncontroller::live::sse#close()',
    'actiondispatch::http::uploadedfile#close()',
    'actiondispatch::response#close()',
    'actiondispatch::response::rackbody#close()',
    'activerecord::connectionadapters::abstractadapter#close()',
    'activesupport::gzip::stream#close()',
    'actiondispatch::response#code()',
    'actiondispatch::assertionresponse#code_and_name()',
    'activerecord::connectionadapters::abstractmysqladapter#collation()',
    'activerecord::connectionadapters::postgresql::schemastatements#collation()',
    'activerecord::tasks::databasetasks#collation()',
    'activerecord::tasks::databasetasks#collation_current()',
    'actiondispatch::routing::mapper::resources#collection()',
    'actionview::helpers::formbuilder#collection_check_boxes()',
    'actionview::helpers::formoptionshelper#collection_check_boxes()',
    'actionview::helpers::formbuilder#collection_radio_buttons()',
    'actionview::helpers::formoptionshelper#collection_radio_buttons()',
    'actionview::helpers::formbuilder#collection_select()',
    'actionview::helpers::formoptionshelper#collection_select()',
    'activesupport::logsubscriber#color()',
    'actionview::helpers::formhelper#color_field()',
    'actionview::helpers::formtaghelper#color_field_tag()',
    'rails::application::configuration#colorize_logging()',
    'rails::application::configuration#colorize_logging=()',
    'activerecord::connectionadapters::table#column()',
    'activerecord::connectionadapters::tabledefinition#column()',
    'activerecord::modelschema::classmethods#column_defaults()',
    'activerecord::connectionadapters::schemastatements#column_exists?()',
    'activerecord::connectionadapters::table#column_exists?()',
    'activerecord::attributemethods::classmethods#column_for_attribute()',
    'activerecord::connectionadapters::databaselimits#column_name_length()',
    'activerecord::modelschema::classmethods#column_names()',
    'activerecord::connectionadapters::schemacache#columns()',
    'activerecord::connectionadapters::schemastatements#columns()',
    'activerecord::connectionadapters::tabledefinition#columns()',
    'activerecord::modelschema::classmethods#columns()',
    'activerecord::connectionadapters::schemacache#columns_hash()',
    'activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()',
    'activerecord::connectionadapters::databaselimits#columns_per_table()',
    'abstractcontroller::caching::fragments#combined_fragment_cache_key()',
    'rails::command::base::command_name()',
    'rails::command::command_type()',
    'rails::generators::command_type()',
    'activerecord::connectionadapters::realtransaction#commit()',
    'activerecord::connectionadapters::savepointtransaction#commit()',
    'actiondispatch::response#commit!()',
    'activerecord::connectionadapters::transactionstate#commit!()',
    'activerecord::connectionadapters::databasestatements#commit_db_transaction()',
    'activerecord::connectionadapters::postgresql::databasestatements#commit_db_transaction()',
    'actiondispatch::request#commit_flash()',
    'actiondispatch::response#committed?()',
    'activerecord::connectionadapters::transactionstate#committed?()',
    'activesupport::hashwithindifferentaccess#compact()',
    'hash#compact()',
    'hash#compact!()',
    'activesupport::timewithzone#comparable_time()',
    'date#compare_with_coercion()',
    'time#compare_with_coercion()',
    'actioncontroller::requestforgeryprotection#compare_with_real_token()',
    'date#compare_without_coercion()',
    'time#compare_without_coercion()',
    'activesupport::configurable::configuration#compile_methods!()',
    'activesupport::configurable::configuration::compile_methods!()',
    'activerecord::querycache::complete()',
    'rails::application::finisher::interlockhook::complete()',
    'rails::application::finisher::mutexhook#complete()',
    'activesupport::executionwrapper#complete!()',
    'activerecord::connectionadapters::transactionstate#completed?()',
    'rails::api::repotask#component_root_dir()',
    'activesupport::multibyte::chars#compose()',
    'activesupport::multibyte::unicode#compose()',
    'activerecord::aggregations::classmethods#composed_of()',
    'activesupport::gzip::compress()',
    'actionview::helpers::asseturlhelper#compute_asset_extname()',
    'actionview::helpers::asseturlhelper#compute_asset_host()',
    'actionview::helpers::asseturlhelper#compute_asset_path()',
    'activerecord::reflection::macroreflection#compute_class()',
    'rails::rack::logger#compute_tags()',
    'activerecord::inheritance::classmethods#compute_type()',
    'actionview::helpers::texthelper#concat()',
    'activerecord::associations::collectionproxy#concat()',
    'activesupport::safebuffer#concat()',
    'rails::paths::path#concat()',
    'actiondispatch::routing::mapper::concerns#concern()',
    'kernel#concern()',
    'module::concerning#concern()',
    'module::concerning#concerning()',
    'actiondispatch::routing::mapper::concerns#concerns()',
    'actionview::testcase::behavior#config()',
    'activesupport::configurable#config()',
    'activesupport::configurable::classmethods#config()',
    'activesupport::encryptedconfiguration#config()',
    'rails::appbuilder#config()',
    'rails::dbconsole#config()',
    'rails::engine#config()',
    'rails::pluginbuilder#config()',
    'rails::railtie#config()',
    'rails::application#config_for()',
    'rails::appbuilder#config_target_version()',
    'rails::appbuilder#config_when_updating()',
    'rails::appbuilder#configru()',
    'rails::configuration()',
    'activerecord::core::configurations()',
    'rails::dbconsole#configurations()',
    'activerecord::core::configurations=()',
    'activestorage::service::configure()',
    'activesupport::configurable::classmethods#configure()',
    'rails::railtie::configure()',
    'rails::railtie::configurable::classmethods#configure()',
    'rails::api::task#configure_rdoc_files()',
    'rails::api::repotask#configure_sdoc()',
    'rails::api::task#configure_sdoc()',
    'activerecord::connectionadapters::connectionhandler#connected?()',
    'activerecord::connectionadapters::connectionpool#connected?()',
    'activerecord::connectionhandling#connected?()',
    'activerecord::connectionadapters::connectionpool#connection()',
    'activerecord::connectionhandling#connection()',
    'activerecord::migration#connection()',
    'rails::dbconsole#connection()',
    'activerecord::connectionhandling#connection_config()',
    'activerecord::core::connection_handler()',
    'activerecord::core#connection_handler()',
    'activerecord::core::connection_handler=()',
    'actioncable::connection::identification#connection_identifier()',
    'actioncable::server::base#connection_identifiers()',
    'activerecord::connectionhandling#connection_pool()',
    'activerecord::connectionadapters::connectionhandler#connection_pool_list()',
    'activerecord::connectionadapters::connectionhandler#connection_pools()',
    'activerecord::connectionhandling#connection_specification_name()',
    'rails::application#console()',
    'rails::railtie::console()',
    'activesupport::deprecation::deprecatedconstantaccessor#const_missing()',
    'activesupport::inflector#constantize()',
    'string#constantize()',
    'actiondispatch::routing::mapper::scoping#constraints()',
    'actiondispatch::routing::routewrapper#constraints()',
    'activesupport::multibyte::chars::consumes?()',
    'activerecord::modelschema::classmethods#content_columns()',
    'actionview::helpers::capturehelper#content_for()',
    'actionview::helpers::capturehelper#content_for?()',
    'actiondispatch::request#content_length()',
    'actiondispatch::http::mimenegotiation#content_mime_type()',
    'actioncontroller::contentsecuritypolicy::classmethods#content_security_policy()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy()',
    'rails::application::configuration#content_security_policy()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy=()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_generator()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_generator=()',
    'actioncontroller::contentsecuritypolicy::classmethods#content_security_policy_report_only()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy_report_only()',
    'actiondispatch::contentsecuritypolicy::request#content_security_policy_report_only=()',
    'actionview::helpers::activemodelinstancetag#content_tag()',
    'actionview::helpers::taghelper#content_tag()',
    'actiondispatch::http::mimenegotiation#content_type()',
    'actiondispatch::requestencoder::identityencoder#content_type()',
    'actiondispatch::response#content_type()',
    'actiondispatch::response#content_type=()',
    'activerecord::fixtureset::context_class()',
    'rails::initializable::initializer#context_class()',
    'actiondispatch::routing::mapper::scoping#controller()',
    'actiondispatch::routing::routewrapper#controller()',
    'rails::consolemethods#controller()',
    'actioncontroller::testcase::behavior::classmethods#controller_class()',
    'actiondispatch::request#controller_class()',
    'actioncontroller::testcase::behavior::classmethods#controller_class=()',
    'actiondispatch::request#controller_class_for()',
    'actioncontroller::testcase::behavior#controller_class_name()',
    'actioncontroller::metal::controller_name()',
    'actioncontroller::metal#controller_name()',
    'abstractcontroller::base::controller_path()',
    'abstractcontroller::base#controller_path()',
    'actionmailer::base::controller_path()',
    'actionview::testcase::testcontroller#controller_path=()',
    'activerecord::legacyyamladapter::convert()',
    'activerecord::legacyyamladapter::rails41::convert()',
    'activerecord::legacyyamladapter::rails420::convert()',
    'activesupport::hashwithindifferentaccess#convert_key()',
    'activesupport::hashwithindifferentaccess#convert_value()',
    'actioncontroller::parameters#converted_arrays()',
    'actiondispatch::request#cookie_jar()',
    'actioncable::connection::base#cookies()',
    'actiondispatch::integration::session#cookies()',
    'actiondispatch::response#cookies()',
    'actiondispatch::testprocess#cookies()',
    'activerecord::migration#copy()',
    'activemodel::errors#count()',
    'activerecord::associations::collectionproxy#count()',
    'activerecord::calculations#count()',
    'activerecord::querying#count_by_sql()',
    'activesupport::timezone::country_zones()',
    'actiondispatch::response::create()',
    'actiondispatch::testrequest::create()',
    'actionview::digestor::node::create()',
    'activerecord::associationrelation#create()',
    'activerecord::associations::collectionproxy#create()',
    'activerecord::connectionadapters::databasestatements#create()',
    'activerecord::persistence::classmethods#create()',
    'activerecord::relation#create()',
    'activerecord::tasks::databasetasks#create()',
    'activestorage::directuploadscontroller#create()',
    'activesupport::timezone::create()',
    'rails::application::create()',
    'activerecord::associationrelation#create!()',
    'activerecord::associations::collectionproxy#create!()',
    'activerecord::persistence::classmethods#create!()',
    'activerecord::relation#create!()',
    'activestorage::blob::create_after_upload!()',
    'activerecord::tasks::databasetasks#create_all()',
    'activestorage::blob::create_before_direct_upload!()',
    'activerecord::tasks::databasetasks#create_current()',
    'activerecord::connectionadapters::abstractmysqladapter#create_database()',
    'activerecord::connectionadapters::postgresql::schemastatements#create_database()',
    'activerecord::fixtureset::create_fixtures()',
    'rails::generators::testing::behaviour#create_generated_attribute()',
    'activerecord::connectionadapters::schemastatements#create_join_table()',
    'rails::generators::migration#create_migration()',
    'activerecord::connectionadapters::savepoints#create_savepoint()',
    'activerecord::connectionadapters::postgresql::schemastatements#create_schema()',
    'actiondispatch::integration::runner#create_session()',
    'activerecord::connectionadapters::schemastatements#create_table()',
    'activerecord::querymethods#create_with()',
    'rails::appbuilder#credentials()',
    'rails::application#credentials()',
    'actionview::helpers::csphelper#csp_meta_tag()',
    'actionview::helpers::csrfhelper#csrf_meta_tag()',
    'actionview::helpers::csrfhelper#csrf_meta_tags()',
    'activerecord::connectionadapters::postgresql::schemastatements#ctype()',
    'date::current()',
    'datetime::current()',
    'time::current()',
    'activerecord::tasks::databasetasks#current_config()',
    'actionview::helpers::texthelper#current_cycle()',
    'activerecord::connectionadapters::abstractmysqladapter#current_database()',
    'activerecord::connectionadapters::postgresql::schemastatements#current_database()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()',
    'actionview::helpers::urlhelper#current_page?()',
    'activerecord::connectionadapters::savepoints#current_savepoint_name()',
    'activerecord::connectionadapters::postgresql::schemastatements#current_schema()',
    'activerecord::timestamp#current_time_from_proper_timezone()',
    'activerecord::migration::current_version()',
    'actioncontroller::mimeresponds::collector#custom()',
    'actionmailer::collector#custom()',
    'actionview::helpers::texthelper#cycle()',
    'activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()',
    'activerecord::attributemethods::classmethods#dangerous_class_method?()',
    'activesupport::inflector#dasherize()',
    'string#dasherize()',
    'activerecord::connectionadapters::schemacache#data_source_exists?()',
    'activerecord::connectionadapters::schemastatements#data_source_exists?()',
    'activerecord::connectionadapters::schemacache#data_sources()',
    'activerecord::connectionadapters::schemastatements#data_sources()',
    'rails::application::configuration#database_configuration()',
    'rails::appbuilder#database_yml()',
    'actiondispatch::http::cache::response#date()',
    'actiondispatch::http::cache::response#date=()',
    'actiondispatch::http::cache::response#date?()',
    'actionview::helpers::formhelper#date_field()',
    'actionview::helpers::formtaghelper#date_field_tag()',
    'actionview::helpers::datehelper#date_select()',
    'actionview::helpers::formbuilder#date_select()',
    'activerecord::connectionadapters::postgresql::columnmethods#daterange()',
    'actionview::helpers::formhelper#datetime_field()',
    'actionview::helpers::formtaghelper#datetime_field_tag()',
    'actionview::helpers::formhelper#datetime_local_field()',
    'actionview::helpers::formtaghelper#datetime_local_field_tag()',
    'actionview::helpers::datehelper#datetime_select()',
    'actionview::helpers::formbuilder#datetime_select()',
    'numeric#day()',
    'numeric#days()',
    'dateandtime::calculations#days_ago()',
    'time::days_in_month()',
    'time::days_in_year()',
    'dateandtime::calculations#days_since()',
    'dateandtime::calculations#days_to_week_start()',
    'rails::appbuilder#db()',
    'activerecord::tasks::databasetasks#db_dir()',
    'actionview::digestor::nulllogger::debug()',
    'actionview::helpers::debughelper#debug()',
    'rails::application::configuration#debug_exception_response_format()',
    'rails::application::configuration#debug_exception_response_format=()',
    'actiondispatch::debugexceptions::debugview#debug_hash()',
    'actiondispatch::debugexceptions::debugview#debug_headers()',
    'actiondispatch::debugexceptions::debugview#debug_params()',
    'activestorage::variation::decode()',
    'activesupport::json::decode()',
    'actioncontroller::httpauthentication::basic#decode_credentials()',
    'actioncontroller::httpauthentication::digest#decode_credentials()',
    'actioncontroller::httpauthentication::digest#decode_credentials_header()',
    'activesupport::multibyte::chars#decompose()',
    'activesupport::multibyte::unicode#decompose()',
    'activesupport::gzip::decompress()',
    'activesupport::inflector#deconstantize()',
    'string#deconstantize()',
    'activerecord::persistence#decrement()',
    'activesupport::cache::filestore#decrement()',
    'activesupport::cache::memcachestore#decrement()',
    'activesupport::cache::memorystore#decrement()',
    'activesupport::cache::nullstore#decrement()',
    'activesupport::cache::rediscachestore#decrement()',
    'activesupport::cache::store#decrement()',
    'activerecord::persistence#decrement!()',
    'activerecord::countercache::classmethods#decrement_counter()',
    'activesupport::messageencryptor#decrypt_and_verify()',
    'activesupport::messages::rotator::encryptor#decrypt_and_verify()',
    'actioncontroller::parameters#deep_dup()',
    'array#deep_dup()',
    'hash#deep_dup()',
    'object#deep_dup()',
    'hash#deep_merge()',
    'hash#deep_merge!()',
    'activesupport::hashwithindifferentaccess#deep_stringify_keys()',
    'hash#deep_stringify_keys()',
    'activesupport::hashwithindifferentaccess#deep_stringify_keys!()',
    'hash#deep_stringify_keys!()',
    'activesupport::hashwithindifferentaccess#deep_symbolize_keys()',
    'hash#deep_symbolize_keys()',
    'hash#deep_symbolize_keys!()',
    'hash#deep_transform_keys()',
    'hash#deep_transform_keys!()',
    'actionmailer::base::default()',
    'activesupport::hashwithindifferentaccess#default()',
    'rails::generators::base::default_aliases_for_option()',
    'rails::command::base::default_command_root()',
    'rails::generators::base::default_for_option()',
    'actioncontroller::formbuilder#default_form_builder()',
    'actioncontroller::formbuilder::classmethods#default_form_builder()',
    'rails::generators::base::default_generator_root()',
    'actionmailer::base#default_i18n_subject()',
    'date#default_inspect()',
    'datetime#default_inspect()',
    'rails::server#default_options()',
    'actionmailer::base::default_options=()',
    'activerecord::scoping::default::classmethods#default_scope()',
    'activerecord::connectionadapters::databasestatements#default_sequence_name()',
    'rails::generators::base::default_source_root()',
    'activerecord::type::internal::timezone#default_timezone()',
    'actiondispatch::integration::runner#default_url_options()',
    'actiondispatch::routing::mapper::base#default_url_options()',
    'actiondispatch::integration::runner#default_url_options=()',
    'actiondispatch::routing::mapper::base#default_url_options=()',
    'rails::generators::base::default_value_for_option()',
    'actiondispatch::routing::mapper::scoping#defaults()',
    'actioncable::channel::base#defer_subscription_confirmation!()',
    'actioncable::channel::base#defer_subscription_confirmation?()',
    'activerecord::dynamicmatchers::method#define()',
    'activerecord::schema::define()',
    'activerecord::attributes::classmethods#define_attribute()',
    'activemodel::attributemethods::classmethods#define_attribute_method()',
    'activemodel::attributemethods::classmethods#define_attribute_methods()',
    'activesupport::callbacks::classmethods#define_callbacks()',
    'activemodel::callbacks#define_model_callbacks()',
    'activemodel::validations::acceptancevalidator::attributedefinition#define_on()',
    'module#delegate()',
    'module#delegate_missing_to()',
    'actionview::template::types::delegate_to()',
    'actioncontroller::parameters#delete()',
    'actioncontroller::testcase::behavior#delete()',
    'actiondispatch::flash::flashhash#delete()',
    'actiondispatch::integration::requesthelpers#delete()',
    'actiondispatch::middlewarestack#delete()',
    'actiondispatch::routing::mapper::httphelpers#delete()',
    'activemodel::errors#delete()',
    'activerecord::associations::collectionproxy#delete()',
    'activerecord::connectionadapters::connectionpool::queue#delete()',
    'activerecord::connectionadapters::databasestatements#delete()',
    'activerecord::persistence#delete()',
    'activerecord::persistence::classmethods#delete()',
    'activestorage::blob#delete()',
    'activestorage::service#delete()',
    'activestorage::service::azurestorageservice#delete()',
    'activestorage::service::diskservice#delete()',
    'activestorage::service::gcsservice#delete()',
    'activestorage::service::mirrorservice#delete()',
    'activestorage::service::s3service#delete()',
    'activesupport::cache::store#delete()',
    'activesupport::hashwithindifferentaccess#delete()',
    'activesupport::inflector::inflections::uncountables#delete()',
    'rails::configuration::middlewarestackproxy#delete()',
    'activerecord::associations::collectionproxy#delete_all()',
    'activerecord::relation#delete_all()',
    'activesupport::cache::strategy::localcache::localstore#delete_entry()',
    'actiondispatch::response#delete_header()',
    'actioncontroller::parameters#delete_if()',
    'mime::mimes#delete_if()',
    'activesupport::cache::filestore#delete_matched()',
    'activesupport::cache::memorystore#delete_matched()',
    'activesupport::cache::nullstore#delete_matched()',
    'activesupport::cache::rediscachestore#delete_matched()',
    'activesupport::cache::store#delete_matched()',
    'rails::configuration::middlewarestackproxy#delete_operations()',
    'activestorage::service#delete_prefixed()',
    'activestorage::service::azurestorageservice#delete_prefixed()',
    'activestorage::service::diskservice#delete_prefixed()',
    'activestorage::service::gcsservice#delete_prefixed()',
    'activestorage::service::mirrorservice#delete_prefixed()',
    'activestorage::service::s3service#delete_prefixed()',
    'actiondispatch::session::cachestore#delete_session()',
    'actiondispatch::session::cookiestore#delete_session()',
    'actionmailer::logsubscriber#deliver()',
    'actionmailer::messagedelivery#deliver_later()',
    'actionmailer::messagedelivery#deliver_later!()',
    'actionmailer::messagedelivery#deliver_now()',
    'actionmailer::messagedelivery#deliver_now!()',
    'activesupport::inflector#demodulize()',
    'string#demodulize()',
    'actionview::digestor::node#dependency_digest()',
    'module#deprecate()',
    'activesupport::deprecation::deprecatedconstantaccessor#deprecate_constant()',
    'activesupport::deprecation::methodwrapper#deprecate_methods()',
    'activesupport::deprecation::reporting#deprecation_warning()',
    'rails::api::task#desc()',
    'rails::command::base::desc()',
    'rails::generators::base::desc()',
    'activesupport::descendantstracker::descendants()',
    'activesupport::descendantstracker#descendants()',
    'class#descendants()',
    'activerecord::inheritance::classmethods#descends_from_active_record?()',
    'activejob::core#deserialize()',
    'activejob::core::classmethods#deserialize()',
    'activemodel::type::value#deserialize()',
    'activerecord::type::json#deserialize()',
    'rails::generators::testing::behaviour::classmethods#destination()',
    'activerecord::associations::collectionproxy#destroy()',
    'activerecord::persistence#destroy()',
    'activerecord::persistence::classmethods#destroy()',
    'rails::generators::activemodel#destroy()',
    'activerecord::persistence#destroy!()',
    'activerecord::associations::collectionproxy#destroy_all()',
    'activerecord::relation#destroy_all()',
    'activerecord::persistence#destroyed?()',
    'activerecord::autosaveassociation#destroyed_by_association()',
    'activerecord::autosaveassociation#destroyed_by_association=()',
    'actioncable::connection::streameventloop#detach()',
    'activestorage::attached::many#detach()',
    'activestorage::attached::one#detach()',
    'actionview::lookupcontext::viewpaths#detail_args_for()',
    'actionview::viewpaths#details_for_lookup()',
    'actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()',
    'actionview::testcase::behavior::classmethods#determine_default_helper_class()',
    'actionmailer::testcase::behavior::classmethods#determine_default_mailer()',
    'actioncontroller::parameters#dig()',
    'activesupport::hashwithindifferentaccess#dig()',
    'actionview::digestor::digest()',
    'actionview::digestor::injected#digest()',
    'actionview::digestor::missing#digest()',
    'actionview::digestor::node#digest()',
    'actiondispatch::routing::mapper::customurls#direct()',
    'activesupport::descendantstracker::direct_descendants()',
    'activesupport::descendantstracker#direct_descendants()',
    'activesupport::multibyte::unicode::unicodedatabase::dirname()',
    'activerecord::connectionadapters::querycache::dirties_query_cache()',
    'actionview::lookupcontext::detailscache#disable_cache()',
    'activerecord::migration::disable_ddl_transaction!()',
    'activerecord::connectionadapters::abstractadapter#disable_extension()',
    'activerecord::connectionadapters::postgresqladapter#disable_extension()',
    'activerecord::connectionadapters::querycache#disable_query_cache!()',
    'activerecord::connectionadapters::querycache::connectionpoolconfiguration#disable_query_cache!()',
    'activerecord::connectionadapters::abstractadapter#disable_referential_integrity()',
    'activejob::testhelper::testqueueadapter::classmethods#disable_test_adapter()',
    'actiondispatch::flash::flashhash#discard()',
    'activerecord::connectionadapters::abstractadapter#discard!()',
    'activejob::exceptions::classmethods#discard_on()',
    'actioncable::remoteconnections::remoteconnection#disconnect()',
    'actioncable::server::base#disconnect()',
    'activerecord::connectionadapters::connectionpool#disconnect()',
    'activerecord::connectionadapters::abstractadapter#disconnect!()',
    'activerecord::connectionadapters::connectionpool#disconnect!()',
    'activerecord::connectionadapters::mysql2adapter#disconnect!()',
    'activerecord::connectionadapters::postgresqladapter#disconnect!()',
    'activerecord::connectionadapters::sqlite3adapter#disconnect!()',
    'actioncontroller::metal::dispatch()',
    'sourceannotationextractor#display()',
    'actionview::helpers::datehelper#distance_of_time_in_words()',
    'actionview::helpers::datehelper#distance_of_time_in_words_to_now()',
    'activerecord::associations::collectionproxy#distinct()',
    'activerecord::querymethods#distinct()',
    'actiondispatch::integrationtest::behavior#document_root_element()',
    'actionview::recordidentifier#dom_class()',
    'actionview::recordidentifier#dom_id()',
    'actiondispatch::http::url#domain()',
    'activesupport::dependencies::interlock#done_running()',
    'activesupport::dependencies::interlock#done_unloading()',
    'activerecord::migration#down()',
    'activesupport::multibyte::chars#downcase()',
    'activesupport::multibyte::unicode#downcase()',
    'activestorage::blob#download()',
    'activestorage::service#download()',
    'activestorage::service::azurestorageservice#download()',
    'activestorage::service::diskservice#download()',
    'activestorage::service::gcsservice#download()',
    'activestorage::service::s3service#download()',
    'activestorage::downloading#download_blob_to()',
    'activestorage::downloading#download_blob_to_tempfile()',
    'activestorage::service#download_chunk()',
    'activestorage::service::azurestorageservice#download_chunk()',
    'activestorage::service::diskservice#download_chunk()',
    'activestorage::service::gcsservice#download_chunk()',
    'activestorage::service::s3service#download_chunk()',
    'activestorage::previewer#draw()',
    'actiondispatch::systemtestcase::driven_by()',
    'activerecord::tasks::databasetasks#drop()',
    'activerecord::tasks::databasetasks#drop_all()',
    'activerecord::tasks::databasetasks#drop_current()',
    'activerecord::connectionadapters::schemastatements#drop_join_table()',
    'activerecord::connectionadapters::postgresql::schemastatements#drop_schema()',
    'activerecord::connectionadapters::abstractmysqladapter#drop_table()',
    'activerecord::connectionadapters::schemastatements#drop_table()',
    'activesupport::timewithzone#dst?()',
    'activerecord::tasks::databasetasks#dump_schema_cache()',
    'activerecord::core#dup()',
    'activesupport::hashwithindifferentaccess#dup()',
    'bigdecimal#duplicable?()',
    'complex#duplicable?()',
    'falseclass#duplicable?()',
    'method#duplicable?()',
    'nilclass#duplicable?()',
    'numeric#duplicable?()',
    'object#duplicable?()',
    'rational#duplicable?()',
    'symbol#duplicable?()',
    'trueclass#duplicable?()',
    'activesupport::notifications::event#duration()',
    'actioncontroller::parameters#each()',
    'actiondispatch::flash::flashhash#each()',
    'actiondispatch::http::headers#each()',
    'actiondispatch::middlewarestack#each()',
    'actiondispatch::response#each()',
    'actiondispatch::response::rackbody#each()',
    'activemodel::errors#each()',
    'activerecord::batches::batchenumerator#each()',
    'activerecord::fixtureset#each()',
    'activerecord::result#each()',
    'activesupport::dependencies::watchstack#each()',
    'mime::mimes#each()',
    'rails::engine::railties#each()',
    'rails::paths::path#each()',
    'actioncontroller::parameters#each_pair()',
    'activerecord::batches::batchenumerator#each_record()',
    'activesupport::autoload#eager_autoload()',
    'activerecord::querymethods#eager_load()',
    'rails::paths::root#eager_load()',
    'activesupport::autoload#eager_load!()',
    'rails::engine#eager_load!()',
    'rails::railtie::configuration#eager_load_namespaces()',
    'rails::engine::configuration#eager_load_paths()',
    'activerecord::relation#eager_loading?()',
    'rails::generators::namedbase#edit_helper()',
    'actionmailer::preview::email_exists?()',
    'actionview::helpers::formhelper#email_field()',
    'actionview::helpers::formtaghelper#email_field_tag()',
    'actionmailer::preview::emails()',
    'actionview::helpers::formbuilder#emitted_hidden_id?()',
    'actiondispatch::request::empty()',
    'actioncontroller::parameters#empty?()',
    'actiondispatch::flash::flashhash#empty?()',
    'activemodel::errors#empty?()',
    'activerecord::associations::collectionproxy#empty?()',
    'activerecord::relation#empty?()',
    'activerecord::result#empty?()',
    'activesupport::dependencies::classcache#empty?()',
    'activerecord::connectionadapters::abstractmysqladapter#empty_insert_statement_value()',
    'activerecord::connectionadapters::databasestatements#empty_insert_statement_value()',
    'activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()',
    'activerecord::connectionadapters::abstractadapter#enable_extension()',
    'activerecord::connectionadapters::postgresqladapter#enable_extension()',
    'activerecord::connectionadapters::querycache#enable_query_cache!()',
    'activerecord::connectionadapters::querycache::connectionpoolconfiguration#enable_query_cache!()',
    'activejob::testhelper::testqueueadapter::classmethods#enable_test_adapter()',
    'kernel#enable_warnings()',
    'activestorage::variation::encode()',
    'activesupport::json::encode()',
    'actionview::template#encode!()',
    'actioncontroller::httpauthentication::basic#encode_credentials()',
    'actioncontroller::httpauthentication::digest#encode_credentials()',
    'actioncontroller::httpauthentication::token#encode_credentials()',
    'actiondispatch::requestencoder::identityencoder#encode_params()',
    'activerecord::connectionadapters::schemacache#encode_with()',
    'activerecord::core#encode_with()',
    'activerecord::relation#encode_with()',
    'activesupport::orderedhash#encode_with()',
    'activesupport::safebuffer#encode_with()',
    'activerecord::connectionadapters::postgresql::schemastatements#encoding()',
    'activerecord::connectionadapters::sqlite3adapter#encoding()',
    'rails::application::configuration#encoding=()',
    'activesupport::messageencryptor#encrypt_and_sign()',
    'actiondispatch::cookies::chainedcookiejars#encrypted()',
    'rails::application#encrypted()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#end_document()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#end_element()',
    'date#end_of_day()',
    'datetime#end_of_day()',
    'time#end_of_day()',
    'datetime#end_of_hour()',
    'time#end_of_hour()',
    'datetime#end_of_minute()',
    'time#end_of_minute()',
    'dateandtime::calculations#end_of_month()',
    'dateandtime::calculations#end_of_quarter()',
    'dateandtime::calculations#end_of_week()',
    'dateandtime::calculations#end_of_year()',
    'actiondispatch::routing::routewrapper#endpoint()',
    'rails::engine::endpoint()',
    'rails::engine#endpoint()',
    'actiondispatch::routing::routewrapper#engine?()',
    'rails::command::base::engine?()',
    'activerecord::testfixtures#enlist_fixture_connections()',
    'activejob::enqueuing#enqueue()',
    'activejob::queueadapters::testadapter#enqueued_jobs()',
    'actioncable::channel::base#ensure_confirmation_sent()',
    'activerecord::enum#enum()',
    'sourceannotationextractor::enumerate()',
    'actiondispatch::http::headers#env()',
    'activerecord::tasks::databasetasks#env()',
    'rails::env()',
    'rails::env=()',
    'rails::application#env_config()',
    'rails::engine#env_config()',
    'actiondispatch::http::filterparameters#env_filter()',
    'rails::console#environment()',
    'rails::dbconsole#environment()',
    'rails::generators::actions#environment()',
    'rails::console#environment?()',
    'actiondispatch::http::uploadedfile#eof?()',
    'actionview::filesystemresolver#eql?()',
    'activemodel::name#eql?()',
    'activemodel::type::value#eql?()',
    'activerecord::connectionadapters::postgresqltypemetadata#eql?()',
    'activerecord::core#eql?()',
    'activesupport::duration#eql?()',
    'activesupport::timewithzone#eql?()',
    'mime::type#eql?()',
    'time#eql?()',
    'time#eql_with_coercion()',
    'time#eql_without_coercion()',
    'actionview::digestor::nulllogger::error()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#error()',
    'actiondispatch::testresponse#error?()',
    'actionview::helpers::activemodelinstancetag#error_message()',
    'activerecord::connectionadapters::mysql2adapter#error_number()',
    'actionview::helpers::activemodelinstancetag#error_wrapping()',
    'activemodel::validations#errors()',
    'rails::generators::activemodel#errors()',
    'activerecord::connectionadapters::postgresql::quoting#escape_bytea()',
    'actionview::helpers::javascripthelper#escape_javascript()',
    'actionview::helpers::taghelper#escape_once()',
    'activerecord::connectionadapters::connectionhandler#establish_connection()',
    'activerecord::connectionhandling#establish_connection()',
    'actioncontroller::conditionalget::classmethods#etag()',
    'actiondispatch::http::cache::response#etag=()',
    'actiondispatch::http::cache::response#etag?()',
    'actiondispatch::http::cache::request#etag_matches?()',
    'actioncable::server::base#event_loop()',
    'numeric#exabyte()',
    'numeric#exabytes()',
    'actioncontroller::parameters#except()',
    'activerecord::spawnmethods#except()',
    'hash#except()',
    'hash#except!()',
    'actionview::helpers::texthelper#excerpt()',
    'enumerable#exclude?()',
    'string#exclude?()',
    'activerecord::predicatebuilder::rangehandler::rangewithbinds#exclude_end?()',
    'activesupport::concurrency::sharelock#exclusive()',
    'activerecord::connectionadapters::databasestatements#exec_delete()',
    'activerecord::connectionadapters::mysql::databasestatements#exec_delete()',
    'activerecord::connectionadapters::postgresql::databasestatements#exec_delete()',
    'activerecord::connectionadapters::sqlite3adapter#exec_delete()',
    'activerecord::connectionadapters::databasestatements#exec_insert()',
    'activerecord::connectionadapters::postgresql::databasestatements#exec_insert()',
    'activerecord::migration#exec_migration()',
    'activerecord::relation::recordfetchwarning#exec_queries()',
    'activerecord::connectionadapters::databasestatements#exec_query()',
    'activerecord::connectionadapters::mysql::databasestatements#exec_query()',
    'activerecord::connectionadapters::postgresql::databasestatements#exec_query()',
    'activerecord::connectionadapters::sqlite3adapter#exec_query()',
    'activerecord::connectionadapters::postgresql::databasestatements#exec_rollback_db_transaction()',
    'activerecord::connectionadapters::savepoints#exec_rollback_to_savepoint()',
    'activerecord::connectionadapters::databasestatements#exec_update()',
    'activerecord::connectionadapters::mysql::databasestatements#exec_update()',
    'activerecord::connectionadapters::postgresql::databasestatements#exec_update()',
    'activerecord::connectionadapters::sqlite3adapter#exec_update()',
    'rails::command::base::executable()',
    'activerecord::connectionadapters::abstractmysqladapter#execute()',
    'activerecord::connectionadapters::databasestatements#execute()',
    'activerecord::connectionadapters::mysql::databasestatements#execute()',
    'activerecord::connectionadapters::postgresql::databasestatements#execute()',
    'activesupport::fileupdatechecker#execute()',
    'rails::application::routesreloader#execute()',
    'rails::generators::actions#execute_command()',
    'activesupport::fileupdatechecker#execute_if_updated()',
    'rails::application::routesreloader#execute_if_updated()',
    'actiondispatch::railsentitystore#exist?()',
    'activestorage::service#exist?()',
    'activestorage::service::azurestorageservice#exist?()',
    'activestorage::service::diskservice#exist?()',
    'activestorage::service::gcsservice#exist?()',
    'activestorage::service::s3service#exist?()',
    'activesupport::cache::store#exist?()',
    'rails::paths::path#existent()',
    'rails::paths::path#existent_directories()',
    'actionmailer::preview::exists?()',
    'actionview::lookupcontext::viewpaths#exists?()',
    'activerecord::findermethods#exists?()',
    'activesupport::cache::expand_cache_key()',
    'activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()',
    'rails::paths::path#expanded()',
    'actioncontroller::httpauthentication::digest#expected_response()',
    'activerecord::connectionadapters::abstractadapter#expire()',
    'abstractcontroller::caching::fragments#expire_fragment()',
    'actioncontroller::conditionalget#expires_in()',
    'actioncontroller::conditionalget#expires_now()',
    'activerecord::connectionadapters::abstractmysqladapter#explain()',
    'activerecord::connectionadapters::postgresql::databasestatements#explain()',
    'activerecord::connectionadapters::sqlite3adapter#explain()',
    'activerecord::relation#explain()',
    'activesupport::perthreadregistry::extended()',
    'activerecord::querymethods#extending()',
    'activestorage::filename#extension()',
    'activerecord::connectionadapters::postgresqladapter#extension_enabled?()',
    'activestorage::filename#extension_with_delimiter()',
    'activestorage::filename#extension_without_delimiter()',
    'activerecord::connectionadapters::abstractadapter#extensions()',
    'activerecord::connectionadapters::postgresqladapter#extensions()',
    'rails::generators::actions#extify()',
    'actioncontroller::parameters#extract!()',
    'hash#extract!()',
    'sourceannotationextractor#extract_annotations_from()',
    'actiondispatch::http::url::extract_domain()',
    'rails::generators::base#extract_last_module()',
    'array#extract_options!()',
    'actiondispatch::session::stalesessioncheck#extract_session_id()',
    'actiondispatch::http::url::extract_subdomain()',
    'actiondispatch::http::url::extract_subdomains()',
    'activesupport::hashwithindifferentaccess#extractable_options?()',
    'activesupport::orderedhash#extractable_options?()',
    'hash#extractable_options?()',
    'rails::generators::fallbacks()',
    'actionview::helpers::assettaghelper#favicon_link_tag()',
    'actioncontroller::parameters#fetch()',
    'actiondispatch::http::headers#fetch()',
    'activesupport::cache::store#fetch()',
    'activesupport::hashwithindifferentaccess#fetch()',
    'mime::fetch()',
    'activesupport::cache::store#fetch_multi()',
    'activesupport::hashwithindifferentaccess#fetch_values()',
    'actionview::helpers::formtaghelper#field_set_tag()',
    'actionview::helpers::formbuilder#fields()',
    'actionview::helpers::formhelper#fields()',
    'actionview::helpers::formbuilder#fields_for()',
    'actionview::helpers::formhelper#fields_for()',
    'actioncontroller::parameters#fields_for_style?()',
    'activerecord::associations::collectionproxy#fifth()',
    'activerecord::findermethods#fifth()',
    'array#fifth()',
    'activerecord::findermethods#fifth!()',
    'actionview::helpers::formbuilder#file_field()',
    'actionview::helpers::formhelper#file_field()',
    'actionview::helpers::formtaghelper#file_field_tag()',
    'activesupport::testing::filefixtures#file_fixture()',
    'rails::command::file_lookup_paths()',
    'rails::generators::file_lookup_paths()',
    'rails::generators::namedbase#file_path()',
    'activestorage::blob#filename()',
    'activesupport::multibyte::unicode::unicodedatabase::filename()',
    'actiondispatch::http::parameterfilter#filter()',
    'activesupport::backtracecleaner#filter()',
    'rails::console::backtracecleaner#filter_backtrace()',
    'actiondispatch::remoteip::getip#filter_proxies()',
    'actiondispatch::http::filterparameters#filtered_env()',
    'actiondispatch::http::filterparameters#filtered_parameters()',
    'actiondispatch::http::filterparameters#filtered_path()',
    'actiondispatch::http::filterparameters#filtered_query_string()',
    'activerecord::connectionadapters::transactionstate#finalized?()',
    'actionmailer::preview::find()',
    'actionview::lookupcontext::viewpaths#find()',
    'activerecord::associations::collectionproxy#find()',
    'activerecord::findermethods#find()',
    'rails::engine::find()',
    'rails::generators::activemodel::find()',
    'sourceannotationextractor#find()',
    'actionview::lookupcontext::viewpaths#find_all()',
    'actionview::resolver#find_all()',
    'actionview::resolver#find_all_anywhere()',
    'date::find_beginning_of_week!()',
    'activerecord::findermethods#find_by()',
    'activerecord::findermethods#find_by!()',
    'activerecord::querying#find_by_sql()',
    'rails::dbconsole#find_cmd_and_exec()',
    'activerecord::batches#find_each()',
    'actionview::lookupcontext::viewpaths#find_file()',
    'sourceannotationextractor#find_in()',
    'activerecord::batches#find_in_batches()',
    'activerecord::relation#find_or_create_by()',
    'activerecord::relation#find_or_create_by!()',
    'activerecord::relation#find_or_initialize_by()',
    'rails::application::find_root()',
    'rails::engine::find_root()',
    'actiondispatch::session::cachestore#find_session()',
    'activestorage::blob::find_signed()',
    'actionview::lookupcontext::viewpaths#find_template()',
    'activesupport::timezone::find_tzinfo()',
    'time::find_zone()',
    'time::find_zone!()',
    'activerecord::dynamicmatchers::findby#finder()',
    'activerecord::dynamicmatchers::findbybang#finder()',
    'activesupport::logsubscriber#finish()',
    'activesupport::notifications::fanout#finish()',
    'activesupport::notifications::instrumenter#finish()',
    'activesupport::subscriber#finish()',
    'activesupport::notifications::instrumenter#finish_with_state()',
    'activerecord::associations::collectionproxy#first()',
    'activerecord::findermethods#first()',
    'activerecord::result#first()',
    'rails::paths::path#first()',
    'string#first()',
    'activerecord::findermethods#first!()',
    'actionview::partialiteration#first?()',
    'activesupport::securityutils::fixed_length_secure_compare()',
    'rails::generators::namedbase#fixture_file_name()',
    'actiondispatch::testprocess::fixturefile#fixture_file_upload()',
    'activerecord::fixtureset::fixture_is_cached?()',
    'activerecord::testfixtures::classmethods#fixtures()',
    'activerecord::tasks::databasetasks#fixtures_path()',
    'actiondispatch::flash::requestmethods#flash()',
    'actiondispatch::testprocess#flash()',
    'actiondispatch::flash::requestmethods#flash=()',
    'activerecord::connectionadapters::connectionpool#flush()',
    'activesupport::logsubscriber::testhelper::mocklogger#flush()',
    'activesupport::taggedlogging#flush()',
    'activerecord::connectionadapters::connectionpool#flush!()',
    'activesupport::logsubscriber::flush_all!()',
    'activerecord::connectionadapters::connectionhandler#flush_idle_connections!()',
    'actiondispatch::integration::requesthelpers#follow_redirect!()',
    'actionview::helpers::asseturlhelper#font_path()',
    'actionview::helpers::asseturlhelper#font_url()',
    'actioncontroller::renderer::for()',
    'actioncontroller::forcessl::classmethods#force_ssl()',
    'actioncontroller::forcessl#force_ssl_redirect()',
    'activesupport::inflector#foreign_key()',
    'string#foreign_key()',
    'activerecord::connectionadapters::schemastatements#foreign_key_exists?()',
    'activerecord::connectionadapters::abstractmysqladapter#foreign_keys()',
    'activerecord::connectionadapters::postgresql::schemastatements#foreign_keys()',
    'activerecord::connectionadapters::sqlite3adapter#foreign_keys()',
    'activerecord::connectionadapters::schemastatements#foreign_keys()',
    'activerecord::connectionadapters::postgresql::schemastatements#foreign_table_exists?()',
    'activerecord::connectionadapters::postgresql::schemastatements#foreign_tables()',
    'activesupport::testing::isolation::forking_env?()',
    'actioncontroller::requestforgeryprotection#form_authenticity_param()',
    'actiondispatch::request#form_data?()',
    'actionview::helpers::formhelper#form_for()',
    'actionview::helpers::formtaghelper#form_tag()',
    'actionview::helpers::formhelper#form_with()',
    'actiondispatch::http::mimenegotiation#format()',
    'actiondispatch::http::mimenegotiation#format=()',
    'actiondispatch::http::mimenegotiation#format_from_path_extension()',
    'actionmailer::mailhelper#format_paragraph()',
    'abstractcontroller::base#formats()',
    'actiondispatch::http::mimenegotiation#formats()',
    'actiondispatch::http::mimenegotiation#formats=()',
    'activesupport::timewithzone#formatted_offset()',
    'activesupport::timezone#formatted_offset()',
    'datetime#formatted_offset()',
    'time#formatted_offset()',
    'numeric#fortnight()',
    'numeric#fortnights()',
    'activerecord::associations::collectionproxy#forty_two()',
    'activerecord::findermethods#forty_two()',
    'array#forty_two()',
    'activerecord::findermethods#forty_two!()',
    'activerecord::associations::collectionproxy#fourth()',
    'activerecord::findermethods#fourth()',
    'array#fourth()',
    'activerecord::findermethods#fourth!()',
    'abstractcontroller::caching::fragments#fragment_cache_key()',
    'abstractcontroller::caching::fragments::classmethods#fragment_cache_key()',
    'abstractcontroller::caching::fragments#fragment_exist?()',
    'actiondispatch::exceptionwrapper#framework_trace()',
    'activerecord::core#freeze()',
    'activesupport::timewithzone#freeze()',
    'activesupport::testing::timehelpers#freeze_time()',
    'actiondispatch::http::cache::request#fresh?()',
    'actioncontroller::conditionalget#fresh_when()',
    'activerecord::querymethods#from()',
    'array#from()',
    'string#from()',
    'actiondispatch::http::headers::from_hash()',
    'activemodel::serializers::json#from_json()',
    'activesupport::duration#from_now()',
    'actionview::logsubscriber#from_rails_root()',
    'actiondispatch::testresponse::from_response()',
    'hash::from_trusted_xml()',
    'hash::from_xml()',
    'activerecord::core#frozen?()',
    'activemodel::errors#full_message()',
    'activemodel::errors#full_messages()',
    'activemodel::errors#full_messages_for()',
    'activerecord::connectionadapters::savepointtransaction#full_rollback?()',
    'actiondispatch::exceptionwrapper#full_trace()',
    'actiondispatch::http::url::full_url_for()',
    'actiondispatch::request#fullpath()',
    'activerecord::connectionadapters::transactionstate#fully_completed?()',
    'activesupport::timewithzone#future?()',
    'dateandtime::calculations#future?()',
    'rails::generators::actions#gem()',
    'rails::generators::actions#gem_group()',
    'actioncable::gem_version()',
    'actionmailer::gem_version()',
    'actionview::gem_version()',
    'activejob::gem_version()',
    'activemodel::gem_version()',
    'activerecord::gem_version()',
    'activestorage::gem_version()',
    'activesupport::gem_version()',
    'rails::gem_version()',
    'rails::appbuilder#gemfile()',
    'rails::pluginbuilder#gemfile()',
    'rails::pluginbuilder#gemfile_entry()',
    'rails::pluginbuilder#gemspec()',
    'activesupport::messageverifier#generate()',
    'rails::generators::actions#generate()',
    'activesupport::cachingkeygenerator#generate_key()',
    'activesupport::encryptedfile::generate_key()',
    'activesupport::keygenerator#generate_key()',
    'activemodel::errors#generate_message()',
    'abstractcontroller::collector::generate_method_for_mime()',
    'actiondispatch::session::compatibility#generate_sid()',
    'rails::pluginbuilder#generate_test_dummy()',
    'activerecord::securetoken::classmethods#generate_unique_secure_token()',
    'actioncontroller::testcase::behavior#generated_path()',
    'rails::engine::updater::generator()',
    'rails::generators::testing::behaviour#generator()',
    'rails::generators::base::generator_name()',
    'rails::application#generators()',
    'rails::engine::configuration#generators()',
    'rails::railtie::generators()',
    'actioncontroller::testcase::behavior#get()',
    'actiondispatch::integration::requesthelpers#get()',
    'actiondispatch::routing::mapper::httphelpers#get()',
    'activesupport::dependencies::classcache#get()',
    'actiondispatch::response#get_header()',
    'activesupport::timewithzone#getgm()',
    'datetime#getgm()',
    'activesupport::timewithzone#getlocal()',
    'datetime#getlocal()',
    'activesupport::timewithzone#getutc()',
    'datetime#getutc()',
    'numeric#gigabyte()',
    'numeric#gigabytes()',
    'rails::generators::actions#git()',
    'rails::generators::appbase::gemfileentry::github()',
    'rails::appbuilder#gitignore()',
    'rails::pluginbuilder#gitignore()',
    'activesupport::timewithzone#gmt?()',
    'activesupport::timewithzone#gmt_offset()',
    'activesupport::timewithzone#gmtime()',
    'datetime#gmtime()',
    'activesupport::timewithzone#gmtoff()',
    'activesupport::multibyte::chars#grapheme_length()',
    'activerecord::querymethods#group()',
    'actionview::helpers::formbuilder#grouped_collection_select()',
    'actionview::helpers::formoptionshelper#grouped_collection_select()',
    'actionview::helpers::formoptionshelper#grouped_options_for_select()',
    'rails::groups()',
    'erb::util::h()',
    'actioncontroller::httpauthentication::digest#ha1()',
    'actioncontroller::logsubscriber#halted_callback()',
    'actioncontroller::requestforgeryprotection#handle_unverified_request()',
    'actioncontroller::requestforgeryprotection::protectionmethods::exception#handle_unverified_request()',
    'actioncontroller::requestforgeryprotection::protectionmethods::nullsession#handle_unverified_request()',
    'actioncontroller::requestforgeryprotection::protectionmethods::resetsession#handle_unverified_request()',
    'actionview::template::handlers::erb#handles_encoding?()',
    'activerecord::associations::classmethods#has_and_belongs_to_many()',
    'activerecord::attributemethods#has_attribute?()',
    'activerecord::attributemethods::classmethods#has_attribute?()',
    'actioncontroller::httpauthentication::basic#has_basic_credentials?()',
    'activerecord::attributemethods::dirty#has_changes_to_save?()',
    'actiondispatch::response#has_header?()',
    'actioncontroller::parameters#has_key?()',
    'activemodel::errors#has_key?()',
    'activesupport::hashwithindifferentaccess#has_key?()',
    'activerecord::associations::classmethods#has_many()',
    'activestorage::attached::macros#has_many_attached()',
    'actiondispatch::routing::mapper::base#has_named_route?()',
    'activerecord::associations::classmethods#has_one()',
    'activestorage::attached::macros#has_one_attached()',
    'activemodel::securepassword::classmethods#has_secure_password()',
    'activerecord::securetoken::classmethods#has_secure_token()',
    'actioncontroller::parameters#has_value?()',
    'activemodel::type::value#hash()',
    'activerecord::connectionadapters::postgresqltypemetadata#hash()',
    'activerecord::core#hash()',
    'activesupport::duration#hash()',
    'activesupport::timewithzone#hash()',
    'activerecord::querymethods#having()',
    'actioncontroller::head#head()',
    'actioncontroller::testcase::behavior#head()',
    'actiondispatch::integration::requesthelpers#head()',
    'actiondispatch::routing::consoleformatter#header()',
    'actiondispatch::routing::htmltableformatter#header()',
    'actiondispatch::request#headers()',
    'actionmailer::base#headers()',
    'activestorage::service#headers_for_direct_upload()',
    'activestorage::service::azurestorageservice#headers_for_direct_upload()',
    'activestorage::service::diskservice#headers_for_direct_upload()',
    'activestorage::service::gcsservice#headers_for_direct_upload()',
    'activestorage::service::s3service#headers_for_direct_upload()',
    'rails::command::base#help()',
    'rails::generators::help()',
    'abstractcontroller::helpers::classmethods#helper()',
    'rails::consolemethods#helper()',
    'actioncontroller::helpers::classmethods#helper_attr()',
    'actionview::testcase::behavior::classmethods#helper_class()',
    'abstractcontroller::helpers::classmethods#helper_method()',
    'actionview::testcase::behavior::classmethods#helper_method()',
    'actioncontroller::helpers#helpers()',
    'actioncontroller::helpers::classmethods#helpers()',
    'rails::engine#helpers()',
    'rails::engine#helpers_paths()',
    'activerecord::connectionadapters::postgresql::oid::bit::data#hex?()',
    'actionview::helpers::formbuilder#hidden_field()',
    'actionview::helpers::formhelper#hidden_field()',
    'actionview::helpers::formtaghelper#hidden_field_tag()',
    'rails::generators::hidden_namespaces()',
    'rails::generators::base::hide!()',
    'rails::command::base::hide_command!()',
    'rails::generators::hide_namespace()',
    'rails::generators::hide_namespaces()',
    'actionview::helpers::texthelper#highlight()',
    'rails::generators::base::hook_for()',
    'actiondispatch::http::url#host()',
    'actiondispatch::integration::session#host()',
    'actiondispatch::testrequest#host=()',
    'actiondispatch::http::url#host_with_port()',
    'numeric#hour()',
    'numeric#hours()',
    'activerecord::connectionadapters::postgresql::columnmethods#hstore()',
    'mime::alltype#html?()',
    'mime::type#html?()',
    'actiondispatch::assertions#html_document()',
    'erb::util::html_escape()',
    'erb::util::html_escape_once()',
    'string#html_safe()',
    'activesupport::safebuffer#html_safe?()',
    'numeric#html_safe?()',
    'object#html_safe?()',
    'actiondispatch::request#http_auth_salt()',
    'actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()',
    'actioncontroller::conditionalget#http_cache_forever()',
    'activesupport::timewithzone#httpdate()',
    'actiondispatch::integration::session#https!()',
    'actiondispatch::integration::session#https?()',
    'activemodel::name#human()',
    'activesupport::inflector::inflections#human()',
    'activemodel::translation#human_attribute_name()',
    'rails::generators::namedbase#human_name()',
    'activesupport::inflector#humanize()',
    'string#humanize()',
    'activemodel::translation#i18n_scope()',
    'rails::generators::namedbase#i18n_scope()',
    'activerecord::attributemethods::primarykey#id()',
    'activerecord::attributemethods::primarykey#id=()',
    'activerecord::attributemethods::primarykey#id?()',
    'activerecord::attributemethods::primarykey#id_before_type_cast()',
    'activerecord::attributemethods::primarykey#id_in_database()',
    'activerecord::attributemethods::primarykey#id_was()',
    'activestorage::blob::identifiable#identified?()',
    'actioncable::connection::identification#identified_by()',
    'activerecord::fixtureset::identify()',
    'activestorage::blob::identifiable#identify()',
    'activerecord::calculations#ids()',
    'actiondispatch::http::cache::request#if_modified_since()',
    'actiondispatch::testrequest#if_modified_since=()',
    'actiondispatch::http::cache::request#if_none_match()',
    'actiondispatch::testrequest#if_none_match=()',
    'actiondispatch::http::cache::request#if_none_match_etags()',
    'activerecord::modelschema::classmethods#ignored_columns()',
    'activerecord::modelschema::classmethods#ignored_columns=()',
    'activestorage::preview#image()',
    'activestorage::variant#image()',
    'activestorage::blob#image?()',
    'actionview::helpers::assettaghelper#image_alt()',
    'actionview::helpers::asseturlhelper#image_path()',
    'actionview::helpers::formtaghelper#image_submit_tag()',
    'actionview::helpers::assettaghelper#image_tag()',
    'actionview::helpers::asseturlhelper#image_url()',
    'activesupport::timewithzone#in()',
    'date#in()',
    'datetime#in()',
    'time#in()',
    'object#in?()',
    'activerecord::batches#in_batches()',
    'activesupport::multibyte::unicode#in_char_class?()',
    'activerecord::connectionadapters::databaselimits#in_clause_length()',
    'array#in_groups()',
    'array#in_groups_of()',
    'numeric#in_milliseconds()',
    'activesupport::timewithzone#in_time_zone()',
    'dateandtime::zones#in_time_zone()',
    'string#in_time_zone()',
    'actioncontroller::parameters#include?()',
    'actiondispatch::http::headers#include?()',
    'activemodel::errors#include?()',
    'activerecord::associations::collectionproxy#include?()',
    'activesupport::hashwithindifferentaccess#include?()',
    'activesupport::concern#included()',
    'activesupport::deprecation::deprecatedconstantaccessor::included()',
    'activerecord::querymethods#includes()',
    'activerecord::persistence#increment()',
    'activesupport::cache::filestore#increment()',
    'activesupport::cache::memcachestore#increment()',
    'activesupport::cache::memorystore#increment()',
    'activesupport::cache::nullstore#increment()',
    'activesupport::cache::rediscachestore#increment()',
    'activesupport::cache::store#increment()',
    'activerecord::persistence#increment!()',
    'activerecord::countercache::classmethods#increment_counter()',
    'rails::generators::base#indent()',
    'string#indent()',
    'string#indent!()',
    'activerecord::connectionadapters::table#index()',
    'activerecord::connectionadapters::tabledefinition#index()',
    'activerecord::connectionadapters::abstractadapter#index_algorithms()',
    'activerecord::connectionadapters::abstractmysqladapter#index_algorithms()',
    'activerecord::connectionadapters::postgresqladapter#index_algorithms()',
    'enumerable#index_by()',
    'activerecord::connectionadapters::schemastatements#index_exists?()',
    'activerecord::connectionadapters::table#index_exists?()',
    'rails::generators::namedbase#index_helper()',
    'activerecord::connectionadapters::postgresql::schemastatements#index_name_exists?()',
    'activerecord::connectionadapters::schemastatements#index_name_exists?()',
    'activerecord::connectionadapters::databaselimits#index_name_length()',
    'activerecord::connectionadapters::postgresqladapter#index_name_length()',
    'activerecord::connectionadapters::schemastatements#indexes()',
    'activerecord::connectionadapters::databaselimits#indexes_per_table()',
    'activerecord::connectionadapters::postgresql::columnmethods#inet()',
    'activesupport::inflector#inflections()',
    'activesupport::inheritableoptions#inheritable_copy()',
    'activerecord::modelschema::classmethods#inheritance_column()',
    'activerecord::modelschema::classmethods#inheritance_column=()',
    'abstractcontroller::helpers::classmethods#inherited()',
    'actioncontroller::paramswrapper::classmethods#inherited()',
    'actioncontroller::railties::helpers#inherited()',
    'actioncontroller::rendering::classmethods#inherited()',
    'activerecord::inheritance::classmethods#inherited()',
    'activesupport::descendantstracker#inherited()',
    'rails::application::inherited()',
    'rails::engine::inherited()',
    'rails::railtie::inherited()',
    'rails::railtie::configurable::classmethods#inherited()',
    'activerecord::connectionadapters::schemacache#init_with()',
    'activerecord::core#init_with()',
    'actiondispatch::contentsecuritypolicy#initialize_copy()',
    'actiondispatch::flash::flashhash#initialize_copy()',
    'actiondispatch::middlewarestack#initialize_copy()',
    'activerecord::relation#initialize_copy()',
    'activerecord::result#initialize_copy()',
    'activesupport::safebuffer#initialize_copy()',
    'activerecord::connectionadapters::schemacache#initialize_dup()',
    'activerecord::inheritance#initialize_dup()',
    'activerecord::modelschema::classmethods#initialize_load_schema_monitor()',
    'actiondispatch::session::compatibility#initialize_sid()',
    'rails::application#initialized?()',
    'rails::application#initializer()',
    'rails::generators::actions#initializer()',
    'rails::initializable::classmethods#initializer()',
    'rails::initializable#initializers()',
    'rails::initializable::classmethods#initializers()',
    'rails::initializable::classmethods#initializers_chain()',
    'rails::initializable::classmethods#initializers_for()',
    'actionmailer::base::lateattachmentsproxy#inline()',
    'array#inquiry()',
    'string#inquiry()',
    'actiondispatch::middlewarestack#insert()',
    'activerecord::connectionadapters::databasestatements#insert()',
    'rails::configuration::middlewarestackproxy#insert()',
    'actiondispatch::middlewarestack#insert_after()',
    'rails::configuration::middlewarestackproxy#insert_after()',
    'actiondispatch::middlewarestack#insert_before()',
    'rails::configuration::middlewarestackproxy#insert_before()',
    'activerecord::connectionadapters::databasestatements#insert_fixture()',
    'activerecord::connectionadapters::databasestatements#insert_fixtures()',
    'activerecord::connectionadapters::sqlite3adapter#insert_fixtures()',
    'activerecord::connectionadapters::abstractmysqladapter#insert_fixtures_set()',
    'activerecord::connectionadapters::databasestatements#insert_fixtures_set()',
    'activerecord::connectionadapters::sqlite3adapter#insert_fixtures_set()',
    'rails::generators::namedbase#inside_template()',
    'rails::generators::namedbase#inside_template?()',
    'actioncontroller::parameters#inspect()',
    'actiondispatch::middlewarestack::middleware#inspect()',
    'actiondispatch::routing::pathredirect#inspect()',
    'actionview::template#inspect()',
    'activerecord::core#inspect()',
    'activerecord::relation#inspect()',
    'activesupport::cache::rediscachestore#inspect()',
    'activesupport::timewithzone#inspect()',
    'date#inspect()',
    'datetime#inspect()',
    'rails::info::inspect()',
    'activerecord::querycache::install_executor_hooks()',
    'activesupport::currentattributes::instance()',
    'activesupport::inflector::inflections::instance()',
    'activesupport::perthreadregistry#instance()',
    'rails::application::instance()',
    'rails::railtie::instance()',
    'rails::railtie::configurable::classmethods#instance()',
    'activerecord::attributemethods::classmethods#instance_method_already_implemented?()',
    'activerecord::attributemethods::primarykey::classmethods#instance_method_already_implemented?()',
    'object#instance_values()',
    'object#instance_variable_names()',
    'activerecord::persistence::classmethods#instantiate()',
    'activerecord::fixtureset::instantiate_all_loaded_fixtures()',
    'activerecord::fixtureset::instantiate_fixtures()',
    'actionview::template#instrument()',
    'activesupport::notifications::instrument()',
    'activesupport::notifications::instrumenter#instrument()',
    'activesupport::notifications::instrumenter()',
    'activerecord::connectionadapters::postgresql::columnmethods#int4range()',
    'activerecord::connectionadapters::postgresql::columnmethods#int8range()',
    'actiondispatch::integration::runner#integration_session()',
    'actiondispatch::routing::routewrapper#internal?()',
    'activerecord::modelschema::internal_metadata_table_name()',
    'activerecord::modelschema::internal_metadata_table_name=()',
    'abstractcontroller::base::internal_methods()',
    'activerecord::connectionadapters::postgresql::columnmethods#interval()',
    'activemodel::validations#invalid?()',
    'activerecord::migration::commandrecorder#inverse_of()',
    'rails::command::invoke()',
    'rails::generators::invoke()',
    'actioncable::subscriptionadapter::async::asyncsubscribermap#invoke_callback()',
    'actioncable::subscriptionadapter::postgresql::listener#invoke_callback()',
    'actioncable::subscriptionadapter::redis::listener#invoke_callback()',
    'actioncable::subscriptionadapter::subscribermap#invoke_callback()',
    'actiondispatch::request#ip()',
    'actiondispatch::remoteip::getip#ips_from()',
    'activesupport::inflector::inflections#irregular()',
    'activesupport::timewithzone#is_a?()',
    'loaderror#is_missing?()',
    'activerecord::type::internal::timezone#is_utc?()',
    'string#is_utf8?()',
    'activesupport::timewithzone#isdst()',
    'activesupport::duration#iso8601()',
    'activesupport::timewithzone#iso8601()',
    'activesupport::timezone#iso8601()',
    'rails::application#isolate_namespace()',
    'rails::engine::isolate_namespace()',
    'actionview::helpers::javascripthelper#j()',
    'actionview::helpers::assettaghelper#javascript_include_tag()',
    'actionview::helpers::asseturlhelper#javascript_path()',
    'actionview::helpers::javascripthelper#javascript_tag()',
    'actionview::helpers::asseturlhelper#javascript_url()',
    'rails::pluginbuilder#javascripts()',
    'activejob::enqueuing::classmethods#job_or_instantiate()',
    'activerecord::relation#joined_includes_values()',
    'activerecord::querymethods#joins()',
    'activerecord::connectionadapters::databaselimits#joins_per_query()',
    'rails::generators::namedbase#js_template()',
    'erb::util::json_escape()',
    'activerecord::connectionadapters::postgresql::columnmethods#jsonb()',
    'actiondispatch::flash::flashhash#keep()',
    'actioncontroller::parameters#keep_if()',
    'activestorage::blob#key()',
    'activestorage::variant#key()',
    'activestorage::variation#key()',
    'activesupport::encryptedfile#key()',
    'actioncontroller::parameters#key?()',
    'actiondispatch::flash::flashhash#key?()',
    'actiondispatch::http::headers#key?()',
    'actiondispatch::request#key?()',
    'activemodel::errors#key?()',
    'activesupport::dependencies::classcache#key?()',
    'activesupport::hashwithindifferentaccess#key?()',
    'rails::application#key_generator()',
    'activesupport::messageencryptor::key_len()',
    'activesupport::cache::store#key_matcher()',
    'actioncontroller::parameters#keys()',
    'actiondispatch::flash::flashhash#keys()',
    'activemodel::errors#keys()',
    'rails::paths::root#keys()',
    'numeric#kilobyte()',
    'numeric#kilobytes()',
    'activemodel::validator::kind()',
    'activemodel::validator#kind()',
    'activesupport::timewithzone#kind_of?()',
    'activerecord::reflection::macroreflection#klass()',
    'abstractcontroller::translation#l()',
    'actionview::helpers::translationhelper#l()',
    'actionview::helpers::formbuilder#label()',
    'actionview::helpers::formhelper#label()',
    'actionview::helpers::formtaghelper#label_tag()',
    'actiondispatch::middlewarestack#last()',
    'activerecord::associations::collectionproxy#last()',
    'activerecord::findermethods#last()',
    'activerecord::result#last()',
    'rails::paths::path#last()',
    'string#last()',
    'activerecord::findermethods#last!()',
    'actionview::partialiteration#last?()',
    'activerecord::connectionadapters::sqlite3adapter#last_inserted_id()',
    'actiondispatch::http::cache::response#last_modified()',
    'actiondispatch::http::cache::response#last_modified=()',
    'actiondispatch::http::cache::response#last_modified?()',
    'dateandtime::calculations#last_month()',
    'dateandtime::calculations#last_quarter()',
    'dateandtime::calculations#last_week()',
    'dateandtime::calculations#last_weekday()',
    'dateandtime::calculations#last_year()',
    'actionview::layouts::classmethods#layout()',
    'activerecord::connectionadapters::abstractadapter#lease()',
    'activerecord::querymethods#left_joins()',
    'activerecord::querymethods#left_outer_joins()',
    'activerecord::associations::collectionproxy#length()',
    'activerecord::result#length()',
    'rails::appbuilder#lib()',
    'rails::generators::actions#lib()',
    'rails::pluginbuilder#lib()',
    'rails::pluginbuilder#license()',
    'activerecord::querymethods#limit()',
    'activesupport::multibyte::chars#limit()',
    'activerecord::connectionadapters::postgresql::columnmethods#line()',
    'actionview::helpers::urlhelper#link_to()',
    'actionview::helpers::urlhelper#link_to_if()',
    'actionview::helpers::urlhelper#link_to_unless()',
    'actionview::helpers::urlhelper#link_to_unless_current()',
    'actioncable::subscriptionadapter::postgresql::listener#listen()',
    'actioncable::subscriptionadapter::redis::listener#listen()',
    'activesupport::notifications::fanout#listeners_for()',
    'activesupport::notifications::fanout#listening?()',
    'activerecord::relation#load()',
    'activesupport::multibyte::unicode::unicodedatabase#load()',
    'rails::engine#load_config_initializer()',
    'rails::engine#load_console()',
    'rails::application::configuration#load_defaults()',
    'rails::command::actions#load_generators()',
    'rails::engine#load_generators()',
    'activesupport::dependencies::load_interlock()',
    'rails::paths::root#load_paths()',
    'activerecord::relation#load_records()',
    'rails::engine#load_runner()',
    'activerecord::tasks::databasetasks#load_schema_current()',
    'activerecord::migration::load_schema_if_pending!()',
    'activerecord::tasks::databasetasks#load_seed()',
    'rails::engine#load_seed()',
    'actiondispatch::session::cookiestore#load_session()',
    'actiondispatch::session::stalesessioncheck#load_session()',
    'activerecord::associations::collectionproxy#load_target()',
    'rails::command::actions#load_tasks()',
    'rails::engine#load_tasks()',
    'activerecord::associations::collectionproxy#loaded?()',
    'activesupport::dependencies::interlock#loading()',
    'activesupport::timezone#local()',
    'actiondispatch::request#local?()',
    'actionview::template#local_assigns()',
    'activesupport::timezone#local_to_utc()',
    'abstractcontroller::translation#localize()',
    'actionview::helpers::translationhelper#localize()',
    'actionview::testcase::behavior::renderedviewscollection#locals_for()',
    'activesupport::timewithzone#localtime()',
    'datetime#localtime()',
    'activerecord::querymethods#lock()',
    'activerecord::locking::pessimistic#lock!()',
    'activerecord::connectionadapters::connectionpool#lock_thread=()',
    'activerecord::locking::optimistic::classmethods#locking_column()',
    'activerecord::locking::optimistic::classmethods#locking_column=()',
    'activerecord::locking::optimistic::classmethods#locking_enabled?()',
    'actioncable::connection::taggedloggerproxy#log()',
    'activerecord::connectionadapters::abstractadapter#log()',
    'rails::appbuilder#log()',
    'rails::generators::actions#log()',
    'actioncontroller::live#log_error()',
    'activesupport::logsubscriber::log_subscribers()',
    'activesupport::logsubscriber::testhelper::mocklogger#logged()',
    'actioncable::server::base::logger()',
    'actioncontroller::logsubscriber#logger()',
    'actiondispatch::request#logger()',
    'actionmailer::logsubscriber#logger()',
    'actionview::digestor::logger()',
    'actionview::logsubscriber#logger()',
    'activestorage::analyzer#logger()',
    'activestorage::logsubscriber#logger()',
    'activestorage::previewer#logger()',
    'activesupport::logsubscriber::logger()',
    'activesupport::logsubscriber#logger()',
    'activesupport::logger::logger_outputs_to?()',
    'activerecord::connectionadapters::mysql::columnmethods#longblob()',
    'activerecord::connectionadapters::mysql::columnmethods#longtext()',
    'activejob::queueadapters::lookup()',
    'mime::type::lookup()',
    'activemodel::translation#lookup_ancestors()',
    'mime::type::lookup_by_extension()',
    'actionview::viewpaths#lookup_context()',
    'rails::command::lookup_paths()',
    'rails::generators::lookup_paths()',
    'activesupport::cache::lookup_store()',
    'activerecord::connectionadapters::postgresql::columnmethods#lseg()',
    'activerecord::connectionadapters::postgresql::columnmethods#ltree()',
    'activerecord::connectionadapters::postgresql::columnmethods#macaddr()',
    'actionmailer::base#mail()',
    'actionview::helpers::urlhelper#mail_to()',
    'actionmailer::mailhelper#mailer()',
    'actionmailer::testcase::behavior::classmethods#mailer_class()',
    'actionmailer::base::mailer_name()',
    'actionmailer::base#mailer_name()',
    'actioncontroller::base::make_response!()',
    'actioncontroller::live::classmethods#make_response!()',
    'actioncontroller::metal::make_response!()',
    'activerecord::associations::collectionproxy#many?()',
    'activerecord::relation#many?()',
    'enumerable#many?()',
    'activerecord::autosaveassociation#mark_for_destruction()',
    'actioncontroller::requestforgeryprotection#mark_for_same_origin_verification!()',
    'activerecord::autosaveassociation#marked_for_destruction?()',
    'actioncontroller::requestforgeryprotection#marked_for_same_origin_verification?()',
    'activerecord::connectionadapters::schemacache#marshal_dump()',
    'activesupport::timewithzone#marshal_dump()',
    'activerecord::connectionadapters::schemacache#marshal_load()',
    'activesupport::timewithzone#marshal_load()',
    'actioncontroller::requestforgeryprotection#masked_authenticity_token()',
    'rails::appbuilder#master_key()',
    'actiondispatch::routing::mapper::base#match()',
    'actiondispatch::routing::mapper::resources#match()',
    'activerecord::dynamicmatchers::method::match()',
    'actiondispatch::filehandler#match?()',
    'activemodel::validations::acceptancevalidator::attributedefinition#matches?()',
    'module#mattr_accessor()',
    'module#mattr_reader()',
    'module#mattr_writer()',
    'activerecord::connectionadapters::postgresqladapter#max_identifier_length()',
    'activerecord::calculations#maximum()',
    'string#mb_chars()',
    'actiondispatch::request#media_type()',
    'activerecord::connectionadapters::mysql::columnmethods#mediumblob()',
    'activerecord::connectionadapters::mysql::columnmethods#mediumtext()',
    'numeric#megabyte()',
    'numeric#megabytes()',
    'actiondispatch::routing::mapper::resources#member()',
    'activesupport::hashwithindifferentaccess#member?()',
    'actioncontroller::parameters#merge()',
    'actiondispatch::http::headers#merge()',
    'activerecord::spawnmethods#merge()',
    'activesupport::hashwithindifferentaccess#merge()',
    'actioncontroller::parameters#merge!()',
    'actiondispatch::http::headers#merge!()',
    'activemodel::errors#merge!()',
    'activesupport::hashwithindifferentaccess#merge!()',
    'actiondispatch::response::merge_default_headers()',
    'actiondispatch::response#message()',
    'actionmailer::mailhelper#message()',
    'actionmailer::messagedelivery#message()',
    'rails::application#message_verifier()',
    'activestorage::analyzer#metadata()',
    'activestorage::analyzer::imageanalyzer#metadata()',
    'activestorage::analyzer::videoanalyzer#metadata()',
    'actiondispatch::request#method()',
    'abstractcontroller::base::method_added()',
    'actioncable::channel::base::method_added()',
    'activesupport::subscriber::method_added()',
    'actiondispatch::assertions::routingassertions#method_missing()',
    'activemodel::attributemethods#method_missing()',
    'activerecord::migration#method_missing()',
    'activesupport::logsubscriber::testhelper::mocklogger#method_missing()',
    'activesupport::multibyte::chars#method_missing()',
    'activesupport::orderedoptions#method_missing()',
    'activesupport::timewithzone#method_missing()',
    'actiondispatch::request#method_symbol()',
    'date#midday()',
    'datetime#midday()',
    'time#midday()',
    'date#middle_of_day()',
    'datetime#middle_of_day()',
    'time#middle_of_day()',
    'actioncontroller::metal::middleware()',
    'activesupport::cache::strategy::localcache#middleware()',
    'rails::server#middleware()',
    'date#midnight()',
    'datetime#midnight()',
    'time#midnight()',
    'activerecord::migration::migrate()',
    'activerecord::migration#migrate()',
    'activerecord::tasks::databasetasks#migrate()',
    'rails::generators::migration#migration_template()',
    'activerecord::tasks::databasetasks#migrations_paths()',
    'activerecord::calculations#minimum()',
    'time#minus_with_coercion()',
    'time#minus_without_coercion()',
    'time#minus_without_duration()',
    'numeric#minute()',
    'numeric#minutes()',
    'actiondispatch::testresponse#missing?()',
    'nameerror#missing_name()',
    'nameerror#missing_name?()',
    'activemodel::naming#model_name()',
    'rails::generators::namedbase#model_resource_name()',
    'rails::generators::base#module_namespacing()',
    'abstractcontroller::helpers::classmethods#modules_for_helpers()',
    'actioncontroller::helpers::classmethods#modules_for_helpers()',
    'activesupport::concurrency::loadinterlockawaremonitor#mon_enter()',
    'dateandtime::calculations#monday()',
    'activerecord::connectionadapters::postgresql::columnmethods#money()',
    'integer#month()',
    'actionview::helpers::formhelper#month_field()',
    'actionview::helpers::formtaghelper#month_field_tag()',
    'integer#months()',
    'dateandtime::calculations#months_ago()',
    'dateandtime::calculations#months_since()',
    'actiondispatch::routing::mapper::base#mount()',
    'rails::generators::namedbase#mountable_engine?()',
    'benchmark::ms()',
    'actionview::helpers::formbuilder#multipart=()',
    'integer#multiple_of?()',
    'activesupport::cache::store#mute()',
    'activestorage::previewer::mupdfpreviewer::mutool_exists?()',
    'activestorage::previewer::mupdfpreviewer::mutool_path()',
    'actiondispatch::middlewarestack::middleware#name()',
    'actiondispatch::routing::routewrapper#name()',
    'activesupport::timewithzone::name()',
    'actiondispatch::routing::mapper::resources#namespace()',
    'actiondispatch::routing::mapper::scoping#namespace()',
    'rails::command::base::namespace()',
    'rails::generators::base::namespace()',
    'rails::generators::base#namespace()',
    'rails::generators::base#namespaced?()',
    'rails::generators::namedbase#namespaced_class_path()',
    'rails::generators::base#namespaced_path()',
    'activerecord::connectionadapters::abstractmysqladapter#native_database_types()',
    'activerecord::connectionadapters::schemastatements#native_database_types()',
    'numeric#negative?()',
    'actioncontroller::mimeresponds::collector#negotiate_format()',
    'actiondispatch::http::mimenegotiation#negotiate_mime()',
    'actiondispatch::routing::mapper::resources#nested()',
    'activesupport::hashwithindifferentaccess#nested_under_indifferent_access()',
    'activesupport::orderedhash#nested_under_indifferent_access()',
    'hash#nested_under_indifferent_access()',
    'abstractcontroller::doublerendererror::new()',
    'abstractcontroller::helpers::missinghelpererror::new()',
    'actioncable::channel::base::new()',
    'actioncable::connection::base::new()',
    'actioncable::connection::streameventloop::new()',
    'actioncable::connection::taggedloggerproxy::new()',
    'actioncable::remoteconnections::new()',
    'actioncable::remoteconnections::remoteconnection::new()',
    'actioncable::server::base::new()',
    'actioncable::server::broadcasting::broadcaster::new()',
    'actioncable::server::configuration::new()',
    'actioncable::subscriptionadapter::async::asyncsubscribermap::new()',
    'actioncable::subscriptionadapter::base::new()',
    'actioncable::subscriptionadapter::postgresql::listener::new()',
    'actioncable::subscriptionadapter::redis::listener::new()',
    'actioncable::subscriptionadapter::subscribermap::new()',
    'actioncontroller::live::sse::new()',
    'actioncontroller::metal::new()',
    'actioncontroller::mimeresponds::collector::new()',
    'actioncontroller::missingrenderer::new()',
    'actioncontroller::parameters::new()',
    'actioncontroller::renderer#new()',
    'actioncontroller::renderer::new()',
    'actioncontroller::requestforgeryprotection::protectionmethods::exception::new()',
    'actioncontroller::requestforgeryprotection::protectionmethods::nullsession::new()',
    'actioncontroller::requestforgeryprotection::protectionmethods::resetsession::new()',
    'actiondispatch::assertionresponse::new()',
    'actiondispatch::callbacks::new()',
    'actiondispatch::contentsecuritypolicy::new()',
    'actiondispatch::contentsecuritypolicy::middleware::new()',
    'actiondispatch::cookies::new()',
    'actiondispatch::debugexceptions::new()',
    'actiondispatch::debuglocks::new()',
    'actiondispatch::exceptionwrapper::new()',
    'actiondispatch::executor::new()',
    'actiondispatch::filehandler::new()',
    'actiondispatch::flash::new()',
    'actiondispatch::http::filterparameters::new()',
    'actiondispatch::http::parameterfilter::new()',
    'actiondispatch::http::parameters::parseerror::new()',
    'actiondispatch::http::url::new()',
    'actiondispatch::integration::runner::new()',
    'actiondispatch::integration::session::new()',
    'actiondispatch::middlewarestack::new()',
    'actiondispatch::middlewarestack::middleware::new()',
    'actiondispatch::publicexceptions::new()',
    'actiondispatch::railsentitystore::new()',
    'actiondispatch::railsmetastore::new()',
    'actiondispatch::remoteip::new()',
    'actiondispatch::remoteip::getip::new()',
    'actiondispatch::request::new()',
    'actiondispatch::requestid::new()',
    'actiondispatch::response::new()',
    'actiondispatch::response::rackbody::new()',
    'actiondispatch::routing::consoleformatter::new()',
    'actiondispatch::routing::htmltableformatter::new()',
    'actiondispatch::routing::mapper::resources#new()',
    'actiondispatch::routing::urlfor::new()',
    'actiondispatch::session::cachestore::new()',
    'actiondispatch::session::compatibility::new()',
    'actiondispatch::session::cookiestore::new()',
    'actiondispatch::session::memcachestore::new()',
    'actiondispatch::showexceptions::new()',
    'actiondispatch::static::new()',
    'actionmailer::base::new()',
    'actionmailer::collector::new()',
    'actionmailer::noninferrablemailererror::new()',
    'actionmailer::preview::new()',
    'actionview::digestor::node::new()',
    'actionview::filesystemresolver::new()',
    'actionview::fixtureresolver::new()',
    'actionview::helpers::formbuilder::new()',
    'actionview::helpers::numberhelper::invalidnumbererror::new()',
    'actionview::logsubscriber::new()',
    'actionview::partialiteration::new()',
    'actionview::partialrenderer::new()',
    'actionview::renderer::new()',
    'actionview::resolver::new()',
    'actionview::resolver::cache::smallcache::new()',
    'actionview::resolver::path::new()',
    'actionview::template::new()',
    'actionview::template::types::type::new()',
    'actionview::testcase::behavior::classmethods#new()',
    'actionview::testcase::behavior::renderedviewscollection::new()',
    'actionview::testcase::testcontroller::new()',
    'activejob::core::new()',
    'activejob::queueadapters::asyncadapter::new()',
    'activejob::queueadapters::sneakersadapter::new()',
    'activemodel::errors::new()',
    'activemodel::model::new()',
    'activemodel::name::new()',
    'activemodel::type::value::new()',
    'activemodel::unknownattributeerror::new()',
    'activemodel::validationerror::new()',
    'activemodel::validations::acceptancevalidator::attributedefinition::new()',
    'activemodel::validations::acceptancevalidator::lazilydefineattributes::new()',
    'activemodel::validator::new()',
    'activerecord::associationrelation::new()',
    'activerecord::associationrelation#new()',
    'activerecord::associations::collectionproxy#new()',
    'activerecord::attributeassignmenterror::new()',
    'activerecord::attributemethods::serialization::columnnotserializableerror::new()',
    'activerecord::connectionadapters::abstractadapter::version::new()',
    'activerecord::connectionadapters::abstractmysqladapter::new()',
    'activerecord::connectionadapters::connectionhandler::new()',
    'activerecord::connectionadapters::connectionpool::new()',
    'activerecord::connectionadapters::connectionpool::queue::new()',
    'activerecord::connectionadapters::connectionpool::reaper::new()',
    'activerecord::connectionadapters::databasestatements::new()',
    'activerecord::connectionadapters::databasestatements::partialquerycollector::new()',
    'activerecord::connectionadapters::mysql2adapter::new()',
    'activerecord::connectionadapters::postgresql::altertable::new()',
    'activerecord::connectionadapters::postgresql::oid::bit::data::new()',
    'activerecord::connectionadapters::postgresqladapter::new()',
    'activerecord::connectionadapters::postgresqltypemetadata::new()',
    'activerecord::connectionadapters::querycache::new()',
    'activerecord::connectionadapters::querycache::connectionpoolconfiguration::new()',
    'activerecord::connectionadapters::realtransaction::new()',
    'activerecord::connectionadapters::sqlite3adapter::new()',
    'activerecord::connectionadapters::savepointtransaction::new()',
    'activerecord::connectionadapters::schemacache::new()',
    'activerecord::connectionadapters::table::new()',
    'activerecord::connectionadapters::tabledefinition::new()',
    'activerecord::connectionadapters::transactionstate::new()',
    'activerecord::core::new()',
    'activerecord::dynamicmatchers::method::new()',
    'activerecord::eagerloadpolymorphicerror::new()',
    'activerecord::environmentmismatcherror::new()',
    'activerecord::fixtureset::new()',
    'activerecord::fixtureset::classcache::new()',
    'activerecord::inheritance::classmethods#new()',
    'activerecord::migration::new()',
    'activerecord::migration::checkpending::new()',
    'activerecord::migration::commandrecorder::new()',
    'activerecord::mismatchedforeignkey::new()',
    'activerecord::multiparameterassignmenterrors::new()',
    'activerecord::querymethods::wherechain::new()',
    'activerecord::recordinvalid::new()',
    'activerecord::recordnotdestroyed::new()',
    'activerecord::recordnotfound::new()',
    'activerecord::recordnotsaved::new()',
    'activerecord::reflection::macroreflection::new()',
    'activerecord::relation::new()',
    'activerecord::relation#new()',
    'activerecord::result::new()',
    'activerecord::staleobjecterror::new()',
    'activerecord::statementinvalid::new()',
    'activerecord::unknownprimarykey::new()',
    'activestorage::analyzer::new()',
    'activestorage::attached::new()',
    'activestorage::filename::new()',
    'activestorage::preview::new()',
    'activestorage::previewer::new()',
    'activestorage::service::azurestorageservice::new()',
    'activestorage::service::diskservice::new()',
    'activestorage::service::gcsservice::new()',
    'activestorage::service::mirrorservice::new()',
    'activestorage::service::s3service::new()',
    'activestorage::variant::new()',
    'activestorage::variation::new()',
    'activesupport::backtracecleaner::new()',
    'activesupport::cache::filestore::new()',
    'activesupport::cache::memcachestore::new()',
    'activesupport::cache::memorystore::new()',
    'activesupport::cache::rediscachestore::new()',
    'activesupport::cache::store::new()',
    'activesupport::cache::strategy::localcache::localstore::new()',
    'activesupport::cachingkeygenerator::new()',
    'activesupport::callbacks::conditionals::value::new()',
    'activesupport::concurrency::sharelock::new()',
    'activesupport::currentattributes::new()',
    'activesupport::dependencies::classcache::new()',
    'activesupport::dependencies::watchstack::new()',
    'activesupport::deprecation::new()',
    'activesupport::deprecation::deprecatedconstantproxy::new()',
    'activesupport::deprecation::deprecatedinstancevariableproxy::new()',
    'activesupport::deprecation::deprecatedobjectproxy::new()',
    'activesupport::encryptedconfiguration::new()',
    'activesupport::encryptedfile::new()',
    'activesupport::encryptedfile::missingcontenterror::new()',
    'activesupport::encryptedfile::missingkeyerror::new()',
    'activesupport::fileupdatechecker::new()',
    'activesupport::gzip::stream::new()',
    'activesupport::hashwithindifferentaccess::new()',
    'activesupport::inflector::inflections::new()',
    'activesupport::inflector::inflections::uncountables::new()',
    'activesupport::inheritableoptions::new()',
    'activesupport::keygenerator::new()',
    'activesupport::logsubscriber::testhelper::mocklogger::new()',
    'activesupport::logger::new()',
    'activesupport::messageencryptor::new()',
    'activesupport::messageverifier::new()',
    'activesupport::multibyte::chars::new()',
    'activesupport::multibyte::unicode::codepoint::new()',
    'activesupport::multibyte::unicode::unicodedatabase::new()',
    'activesupport::notifications::event::new()',
    'activesupport::notifications::fanout::new()',
    'activesupport::notifications::instrumenter::new()',
    'activesupport::reloader::new()',
    'activesupport::safebuffer::new()',
    'activesupport::safebuffer::safeconcaterror::new()',
    'activesupport::subscriber::new()',
    'activesupport::taggedlogging::new()',
    'activesupport::timewithzone::new()',
    'activesupport::timezone::new()',
    'activesupport::xmlconverter::disallowedtype::new()',
    'mime::alltype::new()',
    'mime::mimes::new()',
    'mime::type::new()',
    'rails::api::task::new()',
    'rails::application::new()',
    'rails::application::configuration::new()',
    'rails::application::defaultmiddlewarestack::new()',
    'rails::application::finisher::mutexhook::new()',
    'rails::application::routesreloader::new()',
    'rails::backtracecleaner::new()',
    'rails::configuration::middlewarestackproxy::new()',
    'rails::console::new()',
    'rails::dbconsole::new()',
    'rails::engine::new()',
    'rails::engine::configuration::new()',
    'rails::engine::railties::new()',
    'rails::generators::activemodel::new()',
    'rails::generators::appbase::gemfileentry::new()',
    'rails::initializable::initializer::new()',
    'rails::paths::path::new()',
    'rails::paths::root::new()',
    'rails::rack::logger::new()',
    'rails::railtie::configuration::new()',
    'rails::secrets::missingkeyerror::new()',
    'rails::server::new()',
    'sourceannotationextractor::new()',
    'activesupport::dependencies::watchstack#new_constants()',
    'rails::generators::namedbase#new_helper()',
    'activerecord::persistence#new_record?()',
    'rails::consolemethods#new_session()',
    'dateandtime::calculations#next_day()',
    'activerecord::migration#next_migration_number()',
    'dateandtime::calculations#next_month()',
    'dateandtime::calculations#next_occurring()',
    'dateandtime::calculations#next_quarter()',
    'activerecord::modelschema::classmethods#next_sequence_value()',
    'dateandtime::calculations#next_week()',
    'dateandtime::calculations#next_weekday()',
    'dateandtime::calculations#next_year()',
    'mime::nulltype#nil?()',
    'rails::generators::no_color!()',
    'actiondispatch::routing::consoleformatter#no_routes()',
    'actiondispatch::routing::htmltableformatter#no_routes()',
    'activerecord::notouching::classmethods#no_touching()',
    'activerecord::notouching#no_touching?()',
    'actioncontroller::requestforgeryprotection#non_xhr_javascript_response?()',
    'actioncontroller::httpauthentication::digest#nonce()',
    'activerecord::querymethods#none()',
    'activerecord::relation#none?()',
    'date#noon()',
    'datetime#noon()',
    'time#noon()',
    'activesupport::multibyte::chars#normalize()',
    'activesupport::multibyte::unicode#normalize()',
    'actioncontroller::requestforgeryprotection#normalize_action_path()',
    'actiondispatch::routing::mapper::normalize_name()',
    'actiondispatch::routing::mapper::normalize_path()',
    'activerecord::querymethods::wherechain#not()',
    'actiondispatch::http::cache::request#not_modified?()',
    'actiondispatch::flash::flashhash#notice()',
    'actiondispatch::flash::flashhash#notice=()',
    'actiondispatch::flash::flashhash#now()',
    'activesupport::timezone#now()',
    'actiondispatch::flash::flashhash#now_is_loaded?()',
    'datetime#nsec()',
    'activerecord::connectionadapters::transactionstate#nullify!()',
    'activerecord::connectionadapters::connectionpool::queue#num_waiting()',
    'actionview::helpers::formhelper#number_field()',
    'actionview::helpers::formtaghelper#number_field_tag()',
    'actionview::helpers::numberhelper#number_to_currency()',
    'activesupport::numberhelper#number_to_currency()',
    'activesupport::numberhelper#number_to_delimited()',
    'actionview::helpers::numberhelper#number_to_human()',
    'activesupport::numberhelper#number_to_human()',
    'actionview::helpers::numberhelper#number_to_human_size()',
    'activesupport::numberhelper#number_to_human_size()',
    'actionview::helpers::numberhelper#number_to_percentage()',
    'activesupport::numberhelper#number_to_percentage()',
    'actionview::helpers::numberhelper#number_to_phone()',
    'activesupport::numberhelper#number_to_phone()',
    'activesupport::numberhelper#number_to_rounded()',
    'actionview::helpers::numberhelper#number_with_delimiter()',
    'actionview::helpers::numberhelper#number_with_precision()',
    'activerecord::connectionadapters::postgresql::columnmethods#numrange()',
    'actionview::helpers::activemodelinstancetag#object()',
    'activerecord::querymethods#offset()',
    'activerecord::connectionadapters::postgresql::columnmethods#oid()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()',
    'activesupport::lazyloadhooks#on_load()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()',
    'activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()',
    'dateandtime::calculations#on_weekday?()',
    'dateandtime::calculations#on_weekend?()',
    'activerecord::relation#one?()',
    'activerecord::spawnmethods#only()',
    'actioncontroller::httpauthentication::digest#opaque()',
    'actiondispatch::http::uploadedfile#open()',
    'actiondispatch::railsentitystore#open()',
    'actiondispatch::integration::runner#open_session()',
    'rails::configuration::middlewarestackproxy#operations()',
    'rails::server#opt_parser()',
    'rails::generators::actions#optimize_indentation()',
    'actiondispatch::routing::urlfor#optimize_routes_generation?()',
    'actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()',
    'actiondispatch::http::url#optional_port()',
    'actionview::helpers::formoptionshelper#options_for_select()',
    'actionview::helpers::formoptionshelper#options_from_collection_for_select()',
    'activerecord::connectionadapters::schemastatements#options_include_default?()',
    'activerecord::querymethods#or()',
    'activerecord::querymethods#order()',
    'activesupport::inflector#ordinal()',
    'integer#ordinal()',
    'activesupport::inflector#ordinalize()',
    'integer#ordinalize()',
    'activesupport::safebuffer#original_concat()',
    'actiondispatch::request#original_fullpath()',
    'actiondispatch::request#original_url()',
    'range#overlaps?()',
    'activesupport::multibyte::unicode#pack_graphemes()',
    'rails::appbuilder#package_json()',
    'activemodel::naming::param_key()',
    'actiondispatch::http::filterparameters#parameter_filter()',
    'actiondispatch::http::filterparameters#parameter_filter_for()',
    'actiondispatch::http::parameters::classmethods#parameter_parsers=()',
    'activesupport::inflector#parameterize()',
    'string#parameterize()',
    'actiondispatch::http::parameters#parameters()',
    'actioncontroller::metal#params()',
    'actioncontroller::strongparameters#params()',
    'actiondispatch::http::parameters#params()',
    'actioncontroller::metal#params=()',
    'actioncontroller::strongparameters#params=()',
    'actioncontroller::httpauthentication::token#params_array_from()',
    'module#parent()',
    'module#parent_name()',
    'activesupport::notifications::event#parent_of?()',
    'module#parents()',
    'activesupport::duration::parse()',
    'activesupport::timezone#parse()',
    'mime::type::parse()',
    'rails::server::options#parse!()',
    'mime::type::parse_data_with_trailing_star()',
    'activesupport::json::parse_error()',
    'mime::type::parse_trailing_star()',
    'actiondispatch::testresponse#parsed_body()',
    'uri::parser()',
    'activemodel::securepassword::instancemethodsonactivation#password=()',
    'activemodel::securepassword::instancemethodsonactivation#password_confirmation=()',
    'actionview::helpers::formhelper#password_field()',
    'actionview::helpers::formtaghelper#password_field_tag()',
    'activesupport::timewithzone#past?()',
    'dateandtime::calculations#past?()',
    'actioncontroller::testcase::behavior#patch()',
    'actiondispatch::integration::requesthelpers#patch()',
    'actiondispatch::routing::mapper::httphelpers#patch()',
    'actiondispatch::http::uploadedfile#path()',
    'actiondispatch::routing::pathredirect#path()',
    'actiondispatch::routing::routewrapper#path()',
    'activerecord::connectionadapters::postgresql::columnmethods#path()',
    'rails::generators::appbase::gemfileentry::path()',
    'actiondispatch::testrequest#path=()',
    'actiondispatch::http::url::path_for()',
    'actiondispatch::http::parameters#path_parameters()',
    'actionview::helpers::asseturlhelper#path_to_asset()',
    'actionview::helpers::asseturlhelper#path_to_audio()',
    'actionview::helpers::asseturlhelper#path_to_font()',
    'actionview::helpers::asseturlhelper#path_to_image()',
    'actionview::helpers::asseturlhelper#path_to_javascript()',
    'actionview::helpers::asseturlhelper#path_to_stylesheet()',
    'actionview::helpers::asseturlhelper#path_to_video()',
    'rails::application::configuration#paths()',
    'rails::engine::configuration#paths()',
    'activerecord::dynamicmatchers::method::pattern()',
    'activestorage::previewer::popplerpdfpreviewer::pdftoppm_exists?()',
    'activestorage::previewer::popplerpdfpreviewer::pdftoppm_path()',
    'actioncontroller::requestforgeryprotection#per_form_csrf_token()',
    'activejob::execution#perform()',
    'activestorage::analyzejob#perform()',
    'activestorage::purgejob#perform()',
    'actioncable::channel::base#perform_action()',
    'activejob::testhelper#perform_enqueued_jobs()',
    'activejob::enqueuing::classmethods#perform_later()',
    'activejob::execution#perform_now()',
    'activejob::execution::classmethods#perform_now()',
    'abstractcontroller::base#performed?()',
    'actioncontroller::metal#performed?()',
    'activejob::queueadapters::testadapter#performed_jobs()',
    'activesupport::timewithzone#period()',
    'activesupport::timezone#period_for_local()',
    'activesupport::timezone#period_for_utc()',
    'actioncable::channel::periodictimers::classmethods#periodically()',
    'actiondispatch::cookies::chainedcookiejars#permanent()',
    'actioncontroller::parameters#permit()',
    'actioncontroller::parameters#permit!()',
    'activesupport::dependencies::interlock#permit_concurrent_loads()',
    'actioncontroller::parameters#permitted=()',
    'actioncontroller::parameters#permitted?()',
    'activemodel::model#persisted?()',
    'activerecord::persistence#persisted?()',
    'numeric#petabyte()',
    'numeric#petabytes()',
    'actionview::helpers::formhelper#phone_field()',
    'actionview::helpers::formtaghelper#phone_field_tag()',
    'activerecord::associations::collectionproxy#pluck()',
    'activerecord::calculations#pluck()',
    'enumerable#pluck()',
    'minitest::plugin_rails_init()',
    'minitest::plugin_rails_options()',
    'minitest::plugin_rails_replace_reporters()',
    'actiondispatch::contentsecuritypolicy#plugin_types()',
    'activemodel::naming::plural()',
    'activesupport::inflector::inflections#plural()',
    'rails::generators::namedbase#plural_file_name()',
    'rails::generators::namedbase#plural_name()',
    'rails::generators::namedbase#plural_route_name()',
    'rails::generators::namedbase#plural_table_name()',
    'actionview::helpers::texthelper#pluralize()',
    'activesupport::inflector#pluralize()',
    'string#pluralize()',
    'activerecord::modelschema::pluralize_table_names()',
    'activerecord::modelschema::pluralize_table_names=()',
    'rails::generators::namedbase#pluralize_table_names?()',
    'activerecord::connectionadapters::postgresql::columnmethods#point()',
    'activerecord::connectionadapters::connectionpool::queue#poll()',
    'activerecord::connectionadapters::postgresql::columnmethods#polygon()',
    'activerecord::inheritance::classmethods#polymorphic_name()',
    'actiondispatch::routing::polymorphicroutes#polymorphic_path()',
    'actiondispatch::routing::polymorphicroutes#polymorphic_url()',
    'actiondispatch::http::url#port()',
    'actiondispatch::testrequest#port=()',
    'actiondispatch::http::url#port_string()',
    'numeric#positive?()',
    'actioncable::connection::streameventloop#post()',
    'actioncontroller::testcase::behavior#post()',
    'actiondispatch::integration::requesthelpers#post()',
    'actiondispatch::routing::mapper::httphelpers#post()',
    'activerecord::connectionadapters::postgresqladapter#postgresql_version()',
    'activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()',
    'activerecord::modelschema::classmethods#prefetch_primary_key?()',
    'activerecord::dynamicmatchers::findby::prefix()',
    'activerecord::dynamicmatchers::findbybang::prefix()',
    'activerecord::dynamicmatchers::method::prefix()',
    'activerecord::querymethods#preload()',
    'actionview::helpers::assettaghelper#preload_link_tag()',
    'actiondispatch::response#prepare!()',
    'rails::generators::testing::behaviour#prepare_destination()',
    'activerecord::associations::collectionproxy#prepend()',
    'activesupport::safebuffer#prepend()',
    'abstractcontroller::callbacks::classmethods#prepend_after_action()',
    'abstractcontroller::callbacks::classmethods#prepend_around_action()',
    'abstractcontroller::callbacks::classmethods#prepend_before_action()',
    'actionview::viewpaths#prepend_view_path()',
    'actionview::viewpaths::classmethods#prepend_view_path()',
    'object#presence()',
    'object#presence_in()',
    'object#present?()',
    'activerecord::core#pretty_print()',
    'activerecord::relation#pretty_print()',
    'dateandtime::calculations#prev_day()',
    'dateandtime::calculations#prev_month()',
    'dateandtime::calculations#prev_occurring()',
    'dateandtime::calculations#prev_quarter()',
    'dateandtime::calculations#prev_week()',
    'dateandtime::calculations#prev_weekday()',
    'dateandtime::calculations#prev_year()',
    'activestorage::blob::representable#preview()',
    'activestorage::previewer#preview()',
    'activestorage::previewer::mupdfpreviewer#preview()',
    'activestorage::previewer::popplerpdfpreviewer#preview()',
    'activestorage::previewer::videopreviewer#preview()',
    'actionmailer::preview::preview_name()',
    'activestorage::blob::representable#previewable?()',
    'activemodel::dirty#previous_changes()',
    'activerecord::attributemethods::primarykey::classmethods#primary_key()',
    'activerecord::connectionadapters::columnmethods#primary_key()',
    'activerecord::connectionadapters::postgresql::columnmethods#primary_key()',
    'activerecord::connectionadapters::schemastatements#primary_key()',
    'activerecord::attributemethods::primarykey::classmethods#primary_key=()',
    'activerecord::modelschema::primary_key_prefix_type()',
    'activerecord::modelschema::primary_key_prefix_type=()',
    'activerecord::connectionadapters::schemacache#primary_keys()',
    'rails::generators::print_generators()',
    'rails::generators::print_list()',
    'rails::command::base::printing_commands()',
    'activejob::queuepriority#priority()',
    'abstractcontroller::base#process()',
    'actioncontroller::live#process()',
    'actioncontroller::testcase::behavior#process()',
    'actiondispatch::integration::session#process()',
    'actionmailer::logsubscriber#process()',
    'abstractcontroller::callbacks#process_action()',
    'actioncontroller::instrumentation#process_action()',
    'actioncontroller::logsubscriber#process_action()',
    'actioncontroller::paramswrapper#process_action()',
    'activestorage::preview#processed()',
    'activestorage::variant#processed()',
    'actionmailer::messagedelivery#processed?()',
    'activerecord::migration#proper_table_name()',
    'rails::info::property()',
    'actioncontroller::requestforgeryprotection#protect_against_forgery?()',
    'actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()',
    'activerecord::modelschema::classmethods#protected_environments()',
    'activerecord::modelschema::classmethods#protected_environments=()',
    'actiondispatch::http::url#protocol()',
    'actionview::helpers::capturehelper#provide()',
    'activerecord::associationrelation#proxy_association()',
    'activerecord::associations::collectionproxy#proxy_association()',
    'activesupport::multibyte::proxy_class()',
    'activesupport::multibyte::proxy_class=()',
    'activesupport::cache::memorystore#prune()',
    'activesupport::cache::memorystore#pruning?()',
    'actionview::helpers::asseturlhelper#public_compute_asset_path()',
    'rails::appbuilder#public_directory()',
    'rails::generators::public_namespaces()',
    'rails::public_path()',
    'activesupport::notifications::publish()',
    'activesupport::notifications::fanout#publish()',
    'actioncable::server::base#pubsub()',
    'actioncable::server::configuration#pubsub_adapter()',
    'activerecord::tasks::databasetasks#purge()',
    'activestorage::attached::macros#purge()',
    'activestorage::attached::many#purge()',
    'activestorage::attached::one#purge()',
    'activestorage::attachment#purge()',
    'activestorage::blob#purge()',
    'activerecord::tasks::databasetasks#purge_all()',
    'activerecord::tasks::databasetasks#purge_current()',
    'activestorage::attached::macros#purge_later()',
    'activestorage::attached::many#purge_later()',
    'activestorage::attached::one#purge_later()',
    'activestorage::attachment#purge_later()',
    'activestorage::blob#purge_later()',
    'activerecord::associations::collectionproxy#push()',
    'rails::paths::path#push()',
    'actioncontroller::testcase::behavior#put()',
    'actiondispatch::integration::requesthelpers#put()',
    'actiondispatch::routing::mapper::httphelpers#put()',
    'actionview::nullresolver#query()',
    'activerecord::attributemethods::query#query_attribute()',
    'activerecord::connectionadapters::querycache::connectionpoolconfiguration#query_cache_enabled()',
    'actioncontroller::testcase::behavior#query_parameter_names()',
    'actiondispatch::request#query_parameters()',
    'activejob::queueadapter::classmethods#queue_adapter()',
    'activejob::testhelper#queue_adapter()',
    'activejob::testhelper::testqueueadapter::classmethods#queue_adapter()',
    'activejob::queueadapter::classmethods#queue_adapter=()',
    'activejob::testhelper#queue_adapter_for_test()',
    'activejob::queueadapter::classmethods#queue_adapter_name()',
    'activejob::queuename::classmethods#queue_as()',
    'activejob::queuename#queue_name()',
    'activejob::queuepriority::classmethods#queue_with_priority()',
    'activerecord::connectionadapters::quoting#quote()',
    'rails::generators::actions#quote()',
    'activerecord::connectionadapters::quoting#quote_column_name()',
    'activerecord::connectionadapters::postgresql::quoting#quote_schema_name()',
    'activerecord::connectionadapters::mysql2adapter#quote_string()',
    'activerecord::connectionadapters::quoting#quote_string()',
    'activerecord::connectionadapters::quoting#quote_table_name()',
    'activerecord::connectionadapters::postgresql::quoting#quote_table_name_for_assignment()',
    'activerecord::connectionadapters::quoting#quote_table_name_for_assignment()',
    'activerecord::connectionadapters::quoting#quoted_date()',
    'activerecord::connectionadapters::quoting#quoted_false()',
    'activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()',
    'activerecord::modelschema::classmethods#quoted_table_name()',
    'activerecord::connectionadapters::quoting#quoted_true()',
    'actiondispatch::routing::routewrapper#rack_app()',
    'actionview::helpers::formbuilder#radio_button()',
    'actionview::helpers::formhelper#radio_button()',
    'actionview::helpers::formtaghelper#radio_button_tag()',
    'rails::generators::actions#rails_command()',
    'actionview::logsubscriber#rails_root()',
    'rails::api::edgetask#rails_version()',
    'rails::api::stabletask#rails_version()',
    'rails::railtie::railtie_name()',
    'rails::engine#railties()',
    'activesupport::proxyobject#raise()',
    'activemodel::validations#raise_validation_error()',
    'rails::generators::actions#rake()',
    'rails::application#rake_tasks()',
    'rails::railtie::rake_tasks()',
    'rails::appbuilder#rakefile()',
    'rails::generators::actions#rakefile()',
    'rails::pluginbuilder#rakefile()',
    'actionview::helpers::formhelper#range_field()',
    'actionview::helpers::formtaghelper#range_field_tag()',
    'actionview::helpers::outputsafetyhelper#raw()',
    'activerecord::connectionadapters::abstractadapter#raw_connection()',
    'actiondispatch::http::url#raw_host_with_port()',
    'actioncontroller::httpauthentication::token#raw_params()',
    'actiondispatch::request#raw_post()',
    'actiondispatch::http::uploadedfile#read()',
    'actiondispatch::railsentitystore#read()',
    'actiondispatch::railsmetastore#read()',
    'activesupport::cache::store#read()',
    'activesupport::encryptedconfiguration#read()',
    'activesupport::encryptedfile#read()',
    'activerecord::attributemethods::read#read_attribute()',
    'activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()',
    'activesupport::cache::strategy::localcache::localstore#read_entry()',
    'abstractcontroller::caching::fragments#read_fragment()',
    'activesupport::cache::rediscachestore#read_multi()',
    'activesupport::cache::store#read_multi()',
    'activesupport::cache::strategy::localcache::localstore#read_multi_entries()',
    'activerecord::store#read_store_attribute()',
    'date#readable_inspect()',
    'datetime#readable_inspect()',
    'rails::appbuilder#readme()',
    'rails::generators::actions#readme()',
    'rails::pluginbuilder#readme()',
    'activerecord::querymethods#readonly()',
    'activerecord::core#readonly!()',
    'activerecord::core#readonly?()',
    'activerecord::readonlyattributes::classmethods#readonly_attributes()',
    'actioncontroller::requestforgeryprotection#real_csrf_token()',
    'activerecord::connectionadapters::connectionpool#reap()',
    'actionmailer::base::receive()',
    'actionmailer::logsubscriber#receive()',
    'activerecord::connectionadapters::abstractadapter#reconnect!()',
    'activerecord::connectionadapters::mysql2adapter#reconnect!()',
    'activerecord::connectionadapters::postgresqladapter#reconnect!()',
    'activerecord::migration::commandrecorder#record()',
    'actionview::recordidentifier#record_key_for_dom_id()',
    'activerecord::connectionadapters::abstractmysqladapter#recreate_database()',
    'module#redefine_method()',
    'module#redefine_singleton_method()',
    'actiondispatch::routing::redirection#redirect()',
    'actioncontroller::redirecting#redirect_back()',
    'rails::generators::namedbase#redirect_resource_name()',
    'actioncontroller::flash#redirect_to()',
    'actioncontroller::instrumentation#redirect_to()',
    'actioncontroller::logsubscriber#redirect_to()',
    'actioncontroller::redirecting#redirect_to()',
    'actiondispatch::testprocess#redirect_to_url()',
    'activesupport::cache::rediscachestore#redis()',
    'actionview::template::types::type#ref()',
    'mime::nulltype#ref()',
    'mime::type#ref()',
    'activerecord::connectionadapters::sqlite3::tabledefinition#references()',
    'activerecord::connectionadapters::table#references()',
    'activerecord::connectionadapters::tabledefinition#references()',
    'activerecord::querymethods#references()',
    'activerecord::reflection::classmethods#reflect_on_aggregation()',
    'activerecord::reflection::classmethods#reflect_on_all_aggregations()',
    'activerecord::reflection::classmethods#reflect_on_all_associations()',
    'activerecord::reflection::classmethods#reflect_on_all_autosave_associations()',
    'activerecord::reflection::classmethods#reflect_on_association()',
    'activerecord::reflection::classmethods#reflections()',
    'actionview::template#refresh()',
    'activemodel::type::register()',
    'activerecord::type::register()',
    'mime::type::register()',
    'mime::type::register_alias()',
    'mime::type::register_callback()',
    'actiondispatch::integrationtest::behavior::classmethods#register_encoder()',
    'activesupport::executionwrapper::register_hook()',
    'actionmailer::base::register_interceptor()',
    'actionmailer::base::register_interceptors()',
    'actionmailer::base::register_observer()',
    'actionmailer::base::register_observers()',
    'actionmailer::previews::classmethods#register_preview_interceptor()',
    'actionmailer::previews::classmethods#register_preview_interceptors()',
    'activerecord::tasks::databasetasks#register_task()',
    'rails::generators::namedbase#regular_class_path()',
    'activesupport::hashwithindifferentaccess#regular_update()',
    'activesupport::hashwithindifferentaccess#regular_writer()',
    'actioncable::channel::base#reject()',
    'actioncontroller::parameters#reject()',
    'activesupport::hashwithindifferentaccess#reject()',
    'activesupport::orderedhash#reject()',
    'actioncontroller::parameters#reject!()',
    'actioncable::connection::authorization#reject_unauthorized_connection()',
    'activerecord::connectionadapters::connectionpool#release_connection()',
    'activerecord::connectionadapters::savepoints#release_savepoint()',
    'activesupport::reloader#release_unload_lock!()',
    'activerecord::associations::collectionproxy#reload()',
    'activerecord::attributemethods::dirty#reload()',
    'activerecord::autosaveassociation#reload()',
    'activerecord::persistence#reload()',
    'activerecord::relation#reload()',
    'activesupport::reloader::reload!()',
    'rails::application::routesreloader#reload!()',
    'rails::consolemethods#reload!()',
    'rails::application#reload_routes!()',
    'actiondispatch::testrequest#remote_addr=()',
    'actioncable::server::base#remote_connections()',
    'actiondispatch::request#remote_ip()',
    'actiondispatch::request#remote_ip=()',
    'actioncontroller::renderers::remove()',
    'activerecord::connectionadapters::connectionpool#remove()',
    'activerecord::connectionadapters::table#remove()',
    'string#remove()',
    'string#remove!()',
    'activerecord::connectionadapters::schemastatements#remove_belongs_to()',
    'activerecord::connectionadapters::table#remove_belongs_to()',
    'actioncable::subscriptionadapter::postgresql::listener#remove_channel()',
    'actioncable::subscriptionadapter::redis::listener#remove_channel()',
    'actioncable::subscriptionadapter::subscribermap#remove_channel()',
    'activerecord::connectionadapters::schemastatements#remove_column()',
    'activerecord::connectionadapters::tabledefinition#remove_column()',
    'activerecord::connectionadapters::schemastatements#remove_columns()',
    'activerecord::connectionadapters::connectionhandler#remove_connection()',
    'activerecord::connectionhandling#remove_connection()',
    'activesupport::backtracecleaner#remove_filters!()',
    'activerecord::connectionadapters::schemastatements#remove_foreign_key()',
    'rails::generators::base::remove_hook_for()',
    'activerecord::connectionadapters::schemastatements#remove_index()',
    'activerecord::connectionadapters::table#remove_index()',
    'module#remove_possible_method()',
    'module#remove_possible_singleton_method()',
    'activerecord::connectionadapters::schemastatements#remove_reference()',
    'activerecord::connectionadapters::table#remove_references()',
    'actioncontroller::remove_renderer()',
    'activesupport::backtracecleaner#remove_silencers!()',
    'actioncable::subscriptionadapter::subscribermap#remove_subscriber()',
    'activerecord::connectionadapters::schemastatements#remove_timestamps()',
    'activerecord::connectionadapters::table#remove_timestamps()',
    'activerecord::connectionadapters::table#rename()',
    'activerecord::connectionadapters::schemastatements#rename_column()',
    'activerecord::connectionadapters::abstractmysqladapter#rename_index()',
    'activerecord::connectionadapters::postgresql::schemastatements#rename_index()',
    'activerecord::connectionadapters::schemastatements#rename_index()',
    'activerecord::connectionadapters::table#rename_index()',
    'activesupport::xmlmini#rename_key()',
    'activerecord::connectionadapters::abstractmysqladapter#rename_table()',
    'activerecord::connectionadapters::postgresql::schemastatements#rename_table()',
    'activerecord::connectionadapters::sqlite3adapter#rename_table()',
    'activerecord::connectionadapters::schemastatements#rename_table()',
    'abstractcontroller::rendering#render()',
    'actioncontroller::instrumentation#render()',
    'actioncontroller::renderer#render()',
    'actiondispatch::debugexceptions::debugview#render()',
    'actionview::helpers::renderinghelper#render()',
    'actionview::partialrenderer#render()',
    'actionview::renderer#render()',
    'actionview::template#render()',
    'actionview::testcase::behavior#render()',
    'actionview::testcase::behavior::locals#render()',
    'actionview::renderer#render_body()',
    'actionview::logsubscriber#render_collection()',
    'actionview::logsubscriber#render_count()',
    'actionview::logsubscriber#render_partial()',
    'actionview::logsubscriber#render_template()',
    'abstractcontroller::rendering#render_to_body()',
    'actioncontroller::apirendering#render_to_body()',
    'actioncontroller::renderers#render_to_body()',
    'actioncontroller::rendering#render_to_body()',
    'actionview::rendering#render_to_body()',
    'abstractcontroller::rendering#render_to_string()',
    'actioncontroller::rendering#render_to_string()',
    'abstractcontroller::rendering#rendered_format()',
    'actionview::rendering#rendered_format()',
    'actionview::testcase::behavior#rendered_views()',
    'actionview::testcase::behavior::renderedviewscollection#rendered_views()',
    'activerecord::querymethods#reorder()',
    'activesupport::multibyte::unicode#reorder_characters()',
    'activerecord::associations::collectionproxy#replace()',
    'activesupport::hashwithindifferentaccess#replace()',
    'actiondispatch::contentsecuritypolicy#report_uri()',
    'activerecord::connectionadapters::sqlite3adapter::represent_boolean_as_integer()',
    'activestorage::blob::representable#representable?()',
    'activestorage::blob::representable#representation()',
    'actiondispatch::routing::routewrapper#reqs()',
    'actioncable::connection::base#request()',
    'actioncontroller::base#request()',
    'actioncontroller::requestforgeryprotection#request_authenticity_tokens()',
    'actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()',
    'actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()',
    'actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()',
    'actiondispatch::request#request_id()',
    'actiondispatch::request#request_method()',
    'actiondispatch::testrequest#request_method=()',
    'actiondispatch::request#request_method_symbol()',
    'actiondispatch::request#request_parameters()',
    'actiondispatch::request#request_parameters=()',
    'actiondispatch::testrequest#request_uri=()',
    'actioncontroller::parameters#require()',
    'rails::command::actions#require_application_and_environment!()',
    'actionview::template::handlers::builder#require_engine()',
    'actiondispatch::contentsecuritypolicy#require_sri_for()',
    'activesupport::reloader#require_unload_lock!()',
    'actioncontroller::parameters#required()',
    'activerecord::connectionadapters::abstractadapter#requires_reloading?()',
    'activerecord::connectionadapters::sqlite3adapter#requires_reloading?()',
    'activesupport::rescuable::classmethods#rescue_from()',
    'actiondispatch::exceptionwrapper#rescue_template()',
    'activesupport::rescuable#rescue_with_handler()',
    'activesupport::rescuable::classmethods#rescue_with_handler()',
    'activerecord::associations::collectionproxy#reset()',
    'activerecord::relation#reset()',
    'activesupport::currentattributes#reset()',
    'actiondispatch::integration::runner#reset!()',
    'actiondispatch::integration::session#reset!()',
    'activerecord::connectionadapters::abstractadapter#reset!()',
    'activerecord::connectionadapters::mysql2adapter#reset!()',
    'activerecord::connectionadapters::postgresqladapter#reset!()',
    'actiondispatch::response#reset_body!()',
    'activerecord::fixtureset::reset_cache()',
    'activesupport::callbacks::classmethods#reset_callbacks()',
    'activerecord::modelschema::classmethods#reset_column_information()',
    'activerecord::countercache::classmethods#reset_counters()',
    'actionview::helpers::texthelper#reset_cycle()',
    'activerecord::locking::optimistic::classmethods#reset_locking_column()',
    'activerecord::logsubscriber::reset_runtime()',
    'activerecord::connectionadapters::databasestatements#reset_sequence!()',
    'actioncontroller::metal#reset_session()',
    'actiondispatch::flash::requestmethods#reset_session()',
    'actiondispatch::request#reset_session()',
    'activesupport::currentattributes::resets()',
    'actiondispatch::railsentitystore::resolve()',
    'actiondispatch::railsmetastore::resolve()',
    'actiondispatch::routing::mapper::customurls#resolve()',
    'actiondispatch::routing::mapper::resources#resource()',
    'actiondispatch::routing::mapper::resources#resources()',
    'actiondispatch::routing::mapper::resources#resources_path_names()',
    'actioncontroller::mimeresponds#respond_to()',
    'actiondispatch::response::rackbody#respond_to?()',
    'activemodel::attributemethods#respond_to?()',
    'activerecord::attributemethods#respond_to?()',
    'activesupport::timewithzone#respond_to?()',
    'rails::railtie::configurable::classmethods#respond_to?()',
    'rails::railtie::configuration#respond_to?()',
    'activesupport::multibyte::chars#respond_to_missing?()',
    'activesupport::orderedoptions#respond_to_missing?()',
    'activesupport::timewithzone#respond_to_missing?()',
    'activemodel::attributemethods#respond_to_without_attributes?()',
    'actioncontroller::base#response()',
    'actioncontroller::mimeresponds::collector#response()',
    'abstractcontroller::base#response_body()',
    'actioncontroller::live#response_body=()',
    'actioncontroller::metal#response_body=()',
    'actiondispatch::response#response_code()',
    'actiondispatch::requestencoder::identityencoder#response_parser()',
    'actioncable::server::base#restart()',
    'activemodel::dirty#restore_attributes()',
    'actiondispatch::routing::consoleformatter#result()',
    'actiondispatch::routing::htmltableformatter#result()',
    'activerecord::connectionhandling#retrieve_connection()',
    'activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()',
    'activejob::exceptions#retry_job()',
    'activejob::exceptions::classmethods#retry_on()',
    'activesupport::multibyte::chars#reverse()',
    'actioncontroller::parameters#reverse_merge()',
    'activesupport::hashwithindifferentaccess#reverse_merge()',
    'hash#reverse_merge()',
    'actioncontroller::parameters#reverse_merge!()',
    'activesupport::hashwithindifferentaccess#reverse_merge!()',
    'hash#reverse_merge!()',
    'activerecord::querymethods#reverse_order()',
    'hash#reverse_update()',
    'activerecord::migration#reversible()',
    'activerecord::migration#revert()',
    'activerecord::migration::commandrecorder#revert()',
    'activerecord::migration#reverting?()',
    'activerecord::querymethods#rewhere()',
    'actiondispatch::http::uploadedfile#rewind()',
    'actioncontroller::httpauthentication::token#rewrite_param_values()',
    'activesupport::timewithzone#rfc2822()',
    'activesupport::timewithzone#rfc3339()',
    'activesupport::timezone#rfc3339()',
    'time::rfc3339()',
    'activesupport::timewithzone#rfc822()',
    'activerecord::connectionadapters::realtransaction#rollback()',
    'activerecord::connectionadapters::savepointtransaction#rollback()',
    'activerecord::connectionadapters::transactionstate#rollback!()',
    'activerecord::connectionadapters::databasestatements#rollback_db_transaction()',
    'activerecord::connectionadapters::databasestatements#rollback_to_savepoint()',
    'activerecord::connectionadapters::transactionstate#rolledback?()',
    'actiondispatch::routing::mapper::resources#root()',
    'activerecord::tasks::databasetasks#root()',
    'rails::root()',
    'rails::command::root()',
    'rails::engine::configuration#root=()',
    'rails::generators::actions#route()',
    'actiondispatch::routing::urlfor#route_for()',
    'activemodel::naming::route_key()',
    'rails::generators::namedbase#route_url()',
    'rails::engine#routes()',
    'rails::appbuilder#ruby_version()',
    'activerecord::connectionadapters::connectionpool::reaper#run()',
    'activerecord::migration#run()',
    'activerecord::querycache::run()',
    'activesupport::testing::isolation#run()',
    'rails::application::finisher::interlockhook::run()',
    'rails::application::finisher::mutexhook#run()',
    'rails::engine::updater::run()',
    'rails::initializable::initializer#run()',
    'activesupport::executionwrapper::run!()',
    'activesupport::callbacks#run_callbacks()',
    'rails::generators::testing::behaviour#run_generator()',
    'activesupport::testing::isolation::forking#run_in_isolation()',
    'activesupport::testing::isolation::subprocess#run_in_isolation()',
    'activerecord::testfixtures#run_in_transaction?()',
    'rails::initializable#run_initializers()',
    'activesupport::dependencies::run_interlock()',
    'activesupport::lazyloadhooks#run_load_hooks()',
    'rails::application#runner()',
    'rails::railtie::runner()',
    'activesupport::dependencies::interlock#running()',
    'activerecord::logsubscriber::runtime()',
    'activerecord::logsubscriber::runtime=()',
    'actionview::helpers::texthelper#safe_concat()',
    'activesupport::safebuffer#safe_concat()',
    'activesupport::inflector#safe_constantize()',
    'string#safe_constantize()',
    'activesupport::dependencies::classcache#safe_get()',
    'actionview::helpers::outputsafetyhelper#safe_join()',
    'actiondispatch::contentsecuritypolicy#sandbox()',
    'rails::console#sandbox?()',
    'actionview::helpers::sanitizehelper#sanitize()',
    'actionview::helpers::sanitizehelper#sanitize_css()',
    'activerecord::connectionadapters::databasestatements#sanitize_limit()',
    'activerecord::sanitization::classmethods#sanitize_sql()',
    'activerecord::sanitization::classmethods#sanitize_sql_array()',
    'activerecord::sanitization::classmethods#sanitize_sql_for_assignment()',
    'activerecord::sanitization::classmethods#sanitize_sql_for_conditions()',
    'activerecord::sanitization::classmethods#sanitize_sql_for_order()',
    'activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()',
    'activerecord::sanitization::classmethods#sanitize_sql_like()',
    'activestorage::filename#sanitized()',
    'activerecord::persistence#save()',
    'activerecord::validations#save()',
    'rails::generators::activemodel#save()',
    'activerecord::persistence#save!()',
    'activerecord::validations#save!()',
    'activerecord::attributemethods::dirty#saved_change_to_attribute()',
    'activerecord::attributemethods::dirty#saved_change_to_attribute?()',
    'activerecord::attributemethods::dirty#saved_changes()',
    'activerecord::attributemethods::dirty#saved_changes?()',
    'activerecord::migration#say()',
    'activerecord::migration#say_with_time()',
    'activerecord::connectionadapters::abstractadapter#schema_cache=()',
    'activerecord::connectionadapters::postgresql::schemastatements#schema_exists?()',
    'activerecord::tasks::databasetasks#schema_file()',
    'activerecord::modelschema::schema_migrations_table_name()',
    'activerecord::modelschema::schema_migrations_table_name=()',
    'activerecord::connectionadapters::postgresql::schemastatements#schema_names()',
    'activerecord::connectionadapters::postgresql::schemastatements#schema_search_path()',
    'activerecord::connectionadapters::postgresql::schemastatements#schema_search_path=()',
    'actiondispatch::routing::mapper::scoping#scope()',
    'activerecord::associations::collectionproxy#scope()',
    'activerecord::scoping::named::classmethods#scope()',
    'activerecord::reflection::macroreflection#scope_for()',
    'activerecord::relation#scope_for_create()',
    'activerecord::relation#scoping()',
    'actionview::helpers::formhelper#search_field()',
    'actionview::helpers::formtaghelper#search_field_tag()',
    'time#sec_fraction()',
    'activerecord::associations::collectionproxy#second()',
    'activerecord::findermethods#second()',
    'array#second()',
    'numeric#second()',
    'activerecord::findermethods#second!()',
    'activerecord::associations::collectionproxy#second_to_last()',
    'activerecord::findermethods#second_to_last()',
    'array#second_to_last()',
    'activerecord::findermethods#second_to_last!()',
    'numeric#seconds()',
    'datetime#seconds_since_midnight()',
    'time#seconds_since_midnight()',
    'activesupport::timezone::seconds_to_utc_offset()',
    'datetime#seconds_until_end_of_day()',
    'time#seconds_until_end_of_day()',
    'rails::application#secret_key_base()',
    'actioncontroller::httpauthentication::digest#secret_token()',
    'rails::application#secrets()',
    'actiondispatch::routing::consoleformatter#section()',
    'actiondispatch::routing::htmltableformatter#section()',
    'actiondispatch::routing::consoleformatter#section_title()',
    'actiondispatch::routing::htmltableformatter#section_title()',
    'activesupport::securityutils::secure_compare()',
    'activerecord::tasks::databasetasks#seed_loader()',
    'actioncontroller::parameters#select()',
    'actionview::helpers::formbuilder#select()',
    'actionview::helpers::formoptionshelper#select()',
    'activerecord::associations::collectionproxy#select()',
    'activerecord::querymethods#select()',
    'activesupport::hashwithindifferentaccess#select()',
    'activesupport::orderedhash#select()',
    'actioncontroller::parameters#select!()',
    'activerecord::connectionadapters::databasestatements#select_all()',
    'activerecord::connectionadapters::querycache#select_all()',
    'actionview::helpers::datehelper#select_date()',
    'actionview::helpers::datehelper#select_datetime()',
    'actionview::helpers::datehelper#select_day()',
    'actionview::helpers::datehelper#select_hour()',
    'actionview::helpers::datehelper#select_minute()',
    'actionview::helpers::datehelper#select_month()',
    'activerecord::connectionadapters::databasestatements#select_one()',
    'activerecord::connectionadapters::databasestatements#select_rows()',
    'actionview::helpers::datehelper#select_second()',
    'actionview::helpers::formtaghelper#select_tag()',
    'actionview::helpers::datehelper#select_time()',
    'activerecord::connectionadapters::databasestatements#select_value()',
    'activerecord::connectionadapters::databasestatements#select_values()',
    'actionview::helpers::datehelper#select_year()',
    'actioncable::connection::base#send_async()',
    'actioncontroller::datastreaming#send_data()',
    'actioncontroller::instrumentation#send_data()',
    'actioncontroller::logsubscriber#send_data()',
    'actiondispatch::request#send_early_hints()',
    'actioncontroller::datastreaming#send_file()',
    'actioncontroller::instrumentation#send_file()',
    'actioncontroller::logsubscriber#send_file()',
    'actiondispatch::response#send_file()',
    'actiondispatch::response#sending!()',
    'actiondispatch::response#sending?()',
    'actiondispatch::response#sending_file=()',
    'actiondispatch::response#sent!()',
    'actiondispatch::response#sent?()',
    'activerecord::modelschema::classmethods#sequence_name()',
    'activerecord::modelschema::classmethods#sequence_name=()',
    'activerecord::connectionadapters::postgresql::columnmethods#serial()',
    'activerecord::connectionadapters::postgresql::schemastatements#serial_sequence()',
    'activemodel::serialization#serializable_hash()',
    'activerecord::serialization#serializable_hash()',
    'activejob::core#serialize()',
    'activemodel::type::value#serialize()',
    'activerecord::attributemethods::serialization::classmethods#serialize()',
    'activerecord::type::json#serialize()',
    'activerecord::type::time#serialize()',
    'actiondispatch::filehandler#serve()',
    'actiondispatch::http::url#server_port()',
    'actiondispatch::request#server_software()',
    'activestorage::logsubscriber#service_delete()',
    'activestorage::logsubscriber#service_delete_prefixed()',
    'activestorage::logsubscriber#service_download()',
    'activestorage::logsubscriber#service_exist()',
    'activestorage::blob#service_headers_for_direct_upload()',
    'activestorage::logsubscriber#service_upload()',
    'activestorage::blob#service_url()',
    'activestorage::logsubscriber#service_url()',
    'activestorage::preview#service_url()',
    'activestorage::variant#service_url()',
    'activestorage::blob#service_url_for_direct_upload()',
    'actiondispatch::testprocess#session()',
    'activerecord::connectionadapters::postgresqladapter#session_auth=()',
    'actiondispatch::request#session_options=()',
    'rails::application::configuration#session_store()',
    'activejob::core::classmethods#set()',
    'activesupport::currentattributes#set()',
    'rails::command::actions#set_application_directory!()',
    'activesupport::callbacks::classmethods#set_callback()',
    'actionmailer::base#set_content_type()',
    'activesupport::hashwithindifferentaccess#set_defaults()',
    'rails::server#set_environment()',
    'rails::console#set_environment!()',
    'activerecord::testfixtures::classmethods#set_fixture_class()',
    'actiondispatch::response#set_header()',
    'activesupport::logsubscriber::testhelper#set_logger()',
    'actiondispatch::routing::mapper::resources#set_member_mappings_for_resource()',
    'rails::generators::migration#set_migration_assigns!()',
    'activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()',
    'activerecord::connectionadapters::transactionstate#set_state()',
    'activesupport::testing::setupandteardown::classmethods#setup()',
    'actioncontroller::testcase::behavior#setup_controller_request_and_response()',
    'activerecord::testfixtures::classmethods#setup_fixture_accessors()',
    'activerecord::testfixtures#setup_fixtures()',
    'rails::api::task#setup_horo_variables()',
    'actionview::testcase::behavior#setup_with_controller()',
    'actiondispatch::routing::mapper::resources#shallow()',
    'actiondispatch::routing::mapper::resources#shallow?()',
    'activesupport::concurrency::sharelock#sharing()',
    'activestorage::blobscontroller#show()',
    'activestorage::diskcontroller#show()',
    'activestorage::representationscontroller#show()',
    'actioncontroller::rescue#show_detailed_exceptions?()',
    'rails::generators::namedbase#show_helper()',
    'activerecord::connectionadapters::abstractmysqladapter#show_variable()',
    'actioncable::subscriptionadapter::base#shutdown()',
    'actioncable::subscriptionadapter::postgresql::listener#shutdown()',
    'actioncable::subscriptionadapter::redis::listener#shutdown()',
    'actiondispatch::cookies::chainedcookiejars#signed()',
    'activestorage::blob#signed_id()',
    'actiondispatch::cookies::chainedcookiejars#signed_or_encrypted()',
    'activesupport::deprecation::reporting#silence()',
    'loggersilence#silence()',
    'activesupport::cache::store#silence!()',
    'module#silence_redefinition_of_method()',
    'kernel#silence_warnings()',
    'actionview::helpers::texthelper#simple_format()',
    'activesupport::duration#since()',
    'activesupport::timewithzone#since()',
    'date#since()',
    'datetime#since()',
    'time#since()',
    'activemodel::naming::singular()',
    'activesupport::inflector::inflections#singular()',
    'rails::generators::namedbase#singular_name()',
    'activemodel::naming::singular_route_key()',
    'rails::generators::namedbase#singular_route_name()',
    'rails::generators::namedbase#singular_table_name()',
    'activesupport::inflector#singularize()',
    'string#singularize()',
    'actiondispatch::http::uploadedfile#size()',
    'actiondispatch::middlewarestack#size()',
    'activemodel::errors#size()',
    'activerecord::associations::collectionproxy#size()',
    'activerecord::connectionadapters::schemacache#size()',
    'activerecord::fixtureset#size()',
    'activerecord::relation#size()',
    'abstractcontroller::callbacks::classmethods#skip_after_action()',
    'abstractcontroller::callbacks::classmethods#skip_around_action()',
    'abstractcontroller::callbacks::classmethods#skip_before_action()',
    'activesupport::callbacks::classmethods#skip_callback()',
    'actioncontroller::requestforgeryprotection::classmethods#skip_forgery_protection()',
    'actioncontroller::parameterencoding::classmethods#skip_parameter_encoding()',
    'actioncontroller::parameters#slice()',
    'activerecord::core#slice()',
    'activesupport::hashwithindifferentaccess#slice()',
    'hash#slice()',
    'actioncontroller::parameters#slice!()',
    'activesupport::hashwithindifferentaccess#slice!()',
    'activesupport::multibyte::chars#slice!()',
    'hash#slice!()',
    'rails::generators::sorted_groups()',
    'actiondispatch::exceptionwrapper#source_extracts()',
    'rails::generators::base::source_root()',
    'activesupport::multibyte::chars#split()',
    'array#split()',
    'activerecord::logsubscriber#sql()',
    'activerecord::connectionadapters::databaselimits#sql_query_length()',
    'activerecord::connectionadapters::postgresqltypemetadata#sql_type()',
    'string#squish()',
    'string#squish!()',
    'actiondispatch::request#ssl?()',
    'actioncontroller::conditionalget#stale?()',
    'actiondispatch::session::stalesessioncheck#stale_session_check!()',
    'actiondispatch::http::url#standard_port()',
    'actiondispatch::http::url#standard_port?()',
    'actionview::logsubscriber#start()',
    'activesupport::logsubscriber#start()',
    'activesupport::notifications::fanout#start()',
    'activesupport::notifications::instrumenter#start()',
    'activesupport::subscriber#start()',
    'rails::console::start()',
    'rails::console#start()',
    'rails::dbconsole::start()',
    'rails::dbconsole#start()',
    'rails::server#start()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#start_document()',
    'activesupport::xmlmini_nokogirisax::hashbuilder#start_element()',
    'activesupport::concurrency::sharelock#start_exclusive()',
    'actioncontroller::logsubscriber#start_processing()',
    'activesupport::dependencies::interlock#start_running()',
    'activesupport::concurrency::sharelock#start_sharing()',
    'activesupport::dependencies::interlock#start_unloading()',
    'rails::rack::logger#started_request_message()',
    'activerecord::connectionadapters::connectionpool#stat()',
    'actioncable::connection::base#statistics()',
    'activesupport::cache::memcachestore#stats()',
    'actiondispatch::response#status=()',
    'actiondispatch::exceptionwrapper#status_code()',
    'actiondispatch::exceptionwrapper::status_code_for_exception()',
    'actiondispatch::response#status_message()',
    'activerecord::inheritance::classmethods#sti_name()',
    'actioncable::connection::streameventloop#stop()',
    'actioncable::channel::streams#stop_all_streams()',
    'activesupport::concurrency::sharelock#stop_exclusive()',
    'activesupport::concurrency::sharelock#stop_sharing()',
    'rails::appbuilder#storage()',
    'activerecord::store::classmethods#store()',
    'activesupport::dependencies::classcache#store()',
    'activesupport::hashwithindifferentaccess#store()',
    'activerecord::store::classmethods#store_accessor()',
    'activesupport::descendantstracker::store_inherited()',
    'activerecord::store::classmethods#stored_attributes()',
    'actioncable::channel::streams#stream_for()',
    'actioncable::channel::streams#stream_from()',
    'activesupport::timewithzone#strftime()',
    'activerecord::connectionadapters::abstractmysqladapter#strict_mode?()',
    'actiondispatch::flash::flashhash#stringify_array()',
    'activesupport::hashwithindifferentaccess#stringify_keys()',
    'hash#stringify_keys()',
    'activesupport::hashwithindifferentaccess#stringify_keys!()',
    'hash#stringify_keys!()',
    'string#strip_heredoc()',
    'actionview::helpers::sanitizehelper#strip_links()',
    'actionview::helpers::sanitizehelper#strip_tags()',
    'actiondispatch::http::cache::response#strong_etag=()',
    'actiondispatch::http::cache::response#strong_etag?()',
    'activesupport::timezone#strptime()',
    'activerecord::tasks::databasetasks#structure_dump()',
    'activerecord::tasks::databasetasks::structure_dump_flags()',
    'activerecord::tasks::databasetasks#structure_load()',
    'activerecord::tasks::databasetasks::structure_load_flags()',
    'actionview::helpers::assettaghelper#stylesheet_link_tag()',
    'actionview::helpers::asseturlhelper#stylesheet_path()',
    'actionview::helpers::asseturlhelper#stylesheet_url()',
    'rails::pluginbuilder#stylesheets()',
    'class#subclasses()',
    'rails::railtie::subclasses()',
    'actiondispatch::http::url#subdomain()',
    'actiondispatch::http::url#subdomains()',
    'actionview::helpers::formbuilder#submit()',
    'actionview::helpers::formtaghelper#submit_tag()',
    'actioncable::subscriptionadapter::base#subscribe()',
    'activesupport::notifications::subscribe()',
    'activesupport::notifications::fanout#subscribe()',
    'actioncable::channel::base#subscribe_to_channel()',
    'actioncable::channel::base#subscribed()',
    'activesupport::notifications::subscribed()',
    'activesupport::subscriber::subscribers()',
    'actioncable::channel::base#subscription_confirmation_sent?()',
    'actioncable::channel::base#subscription_rejected?()',
    'datetime#subsec()',
    'actiondispatch::testresponse#success?()',
    'activerecord::dynamicmatchers::findbybang::suffix()',
    'activerecord::dynamicmatchers::method::suffix()',
    'activerecord::calculations#sum()',
    'enumerable#sum()',
    'dateandtime::calculations#sunday()',
    'activerecord::connectionadapters::abstractadapter#supports_advisory_locks?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_advisory_locks?()',
    'activerecord::connectionadapters::postgresqladapter#supports_advisory_locks?()',
    'activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()',
    'activerecord::connectionadapters::postgresqladapter#supports_bulk_alter?()',
    'activerecord::connectionadapters::abstractadapter#supports_comments?()',
    'activerecord::connectionadapters::mysql2adapter#supports_comments?()',
    'activerecord::connectionadapters::postgresqladapter#supports_comments?()',
    'activerecord::connectionadapters::abstractadapter#supports_comments_in_create?()',
    'activerecord::connectionadapters::mysql2adapter#supports_comments_in_create?()',
    'activerecord::connectionadapters::abstractadapter#supports_datetime_with_precision?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_datetime_with_precision?()',
    'activerecord::connectionadapters::postgresqladapter#supports_datetime_with_precision?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_datetime_with_precision?()',
    'activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()',
    'activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()',
    'activerecord::connectionadapters::abstractadapter#supports_explain?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_explain?()',
    'activerecord::connectionadapters::postgresqladapter#supports_explain?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_explain?()',
    'activerecord::connectionadapters::abstractadapter#supports_expression_index?()',
    'activerecord::connectionadapters::postgresqladapter#supports_expression_index?()',
    'activerecord::connectionadapters::abstractadapter#supports_extensions?()',
    'activerecord::connectionadapters::postgresqladapter#supports_extensions?()',
    'activerecord::connectionadapters::abstractadapter#supports_foreign_keys?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_foreign_keys?()',
    'activerecord::connectionadapters::postgresqladapter#supports_foreign_keys?()',
    'activerecord::connectionadapters::abstractadapter#supports_foreign_keys_in_create?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_foreign_keys_in_create?()',
    'activerecord::connectionadapters::abstractadapter#supports_foreign_tables?()',
    'activerecord::connectionadapters::postgresqladapter#supports_foreign_tables?()',
    'activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()',
    'activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()',
    'activerecord::connectionadapters::abstractadapter#supports_indexes_in_create?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_indexes_in_create?()',
    'activerecord::connectionadapters::abstractadapter#supports_json?()',
    'activerecord::connectionadapters::mysql2adapter#supports_json?()',
    'activerecord::connectionadapters::postgresqladapter#supports_json?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_json?()',
    'activerecord::connectionadapters::postgresqladapter#supports_materialized_views?()',
    'activerecord::connectionadapters::abstractadapter#supports_multi_insert?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_multi_insert?()',
    'activerecord::connectionadapters::abstractadapter#supports_partial_index?()',
    'activerecord::connectionadapters::postgresqladapter#supports_partial_index?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_partial_index?()',
    'abstractcontroller::base::supports_path?()',
    'actionmailer::base::supports_path?()',
    'activerecord::connectionadapters::postgresqladapter#supports_pgcrypto_uuid?()',
    'activerecord::connectionadapters::postgresqladapter#supports_ranges?()',
    'activerecord::connectionadapters::abstractadapter#supports_savepoints?()',
    'activerecord::connectionadapters::mysql2adapter#supports_savepoints?()',
    'activerecord::connectionadapters::postgresqladapter#supports_savepoints?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()',
    'actionview::template#supports_streaming?()',
    'actionview::template::handlers::erb#supports_streaming?()',
    'activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()',
    'activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()',
    'activerecord::connectionadapters::abstractadapter#supports_validate_constraints?()',
    'activerecord::connectionadapters::postgresqladapter#supports_validate_constraints?()',
    'activerecord::connectionadapters::abstractadapter#supports_views?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_views?()',
    'activerecord::connectionadapters::postgresqladapter#supports_views?()',
    'activerecord::connectionadapters::sqlite3adapter#supports_views?()',
    'activerecord::connectionadapters::abstractadapter#supports_virtual_columns?()',
    'activerecord::connectionadapters::abstractmysqladapter#supports_virtual_columns?()',
    'activerecord::suppressor::classmethods#suppress()',
    'kernel#suppress()',
    'activerecord::migration#suppress_messages()',
    'actiondispatch::middlewarestack#swap()',
    'rails::configuration::middlewarestackproxy#swap()',
    'activesupport::multibyte::chars#swapcase()',
    'activesupport::multibyte::unicode#swapcase()',
    'activesupport::multibyte::unicode::codepoint#swapcase_mapping()',
    'activesupport::hashwithindifferentaccess#symbolize_keys()',
    'hash#symbolize_keys()',
    'hash#symbolize_keys!()',
    'actionview::template::types::symbols()',
    'mime::mimes#symbols()',
    'rails::appbuilder#system_test()',
    'abstractcontroller::translation#t()',
    'actionview::helpers::translationhelper#t()',
    'activerecord::connectionadapters::schemastatements#table_alias_for()',
    'activerecord::connectionadapters::databaselimits#table_alias_length()',
    'activerecord::connectionadapters::postgresqladapter#table_alias_length()',
    'activerecord::connectionadapters::schemastatements#table_comment()',
    'activerecord::connectionadapters::schemastatements#table_exists?()',
    'activerecord::modelschema::classmethods#table_exists?()',
    'activerecord::modelschema::classmethods#table_name()',
    'rails::generators::namedbase#table_name()',
    'activerecord::modelschema::classmethods#table_name=()',
    'activerecord::connectionadapters::databaselimits#table_name_length()',
    'activerecord::modelschema::table_name_prefix()',
    'activerecord::modelschema::table_name_prefix=()',
    'activerecord::modelschema::table_name_suffix()',
    'activerecord::modelschema::table_name_suffix=()',
    'activerecord::connectionadapters::schemastatements#table_options()',
    'activerecord::fixtureset#table_rows()',
    'activesupport::inflector#tableize()',
    'string#tableize()',
    'activerecord::connectionadapters::schemastatements#tables()',
    'actioncable::connection::taggedloggerproxy#tag()',
    'actionview::helpers::activemodelinstancetag#tag()',
    'actionview::helpers::taghelper#tag()',
    'activesupport::taggedlogging#tagged()',
    'activerecord::associations::collectionproxy#take()',
    'activerecord::findermethods#take()',
    'activerecord::findermethods#take!()',
    'actiondispatch::systemtesting::testhelpers::screenshothelper#take_failed_screenshot()',
    'actiondispatch::systemtesting::testhelpers::screenshothelper#take_screenshot()',
    'activerecord::associations::collectionproxy#target()',
    'activerecord::tasks::databasetasks#target_version()',
    'activesupport::testing::setupandteardown::classmethods#teardown()',
    'activerecord::testfixtures#teardown_fixtures()',
    'actionview::helpers::formhelper#telephone_field()',
    'actionview::helpers::formtaghelper#telephone_field_tag()',
    'activestorage::downloading#tempdir()',
    'rails::generators::namedbase#template()',
    'actionview::lookupcontext::viewpaths#template_exists?()',
    'numeric#terabyte()',
    'numeric#terabytes()',
    'activesupport::testing::declarative#test()',
    'rails::appbuilder#test()',
    'rails::pluginbuilder#test()',
    'rails::pluginbuilder#test_dummy_assets()',
    'rails::pluginbuilder#test_dummy_clean()',
    'rails::pluginbuilder#test_dummy_config()',
    'activemodel::lint::tests#test_errors_aref()',
    'activemodel::lint::tests#test_model_naming()',
    'activesupport::testcase::test_order()',
    'activesupport::testcase::test_order=()',
    'activemodel::lint::tests#test_persisted?()',
    'activemodel::lint::tests#test_to_key()',
    'activemodel::lint::tests#test_to_param()',
    'activemodel::lint::tests#test_to_partial_path()',
    'actioncontroller::testcase::behavior::classmethods#tests()',
    'actionmailer::testcase::behavior::classmethods#tests()',
    'actionview::testcase::behavior::classmethods#tests()',
    'rails::generators::testing::behaviour::classmethods#tests()',
    'activestorage::blob#text?()',
    'actionview::helpers::formhelper#text_area()',
    'actionview::helpers::formtaghelper#text_area_tag()',
    'actionview::helpers::formhelper#text_field()',
    'actionview::helpers::formtaghelper#text_field_tag()',
    'activerecord::associations::collectionproxy#third()',
    'activerecord::findermethods#third()',
    'array#third()',
    'activerecord::findermethods#third!()',
    'activerecord::associations::collectionproxy#third_to_last()',
    'activerecord::findermethods#third_to_last()',
    'array#third_to_last()',
    'activerecord::findermethods#third_to_last!()',
    'module#thread_cattr_accessor()',
    'module#thread_mattr_accessor()',
    'activesupport::multibyte::chars#tidy_bytes()',
    'activesupport::multibyte::unicode#tidy_bytes()',
    'activesupport::timewithzone#time()',
    'actionview::helpers::datehelper#time_ago_in_words()',
    'actionview::helpers::formhelper#time_field()',
    'actionview::helpers::formtaghelper#time_field_tag()',
    'actionview::helpers::datehelper#time_select()',
    'actionview::helpers::formbuilder#time_select()',
    'actionview::helpers::datehelper#time_tag()',
    'actionview::helpers::formoptionshelper#time_zone_options_for_select()',
    'actionview::helpers::formbuilder#time_zone_select()',
    'actionview::helpers::formoptionshelper#time_zone_select()',
    'actioncable::connection::streameventloop#timer()',
    'activerecord::timestamp#timestamp_attributes_for_create()',
    'activerecord::timestamp#timestamp_attributes_for_create_in_model()',
    'activerecord::timestamp#timestamp_attributes_for_update()',
    'activerecord::timestamp#timestamp_attributes_for_update_in_model()',
    'activerecord::connectionadapters::table#timestamps()',
    'activerecord::connectionadapters::tabledefinition#timestamps()',
    'activerecord::connectionadapters::mysql::columnmethods#tinyblob()',
    'activerecord::connectionadapters::mysql::columnmethods#tinytext()',
    'activesupport::multibyte::chars#titlecase()',
    'string#titlecase()',
    'activesupport::inflector#titleize()',
    'activesupport::multibyte::chars#titleize()',
    'string#titleize()',
    'rails::appbuilder#tmp()',
    'array#to()',
    'string#to()',
    'actiondispatch::response#to_a()',
    'activemodel::errors#to_a()',
    'activerecord::relation#to_a()',
    'activesupport::timewithzone#to_a()',
    'rails::paths::path#to_a()',
    'actiondispatch::response::rackbody#to_ary()',
    'activerecord::relation#to_ary()',
    'activerecord::result#to_ary()',
    'rails::paths::path#to_ary()',
    'activesupport::executionwrapper::to_complete()',
    'string#to_date()',
    'activesupport::timewithzone#to_datetime()',
    'string#to_datetime()',
    'activesupport::rangewithformat#to_default_s()',
    'array#to_default_s()',
    'date#to_default_s()',
    'datetime#to_default_s()',
    'time#to_default_s()',
    'actionview::digestor::node#to_dep_map()',
    'activesupport::timewithzone#to_f()',
    'datetime#to_f()',
    'activesupport::rangewithformat#to_formatted_s()',
    'activesupport::timewithzone#to_formatted_s()',
    'array#to_formatted_s()',
    'date#to_formatted_s()',
    'datetime#to_formatted_s()',
    'time#to_formatted_s()',
    'actioncontroller::parameters#to_h()',
    'actioncontroller::parameters#to_hash()',
    'actiondispatch::flash::flashhash#to_hash()',
    'activemodel::errors#to_hash()',
    'activerecord::result#to_hash()',
    'activesupport::hashwithindifferentaccess#to_hash()',
    'rails::info::to_html()',
    'activesupport::duration#to_i()',
    'activesupport::timewithzone#to_i()',
    'datetime#to_i()',
    'activestorage::filename#to_json()',
    'activemodel::conversion#to_key()',
    'activerecord::attributemethods::primarykey#to_key()',
    'actionview::helpers::formbuilder#to_model()',
    'activemodel::conversion#to_model()',
    'hash#to_options()',
    'activesupport::hashwithindifferentaccess#to_options!()',
    'hash#to_options!()',
    'actioncontroller::parameters#to_param()',
    'activemodel::conversion#to_param()',
    'activerecord::integration#to_param()',
    'activerecord::integration::classmethods#to_param()',
    'activesupport::safebuffer#to_param()',
    'array#to_param()',
    'falseclass#to_param()',
    'hash#to_param()',
    'nilclass#to_param()',
    'object#to_param()',
    'trueclass#to_param()',
    'actionview::helpers::formbuilder#to_partial_path()',
    'activemodel::conversion#to_partial_path()',
    'actiondispatch::response::rackbody#to_path()',
    'actionview::filesystemresolver#to_path()',
    'activesupport::reloader::to_prepare()',
    'rails::railtie::configuration#to_prepare()',
    'rails::railtie::configuration#to_prepare_blocks()',
    'actioncontroller::parameters#to_query()',
    'array#to_query()',
    'hash#to_query()',
    'object#to_query()',
    'activesupport::timewithzone#to_r()',
    'activesupport::executionwrapper::to_run()',
    'actioncontroller::parameters#to_s()',
    'actiondispatch::remoteip::getip#to_s()',
    'actionview::filesystemresolver#to_s()',
    'actionview::fixtureresolver#to_s()',
    'actionview::resolver::path#to_s()',
    'actionview::template::types::type#to_s()',
    'activemodel::name#to_s()',
    'activerecord::connectionadapters::postgresql::oid::bit::data#to_s()',
    'activestorage::filename#to_s()',
    'activesupport::duration#to_s()',
    'activesupport::numericwithformat#to_s()',
    'activesupport::rangewithformat#to_s()',
    'activesupport::safebuffer#to_s()',
    'activesupport::timewithzone#to_s()',
    'activesupport::timezone#to_s()',
    'array#to_s()',
    'date#to_s()',
    'datetime#to_s()',
    'mime::type#to_s()',
    'rails::info::to_s()',
    'time#to_s()',
    'actionview::helpers::outputsafetyhelper#to_sentence()',
    'array#to_sentence()',
    'activerecord::connectionadapters::databasestatements#to_sql()',
    'activerecord::relation#to_sql()',
    'actionview::resolver::path#to_str()',
    'actionview::template::types::type#to_str()',
    'activemodel::name#to_str()',
    'mime::type#to_str()',
    'actionview::template::types::type#to_sym()',
    'mime::type#to_sym()',
    'activesupport::xmlmini#to_tag()',
    'activesupport::timewithzone#to_time()',
    'date#to_time()',
    'datetime#to_time()',
    'string#to_time()',
    'time#to_time()',
    'actioncontroller::parameters#to_unsafe_h()',
    'actioncontroller::parameters#to_unsafe_hash()',
    'activemodel::errors#to_xml()',
    'array#to_xml()',
    'hash#to_xml()',
    'activesupport::orderedhash#to_yaml_type()',
    'activesupport::timezone#today()',
    'activesupport::timewithzone#today?()',
    'dateandtime::calculations#today?()',
    'activerecord::persistence#toggle()',
    'activerecord::persistence#toggle!()',
    'actioncontroller::httpauthentication::token#token_and_options()',
    'actioncontroller::httpauthentication::token#token_params_from()',
    'activesupport::timezone#tomorrow()',
    'date::tomorrow()',
    'dateandtime::calculations#tomorrow()',
    'activerecord::persistence#touch()',
    'actiondispatch::exceptionwrapper#traces()',
    'activerecord::connectionadapters::databasestatements#transaction()',
    'activerecord::transactions::classmethods#transaction()',
    'activerecord::connectionadapters::databasestatements#transaction_isolation_levels()',
    'activerecord::connectionadapters::databasestatements#transaction_open?()',
    'activerecord::connectionadapters::databasestatements#transaction_state()',
    'activestorage::variation#transform()',
    'actioncontroller::parameters#transform_keys()',
    'activesupport::hashwithindifferentaccess#transform_keys()',
    'hash#transform_keys()',
    'actioncontroller::parameters#transform_keys!()',
    'activesupport::hashwithindifferentaccess#transform_keys!()',
    'hash#transform_keys!()',
    'actioncontroller::parameters#transform_values()',
    'activesupport::hashwithindifferentaccess#transform_values()',
    'hash#transform_values()',
    'actioncontroller::parameters#transform_values!()',
    'hash#transform_values!()',
    'abstractcontroller::translation#translate()',
    'actionview::helpers::translationhelper#translate()',
    'activesupport::inflector#transliterate()',
    'actioncable::channel::base#transmit()',
    'activesupport::testing::timehelpers#travel()',
    'activesupport::testing::timehelpers#travel_back()',
    'activesupport::testing::timehelpers#travel_to()',
    'actionview::digestor::tree()',
    'actionview::helpers::texthelper#truncate()',
    'activerecord::connectionadapters::abstractmysqladapter#truncate()',
    'activerecord::connectionadapters::databasestatements#truncate()',
    'activerecord::connectionadapters::postgresqladapter#truncate()',
    'string#truncate()',
    'string#truncate_words()',
    'delegator#try()',
    'nilclass#try()',
    'object#try()',
    'delegator#try!()',
    'nilclass#try!()',
    'object#try!()',
    'rails::initializable::collection#tsort_each_child()',
    'activerecord::connectionadapters::postgresql::columnmethods#tsrange()',
    'activerecord::connectionadapters::postgresql::columnmethods#tstzrange()',
    'activerecord::connectionadapters::postgresql::columnmethods#tsvector()',
    'activesupport::timewithzone#tv_sec()',
    'actionview::template#type()',
    'activerecord::type::json#type()',
    'activerecord::connectionadapters::quoting#type_cast()',
    'activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()',
    'activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()',
    'activerecord::modelschema::classmethods#type_for_attribute()',
    'activerecord::connectionadapters::querycache#uncached()',
    'activerecord::querycache::classmethods#uncached()',
    'activesupport::inflector::inflections#uncountable()',
    'activemodel::naming::uncountable?()',
    'activesupport::inflector::inflections::uncountables#uncountable?()',
    'rails::generators::namedbase#uncountable?()',
    'activemodel::attributemethods::classmethods#undefine_attribute_methods()',
    'activesupport::inflector#underscore()',
    'string#underscore()',
    'object#unescape()',
    'activerecord::connectionadapters::postgresql::quoting#unescape_bytea()',
    'activesupport::dependencies::unload_interlock()',
    'activesupport::dependencies::interlock#unloading()',
    'actioncontroller::requestforgeryprotection#unmask_token()',
    'activesupport::multibyte::unicode#unpack_graphemes()',
    'actioncontroller::logsubscriber#unpermitted_parameters()',
    'activerecord::connectionadapters::abstractadapter#unprepared_statement()',
    'activerecord::connectionadapters::quoting#unquoted_false()',
    'activerecord::connectionadapters::quoting#unquoted_true()',
    'mime::type::unregister()',
    'activerecord::querymethods#unscope()',
    'activerecord::scoping::default::classmethods#unscoped()',
    'actiondispatch::middlewarestack#unshift()',
    'rails::configuration::middlewarestackproxy#unshift()',
    'rails::paths::path#unshift()',
    'activerecord::connectionadapters::mysql::columnmethods#unsigned_bigint()',
    'activerecord::connectionadapters::mysql::columnmethods#unsigned_decimal()',
    'activerecord::connectionadapters::mysql::columnmethods#unsigned_float()',
    'activerecord::connectionadapters::mysql::columnmethods#unsigned_integer()',
    'actioncable::subscriptionadapter::base#unsubscribe()',
    'activesupport::notifications::unsubscribe()',
    'activesupport::notifications::fanout#unsubscribe()',
    'actioncable::channel::base#unsubscribed()',
    'activesupport::duration#until()',
    'activerecord::migration#up()',
    'activerecord::migration#up_only()',
    'activesupport::multibyte::chars#upcase()',
    'activesupport::multibyte::unicode#upcase()',
    'activesupport::inflector#upcase_first()',
    'string#upcase_first()',
    'activerecord::connectionadapters::databasestatements#update()',
    'activerecord::persistence#update()',
    'activerecord::persistence::classmethods#update()',
    'activestorage::diskcontroller#update()',
    'activesupport::hashwithindifferentaccess#update()',
    'rails::generators::activemodel#update()',
    'activerecord::persistence#update!()',
    'activerecord::relation#update_all()',
    'activerecord::persistence#update_attribute()',
    'activerecord::persistence#update_attributes()',
    'activerecord::persistence#update_attributes!()',
    'activerecord::persistence#update_column()',
    'activerecord::persistence#update_columns()',
    'activerecord::countercache::classmethods#update_counters()',
    'activerecord::locking::optimistic::classmethods#update_counters()',
    'activesupport::fileupdatechecker#updated?()',
    'actiondispatch::contentsecuritypolicy#upgrade_insecure_requests()',
    'activestorage::blob#upload()',
    'activestorage::service#upload()',
    'activestorage::service::azurestorageservice#upload()',
    'activestorage::service::diskservice#upload()',
    'activestorage::service::gcsservice#upload()',
    'activestorage::service::mirrorservice#upload()',
    'activestorage::service::s3service#upload()',
    'actiondispatch::http::url#url()',
    'activestorage::service#url()',
    'activestorage::service::azurestorageservice#url()',
    'activestorage::service::diskservice#url()',
    'activestorage::service::gcsservice#url()',
    'activestorage::service::s3service#url()',
    'actionview::helpers::formhelper#url_field()',
    'actionview::helpers::formtaghelper#url_field_tag()',
    'actioncontroller::metal#url_for()',
    'actiondispatch::http::url::url_for()',
    'actiondispatch::routing::urlfor#url_for()',
    'actionview::routingurlfor#url_for()',
    'activestorage::service#url_for_direct_upload()',
    'activestorage::service::azurestorageservice#url_for_direct_upload()',
    'activestorage::service::diskservice#url_for_direct_upload()',
    'activestorage::service::gcsservice#url_for_direct_upload()',
    'activestorage::service::s3service#url_for_direct_upload()',
    'rails::generators::namedbase#url_helper_prefix()',
    'actioncontroller::urlfor#url_options()',
    'actiondispatch::integration::session#url_options()',
    'actiondispatch::integrationtest::urloptions#url_options()',
    'actiondispatch::routing::urlfor#url_options()',
    'actionview::helpers::asseturlhelper#url_to_asset()',
    'actionview::helpers::asseturlhelper#url_to_audio()',
    'actionview::helpers::asseturlhelper#url_to_font()',
    'actionview::helpers::asseturlhelper#url_to_image()',
    'actionview::helpers::asseturlhelper#url_to_javascript()',
    'actionview::helpers::asseturlhelper#url_to_stylesheet()',
    'actionview::helpers::asseturlhelper#url_to_video()',
    'activesupport::timezone::us_zones()',
    'rails::command::base::usage_path()',
    'rails::generators::base::usage_path()',
    'actioncontroller::metal::use()',
    'actiondispatch::middlewarestack#use()',
    'rails::configuration::middlewarestackproxy#use()',
    'actiondispatch::http::mimenegotiation#use_accept_header()',
    'activerecord::connectionadapters::postgresqladapter#use_insert_returning?()',
    'actioncontroller::renderers::classmethods#use_renderer()',
    'actioncontroller::renderers::classmethods#use_renderers()',
    'time::use_zone()',
    'datetime#usec()',
    'actiondispatch::testrequest#user_agent=()',
    'actioncontroller::httpauthentication::basic#user_name_and_password()',
    'activerecord::testfixtures::classmethods#uses_transaction()',
    'activerecord::testfixtures::classmethods#uses_transaction?()',
    'activesupport::timewithzone#utc()',
    'datetime#utc()',
    'activesupport::timewithzone#utc?()',
    'datetime#utc?()',
    'activesupport::timewithzone#utc_offset()',
    'activesupport::timezone#utc_offset()',
    'datetime#utc_offset()',
    'activesupport::timezone#utc_to_local()',
    'actionview::helpers::formtaghelper#utf8_enforcer_tag()',
    'actiondispatch::request#uuid()',
    'activerecord::connectionadapters::postgresql::columnmethods#uuid()',
    'digest::uuid::uuid_from_hash()',
    'digest::uuid::uuid_v3()',
    'digest::uuid::uuid_v4()',
    'digest::uuid::uuid_v5()',
    'activemodel::validations#valid?()',
    'activerecord::dynamicmatchers::method#valid?()',
    'activerecord::validations#valid?()',
    'actiondispatch::http::mimenegotiation#valid_accept_header()',
    'activerecord::connectionadapters::sqlite3adapter#valid_alter_table_type?()',
    'actioncontroller::requestforgeryprotection#valid_authenticity_token?()',
    'activesupport::messageverifier#valid_message?()',
    'actioncontroller::requestforgeryprotection#valid_per_form_csrf_token?()',
    'actioncontroller::requestforgeryprotection#valid_request_origin?()',
    'activemodel::validations#validate()',
    'activemodel::validations::classmethods#validate()',
    'activemodel::validator#validate()',
    'activerecord::validations#validate()',
    'activemodel::validations#validate!()',
    'activerecord::connectionadapters::postgresql::altertable#validate_constraint()',
    'activerecord::connectionadapters::postgresql::schemastatements#validate_constraint()',
    'actioncontroller::httpauthentication::digest#validate_digest_response()',
    'activerecord::connectionadapters::postgresql::schemastatements#validate_foreign_key()',
    'actioncontroller::httpauthentication::digest#validate_nonce()',
    'rails::application#validate_secret_key_base()',
    'activemodel::validations::classmethods#validates()',
    'activemodel::validations::classmethods#validates!()',
    'activemodel::validations::helpermethods#validates_absence_of()',
    'activerecord::validations::classmethods#validates_absence_of()',
    'activemodel::validations::helpermethods#validates_acceptance_of()',
    'activerecord::validations::classmethods#validates_associated()',
    'activemodel::validations::helpermethods#validates_confirmation_of()',
    'activemodel::validations::classmethods#validates_each()',
    'activemodel::validations::helpermethods#validates_exclusion_of()',
    'activemodel::validations::helpermethods#validates_format_of()',
    'activemodel::validations::helpermethods#validates_inclusion_of()',
    'activemodel::validations::helpermethods#validates_length_of()',
    'activerecord::validations::classmethods#validates_length_of()',
    'activemodel::validations::helpermethods#validates_numericality_of()',
    'activemodel::validations::helpermethods#validates_presence_of()',
    'activerecord::validations::classmethods#validates_presence_of()',
    'activemodel::validations::helpermethods#validates_size_of()',
    'activerecord::validations::classmethods#validates_size_of()',
    'activerecord::validations::classmethods#validates_uniqueness_of()',
    'activemodel::validations#validates_with()',
    'activemodel::validations::classmethods#validates_with()',
    'activemodel::validations::classmethods#validators()',
    'activemodel::validations::classmethods#validators_on()',
    'activerecord::connectionadapters::databasestatements::partialquerycollector#value()',
    'actioncontroller::parameters#value?()',
    'actioncontroller::parameters#values()',
    'activemodel::errors#values()',
    'activerecord::relation#values()',
    'rails::paths::root#values()',
    'actioncontroller::parameters#values_at()',
    'activesupport::hashwithindifferentaccess#values_at()',
    'rails::paths::root#values_at()',
    'activestorage::blob::representable#variable?()',
    'actiondispatch::http::mimenegotiation#variant()',
    'activestorage::blob::representable#variant()',
    'actiondispatch::http::mimenegotiation#variant=()',
    'rails::appbuilder#vendor()',
    'rails::generators::actions#vendor()',
    'activesupport::messageverifier#verified()',
    'activesupport::messages::rotator::verifier#verified()',
    'actioncontroller::requestforgeryprotection#verified_request?()',
    'activesupport::messageverifier#verify()',
    'activerecord::connectionadapters::abstractadapter#verify!()',
    'actioncontroller::requestforgeryprotection#verify_authenticity_token()',
    'actioncontroller::requestforgeryprotection#verify_same_origin_request()',
    'actioncable::version()',
    'actionmailer::version()',
    'actionview::version()',
    'activejob::version()',
    'activemodel::version()',
    'activerecord::version()',
    'activestorage::version()',
    'activesupport::version()',
    'rails::version()',
    'rails::generators::appbase::gemfileentry::version()',
    'rails::generators::appbase::gemfileentry#version()',
    'rails::appbuilder#version_control()',
    'activestorage::blob#video?()',
    'actionview::helpers::asseturlhelper#video_path()',
    'actionview::helpers::assettaghelper#video_tag()',
    'actionview::helpers::asseturlhelper#video_url()',
    'abstractcontroller::rendering#view_assigns()',
    'abstractcontroller::caching#view_cache_dependencies()',
    'abstractcontroller::caching::classmethods#view_cache_dependency()',
    'actionview::rendering#view_context()',
    'actionview::rendering#view_context_class()',
    'actionview::rendering::classmethods#view_context_class()',
    'activerecord::connectionadapters::schemastatements#view_exists?()',
    'actionview::viewpaths::classmethods#view_paths()',
    'actionview::lookupcontext::viewpaths#view_paths=()',
    'actionview::viewpaths::classmethods#view_paths=()',
    'actionview::testcase::behavior::renderedviewscollection#view_rendered?()',
    'activerecord::connectionadapters::schemastatements#views()',
    'activerecord::connectionadapters::determineifpreparablevisitor#visit_arel_nodes_in()',
    'activerecord::connectionadapters::determineifpreparablevisitor#visit_arel_nodes_sqlliteral()',
    'activesupport::logsubscriber::testhelper#wait()',
    'activesupport::notifications::fanout#wait()',
    'activesupport::deprecation::reporting#warn()',
    'activesupport::dependencies::watchstack#watch_namespaces()',
    'rails::railtie::configuration#watchable_dirs()',
    'rails::railtie::configuration#watchable_files()',
    'activesupport::dependencies::watchstack#watching?()',
    'actiondispatch::http::cache::response#weak_etag=()',
    'actiondispatch::http::cache::response#weak_etag?()',
    'numeric#week()',
    'actionview::helpers::formhelper#week_field()',
    'actionview::helpers::formtaghelper#week_field_tag()',
    'numeric#weeks()',
    'dateandtime::calculations#weeks_ago()',
    'dateandtime::calculations#weeks_since()',
    'actioncable::remoteconnections#where()',
    'activerecord::querymethods#where()',
    'activerecord::relation#where_values_hash()',
    'activerecord::attributemethods::dirty#will_save_change_to_attribute?()',
    'abstractcontroller::railties::routeshelpers::with()',
    'actionmailer::parameterized::classmethods#with()',
    'activesupport::cache::connectionpoollike#with()',
    'activesupport::xmlmini#with_backend()',
    'activerecord::connectionadapters::connectionpool#with_connection()',
    'actioncable::server::worker::activerecordconnectionmanagement#with_database_connections()',
    'actiondispatch::routing::mapper::base#with_default_scope()',
    'actioncontroller::parameters#with_defaults()',
    'actioncontroller::renderer#with_defaults()',
    'activesupport::hashwithindifferentaccess#with_defaults()',
    'hash#with_defaults()',
    'actioncontroller::parameters#with_defaults!()',
    'activesupport::hashwithindifferentaccess#with_defaults!()',
    'hash#with_defaults!()',
    'actionview::lookupcontext::viewpaths#with_fallbacks()',
    'activesupport::hashwithindifferentaccess#with_indifferent_access()',
    'hash#with_indifferent_access()',
    'activesupport::cache::strategy::localcache#with_local_cache()',
    'activerecord::locking::pessimistic#with_lock()',
    'object#with_options()',
    'actiondispatch::assertions::routingassertions#with_routing()',
    'actiondispatch::routing::mapper::resources#with_scope_level()',
    'kernel#with_warnings()',
    'array#without()',
    'enumerable#without()',
    'actioncontroller::api::without_modules()',
    'actioncontroller::base::without_modules()',
    'actionview::helpers::texthelper#word_wrap()',
    'actioncable::server::base#worker_pool()',
    'activestorage::filename::wrap()',
    'activestorage::variation::wrap()',
    'activesupport::executionwrapper::wrap()',
    'activesupport::reloader::wrap()',
    'array::wrap()',
    'actioncontroller::paramswrapper::classmethods#wrap_parameters()',
    'rails::generators::base#wrap_with_namespace()',
    'actioncontroller::live::sse#write()',
    'actiondispatch::railsentitystore#write()',
    'actiondispatch::railsmetastore#write()',
    'actiondispatch::response#write()',
    'activerecord::migration#write()',
    'activesupport::cache::store#write()',
    'activesupport::encryptedconfiguration#write()',
    'activesupport::encryptedfile#write()',
    'activerecord::attributemethods::write#write_attribute()',
    'activesupport::cache::strategy::localcache::localstore#write_entry()',
    'abstractcontroller::caching::fragments#write_fragment()',
    'activesupport::cache::store#write_multi()',
    'actiondispatch::session::cachestore#write_session()',
    'activerecord::store#write_store_attribute()',
    'actioncable::connection::streameventloop#writes_pending()',
    'actiondispatch::request#xhr?()',
    'activerecord::connectionadapters::postgresql::columnmethods#xml()',
    'actiondispatch::request#xml_http_request?()',
    'activesupport::timewithzone#xmlschema()',
    'date#xmlschema()',
    'actioncontroller::requestforgeryprotection#xor_byte_strings()',
    'integer#year()',
    'integer#years()',
    'dateandtime::calculations#years_ago()',
    'dateandtime::calculations#years_since()',
    'activesupport::timezone#yesterday()',
    'date::yesterday()',
    'dateandtime::calculations#yesterday()',
    'activesupport::concurrency::sharelock#yield_shares()',
    'activesupport::timewithzone#zone()',
    'time::zone()',
    'time::zone=()',
]);

// This file generated through ./bin/gen_symbols.js,Do NOT modify it!
const RUBY = new Set([
    'acl',
    'acl::aclentry',
    'acl::acllist',
    'argv',
    'abbrev',
    'action',
    'actionfilter',
    'actionmap',
    'adder',
    'addrinfo',
    'alias2',
    'aliasobject',
    'argumenterror',
    'array',
    'arraycode',
    'arrayspec',
    'arrayspec::splat',
    'arrayspecs',
    'arrayspecs::arrayconvertable',
    'arrayspecs::assockey',
    'arrayspecs::comparablewithfixnum',
    'arrayspecs::d',
    'arrayspecs::mockforcompared',
    'arrayspecs::myarray',
    'arrayspecs::myrange',
    'arrayspecs::privatetoary',
    'arrayspecs::sexp',
    'arrayspecs::sortsame',
    'arrayspecs::subarray',
    'arrayspecs::toaryarray',
    'arrayspecs::ufosceptic',
    'arrayspecs::uncomparable',
    'arraysub',
    'b',
    'bar',
    'basicobjectspecs',
    'basicobjectspecs::bosubclass',
    'basicobjectspecs::ivars',
    'basicobjectspecs::instevalcvar',
    'basicobjectspecs::instevalconst',
    'basicobjectspecs::instevalouter',
    'basicobjectspecs::instevalouter::inner',
    'basicobjectspecs::instexec',
    'basicobjectspecs::instexecincluded',
    'basicobjectspecs::singletonmethod',
    'basicsocket',
    'beaninofspecs',
    'beaninofspecs::a',
    'beaninofspecs::b',
    'beaninofspecs::c',
    'beaninstanceofmatcher',
    'beancestorofmatcher',
    'beclosematcher',
    'beclosetomatrixmatcher',
    'becomputedbymatcher',
    'bekindofmatcher',
    'benchmark',
    'benchmark::tms',
    'benchmarkdriver',
    'benchmarkdriver::file',
    'biff',
    'bigdecimal',
    'bigdecimalspecs',
    'bigmath',
    'binding',
    'bindingspecs',
    'bindingspecs::demo',
    'blockspecs',
    'blockspecs::overwriteblockvariable',
    'blockspecs::yield',
    'blockspecs::yielder',
    'board',
    'boring',
    'branch',
    'breakspecs',
    'breakspecs::block',
    'breakspecs::driver',
    'breakspecs::lambda',
    'breaktest',
    'bug',
    'bug::bignum',
    'bug::class',
    'bug::debug',
    'bug::debug::dataerror',
    'bug::exception',
    'bug::file',
    'bug::file::stat',
    'bug::float',
    'bug::hash',
    'bug::integer',
    'bug::integer::breakable',
    'bug::integer::myinteger',
    'bug::iter',
    'bug::iter::yield',
    'bug::method',
    'bug::proc',
    'bug::regexp',
    'bug::scanargs',
    'bug::string',
    'bug::struct',
    'bug::symbol',
    'bug::time',
    'bug::typeddata',
    'bug::vm',
    'bug::win32',
    'bugguard',
    'c',
    'c2',
    'capiclassspecs',
    'capiclassspecs::a',
    'capiclassspecs::a::b',
    'capiclassspecs::a::d',
    'capiclassspecs::alloc',
    'capiclassspecs::attr',
    'capiclassspecs::cvars',
    'capiclassspecs::inherited',
    'capiclassspecs::m',
    'capiclassspecs::newclass',
    'capiclassspecs::sub',
    'capiclassspecs::subm',
    'capiclassspecs::subsub',
    'capiclassspecs::super',
    'capiencodingspecs',
    'capiencodingspecs::s',
    'capimodulespecs',
    'capimodulespecs::a',
    'capimodulespecs::b',
    'capimodulespecs::c',
    'capimodulespecs::m',
    'capimodulespecs::rubyunderautoload',
    'capimodulespecs::super',
    'capiobjectspecs',
    'capiobjectspecs::alloc',
    'capiobjectspecs::extend',
    'capiobjectspecs::subarray',
    'cc',
    'cgi',
    'cgi::cookie',
    'cgi::escape',
    'cgi::html3',
    'cgi::html4',
    'cgi::html4fr',
    'cgi::html4tr',
    'cgi::html5',
    'cgi::htmlextension',
    'cgi::invalidencoding',
    'cgi::queryextension',
    'cgi::session',
    'cgi::session::filestore',
    'cgi::session::memorystore',
    'cgi::session::nullstore',
    'cgi::session::pstore',
    'cgi::util',
    'cgispecs',
    'chashdir',
    'cmath',
    'config',
    'csv',
    'csv::malformedcsverror',
    'csv::row',
    'csv::table',
    'cal',
    'casefolding',
    'casefolding::util',
    'casemapping',
    'catchspecs',
    'certstore',
    'chainednexttest',
    'channel',
    'chatclient',
    'chatentry',
    'chatserver',
    'checksum',
    'child',
    'class',
    'classcontainer',
    'classcontainer::classcontainer',
    'classcontainer::classcontainer::privateclass',
    'classcontainer::privateclass',
    'classcontainer::privatemodule',
    'classspecs',
    'classspecs::a',
    'classspecs::b',
    'classspecs::c',
    'classspecs::container',
    'classspecs::container::a',
    'classspecs::container::b',
    'classspecs::d',
    'classspecs::e',
    'classspecs::empty',
    'classspecs::f',
    'classspecs::g',
    'classspecs::h',
    'classspecs::i',
    'classspecs::i::j',
    'classspecs::k',
    'classspecs::l',
    'classspecs::m',
    'classspecs::metaclasssuper',
    'classspecs::nosuperclassset',
    'classspecs::number',
    'classspecs::number::myclass',
    'classspecs::o',
    'classspecs::plus',
    'classspecs::singleton',
    'classspecs::superclassevaluatedfirst',
    'classspecs::superclassnotgiven',
    'classspecs::superclassreopenedbasicobject',
    'classspecs::superclassreopenedobject',
    'classspecs::superclassresettosubclass',
    'classspecs::twenty',
    'classspecsnumber',
    'classspecsnumber::myclass',
    'classvariablesspec',
    'classvariablesspec::classa',
    'classvariablesspec::classb',
    'classvariablesspec::classc',
    'classvariablesspec::modulem',
    'classvariablesspec::modulen',
    'classvariablesspec::moduleo',
    'clock',
    'codeloadingspecs',
    'codeloadingspecs::method',
    'codingus_ascii',
    'codingutf_8',
    'colorize',
    'commentstripper',
    'comparable',
    'comparablespecs',
    'comparablespecs::comparecallingsuper',
    'comparablespecs::weird',
    'comparablespecs::withonlycomparedefined',
    'comparablespecs::withoutcomparedefined',
    'complainmatcher',
    'complex',
    'complex::compatible',
    'conditionvariable',
    'constantspecs',
    'constantspecs::cs_singleton1',
    'constantspecs::childa',
    'constantspecs::classa',
    'constantspecs::classb',
    'constantspecs::classc',
    'constantspecs::classc::classe',
    'constantspecs::classd',
    'constantspecs::containera',
    'constantspecs::containerb',
    'constantspecs::containerb::childb',
    'constantspecs::modulea',
    'constantspecs::moduleb',
    'constantspecs::modulec',
    'constantspecs::moduled',
    'constantspecs::modulee',
    'constantspecs::modulef',
    'constantspecs::moduleg',
    'constantspecs::moduleh',
    'constantspecs::modulem',
    'constantspecs::parenta',
    'constantspecs::parentb',
    'constantspecs::specadded1',
    'constantspecs::obj',
    'constantspecs::obj::x',
    'constantvisibility',
    'constantvisibility::modulecontainer',
    'constantvisibility::modulecontainer::privateclass',
    'constantvisibility::modulecontainer::privatemodule',
    'constantvisibility::privconstclass',
    'constantvisibility::privconstclass::nested',
    'constantvisibility::privconstclasschild',
    'constantvisibility::privconstmodule',
    'constantvisibility::privconstmodule::nested',
    'constantvisibility::privconstmodulechild',
    'contextstate',
    'coreclassspecs',
    'coreclassspecs::a',
    'coreclassspecs::f',
    'coreclassspecs::h',
    'coreclassspecs::inherited',
    'coreclassspecs::inherited::a',
    'coreclassspecs::inherited::b',
    'coreclassspecs::inherited::c',
    'coreclassspecs::inherited::d',
    'coreclassspecs::m',
    'coreclassspecs::record',
    'coverage',
    'coveragespecs',
    'crlstore',
    'customargumenterror',
    'dbm',
    'debugger__',
    'dqentry',
    'drb',
    'drb::drbarray',
    'drb::drbbadscheme',
    'drb::drbbaduri',
    'drb::drbconn',
    'drb::drbconnerror',
    'drb::drberror',
    'drb::drbidconv',
    'drb::drbmessage',
    'drb::drbobject',
    'drb::drbobservable',
    'drb::drbprotocol',
    'drb::drbremoteerror',
    'drb::drbsslsocket',
    'drb::drbsslsocket::sslconfig',
    'drb::drbserver',
    'drb::drbserver::invokemethod18mixin',
    'drb::drbservernotfound',
    'drb::drbtcpsocket',
    'drb::drbunixsocket',
    'drb::drbundumped',
    'drb::drbunknown',
    'drb::drbunknownerror',
    'drb::extserv',
    'drb::extservmanager',
    'drb::gw',
    'drb::gwidconv',
    'drb::http0',
    'drb::http0::callback',
    'drb::http0::clientside',
    'drb::http0::server',
    'drb::http0::serverside',
    'drb::http0::strstream',
    'drb::timeridconv',
    'drb::timeridconv::timerholder2',
    'drb::timeridconv::timerholder2::invalidindexerror',
    'drbex',
    'drbex2',
    'drbex3',
    'drbex4',
    'drbnamedidconv',
    'data',
    'date',
    'datetime',
    'definitializespec',
    'defspec',
    'defspecnested',
    'defspecnestedb',
    'defspecsingleton',
    'definedspecs',
    'definedspecs::basic',
    'definedspecs::child',
    'definedspecs::classundefiningmethod',
    'definedspecs::classwithmethod',
    'definedspecs::classwithoutmethod',
    'definedspecs::intermediatemodule1',
    'definedspecs::intermediatemodule2',
    'definedspecs::mixin',
    'definedspecs::parent',
    'definedspecs::super',
    'definedspecs::superwithintermediatemodules',
    'definedspecs::superclass',
    'delegatespecs',
    'delegatespecs::delegateclass',
    'delegatespecs::delegator',
    'delegatespecs::extra',
    'delegatespecs::simple',
    'delegator',
    'demoapplication',
    'dhasen',
    'digest',
    'digest::base',
    'digest::class',
    'digest::instance',
    'digest::md5',
    'digest::rmd160',
    'digest::sha1',
    'digest::sha2',
    'dir',
    'dirspecs',
    'divmodspecs',
    'dog',
    'dottedformatter',
    'downloader',
    'downloader::gnu',
    'downloader::gems',
    'downloader::rubygems',
    'downloader::unicode',
    'env',
    'eoferror',
    'erb',
    'erb::defmethod',
    'erb::util',
    'emojitable',
    'encoding',
    'encoding::compatibilityerror',
    'encoding::converter',
    'encoding::converternotfounderror',
    'encoding::invalidbytesequenceerror',
    'encoding::undefinedconversionerror',
    'encodingspecs',
    'encodingspecs::invalidbytesequenceerror',
    'encodingspecs::invalidbytesequenceerrorindirect',
    'encodingspecs::undefinedconversionerror',
    'encodingspecs::undefinedconversionerrorindirect',
    'ensurespec',
    'ensurespec::container',
    'ensurespec::error',
    'ensurespec::test',
    'enumspecs',
    'enumspecs::numerous',
    'enumerable',
    'enumerablespecs',
    'enumerablespecs::arrayconvertable',
    'enumerablespecs::comparablewithfixnum',
    'enumerablespecs::comparesbyvowelcount',
    'enumerablespecs::eachcounter',
    'enumerablespecs::eachdefiner',
    'enumerablespecs::empty',
    'enumerablespecs::emptywithsize',
    'enumerablespecs::enumconvertable',
    'enumerablespecs::equals',
    'enumerablespecs::freezy',
    'enumerablespecs::invalidcomparable',
    'enumerablespecs::mapreturnsenumerable',
    'enumerablespecs::mapreturnsenumerable::enumerablemapping',
    'enumerablespecs::noeach',
    'enumerablespecs::numerous',
    'enumerablespecs::numerouswithsize',
    'enumerablespecs::pattern',
    'enumerablespecs::reversecomparable',
    'enumerablespecs::sortbydummy',
    'enumerablespecs::throwingeach',
    'enumerablespecs::uncomparable',
    'enumerablespecs::undupable',
    'enumerablespecs::yieldsmixed',
    'enumerablespecs::yieldsmixed2',
    'enumerablespecs::yieldsmulti',
    'enumerablespecs::yieldsmultiwithfalse',
    'enumerablespecs::yieldsmultiwithsingletrue',
    'enumerator',
    'enumerator::generator',
    'enumerator::lazy',
    'enumerator::yielder',
    'enumeratorlazyspecs',
    'enumeratorlazyspecs::eventsmixed',
    'enumeratorlazyspecs::specificerror',
    'enumeratorlazyspecs::yieldsmixed',
    'enumeratorspecs',
    'enumeratorspecs::feed',
    'eqlmatcher',
    'equalelementmatcher',
    'equalmatcher',
    'errno',
    'errno::eagain',
    'errno::econnaborted',
    'errno::econnreset',
    'errno::einval',
    'errno::eproto',
    'errno::ewouldblock',
    'etc',
    'evalspecs',
    'evalspecs::a',
    'evalspecs::coercedobject',
    'examplestate',
    'exception',
    'exception2messagemapper',
    'exception2messagemapper::e2mm',
    'exceptionspecs',
    'exceptionspecs::backtrace',
    'exceptionspecs::constructorexception',
    'exceptionspecs::emptytos',
    'exceptionspecs::exceptional',
    'exceptionspecs::overridetos',
    'exceptionspecs::unexceptional',
    'exceptionstate',
    'exports',
    'exports::cygwin',
    'exports::mingw',
    'exports::mswin',
    'extarray',
    'extlibs',
    'featureguard',
    'fiber',
    'fiddle',
    'fiddle::basictypes',
    'fiddle::cparser',
    'fiddle::cstruct',
    'fiddle::cstructbuilder',
    'fiddle::cstructentity',
    'fiddle::cunion',
    'fiddle::cunionentity',
    'fiddle::closure',
    'fiddle::closure::blockcaller',
    'fiddle::compositehandler',
    'fiddle::dlerror',
    'fiddle::function',
    'fiddle::handle',
    'fiddle::importer',
    'fiddle::pointer',
    'fiddle::win32types',
    'file',
    'file::constants',
    'file::stat',
    'fileformatter',
    'filespecs',
    'filespecs::substring',
    'filestat',
    'fileutils',
    'fileutils::dryrun',
    'fileutils::lowmethods',
    'fileutils::nowrite',
    'fileutils::streamutils_',
    'fileutils::verbose',
    'find',
    'finddirspecs',
    'fixnum',
    'float',
    'floatspecs',
    'floatspecs::cancoerce',
    'foo',
    'foo::unknown',
    'foobar',
    'front',
    'gc',
    'gc::profiler',
    'gdbm',
    'gem',
    'gem::availableset',
    'gem::basicspecification',
    'gem::bundlerversionfinder',
    'gem::command',
    'gem::commandlineerror',
    'gem::commandmanager',
    'gem::commands',
    'gem::commands::buildcommand',
    'gem::commands::certcommand',
    'gem::commands::checkcommand',
    'gem::commands::cleanupcommand',
    'gem::commands::contentscommand',
    'gem::commands::dependencycommand',
    'gem::commands::environmentcommand',
    'gem::commands::fetchcommand',
    'gem::commands::generateindexcommand',
    'gem::commands::helpcommand',
    'gem::commands::installcommand',
    'gem::commands::listcommand',
    'gem::commands::lockcommand',
    'gem::commands::mirrorcommand',
    'gem::commands::opencommand',
    'gem::commands::outdatedcommand',
    'gem::commands::ownercommand',
    'gem::commands::pristinecommand',
    'gem::commands::pushcommand',
    'gem::commands::querycommand',
    'gem::commands::rdoccommand',
    'gem::commands::searchcommand',
    'gem::commands::servercommand',
    'gem::commands::setupcommand',
    'gem::commands::signincommand',
    'gem::commands::signoutcommand',
    'gem::commands::sourcescommand',
    'gem::commands::specificationcommand',
    'gem::commands::stalecommand',
    'gem::commands::uninstallcommand',
    'gem::commands::unpackcommand',
    'gem::commands::updatecommand',
    'gem::commands::whichcommand',
    'gem::commands::yankcommand',
    'gem::configfile',
    'gem::conflicterror',
    'gem::consoleui',
    'gem::defaultuserinteraction',
    'gem::dependency',
    'gem::dependencyerror',
    'gem::dependencyinstaller',
    'gem::dependencylist',
    'gem::dependencyremovalexception',
    'gem::dependencyresolutionerror',
    'gem::deprecate',
    'gem::doctor',
    'gem::documenterror',
    'gem::endofyamlexception',
    'gem::errorreason',
    'gem::exception',
    'gem::ext',
    'gem::ext::builderror',
    'gem::ext::builder',
    'gem::ext::cmakebuilder',
    'gem::ext::configurebuilder',
    'gem::ext::extconfbuilder',
    'gem::ext::rakebuilder',
    'gem::fakefetcher',
    'gem::filepermissionerror',
    'gem::formatexception',
    'gem::gemnotfoundexception',
    'gem::gemnotinhomeexception',
    'gem::gemrunner',
    'gem::gemcutterutilities',
    'gem::impossibledependencieserror',
    'gem::indexer',
    'gem::installerror',
    'gem::installupdateoptions',
    'gem::installer',
    'gem::installer::fakepackage',
    'gem::installertestcase',
    'gem::invalidspecificationexception',
    'gem::licenses',
    'gem::list',
    'gem::loaderror',
    'gem::localremoteoptions',
    'gem::missingspecerror',
    'gem::missingspecversionerror',
    'gem::mockgemui',
    'gem::mockgemui::inputeoferror',
    'gem::mockgemui::systemexitexception',
    'gem::mockgemui::tty',
    'gem::mockgemui::termerror',
    'gem::nametuple',
    'gem::noaliasyamltree',
    'gem::operationnotsupportederror',
    'gem::package',
    'gem::package::digestio',
    'gem::package::error',
    'gem::package::formaterror',
    'gem::package::nonseekableio',
    'gem::package::old',
    'gem::package::patherror',
    'gem::package::tarheader',
    'gem::package::tarinvaliderror',
    'gem::package::tarreader',
    'gem::package::tarreader::entry',
    'gem::package::tarreader::unexpectedeof',
    'gem::package::tartestcase',
    'gem::package::tarwriter',
    'gem::package::tarwriter::boundedstream',
    'gem::package::tarwriter::fileoverflow',
    'gem::package::tarwriter::restrictedstream',
    'gem::package::toolongfilename',
    'gem::packagetask',
    'gem::pathsupport',
    'gem::platform',
    'gem::platformmismatch',
    'gem::remoteerror',
    'gem::remotefetcher',
    'gem::remotefetcher::fetcherror',
    'gem::remotefetcher::unknownhosterror',
    'gem::remoteinstallationcancelled',
    'gem::remoteinstallationskipped',
    'gem::remotesourceexception',
    'gem::request',
    'gem::requestset',
    'gem::requestset::gemdependencyapi',
    'gem::requestset::lockfile',
    'gem::requestset::lockfile::parseerror',
    'gem::requestset::lockfile::parser',
    'gem::requestset::lockfile::tokenizer',
    'gem::requirement',
    'gem::requirement::badrequirementerror',
    'gem::resolver',
    'gem::resolver::apiset',
    'gem::resolver::apispecification',
    'gem::resolver::activationrequest',
    'gem::resolver::bestset',
    'gem::resolver::composedset',
    'gem::resolver::conflict',
    'gem::resolver::currentset',
    'gem::resolver::dependencyrequest',
    'gem::resolver::gitset',
    'gem::resolver::gitspecification',
    'gem::resolver::indexset',
    'gem::resolver::indexspecification',
    'gem::resolver::installedspecification',
    'gem::resolver::installerset',
    'gem::resolver::localspecification',
    'gem::resolver::lockset',
    'gem::resolver::lockspecification',
    'gem::resolver::molinillo',
    'gem::resolver::molinillo::circulardependencyerror',
    'gem::resolver::molinillo::delegates',
    'gem::resolver::molinillo::delegates::resolutionstate',
    'gem::resolver::molinillo::delegates::specificationprovider',
    'gem::resolver::molinillo::dependencygraph',
    'gem::resolver::molinillo::dependencygraph::action',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular',
    'gem::resolver::molinillo::dependencygraph::deleteedge',
    'gem::resolver::molinillo::dependencygraph::detachvertexnamed',
    'gem::resolver::molinillo::dependencygraph::log',
    'gem::resolver::molinillo::dependencygraph::tag',
    'gem::resolver::molinillo::dependencygraph::vertex',
    'gem::resolver::molinillo::dependencystate',
    'gem::resolver::molinillo::nosuchdependencyerror',
    'gem::resolver::molinillo::possibilitystate',
    'gem::resolver::molinillo::resolutionstate',
    'gem::resolver::molinillo::resolver',
    'gem::resolver::molinillo::resolver::resolution',
    'gem::resolver::molinillo::resolvererror',
    'gem::resolver::molinillo::specificationprovider',
    'gem::resolver::molinillo::ui',
    'gem::resolver::molinillo::versionconflict',
    'gem::resolver::requirementlist',
    'gem::resolver::set',
    'gem::resolver::sourceset',
    'gem::resolver::specspecification',
    'gem::resolver::specification',
    'gem::resolver::stats',
    'gem::resolver::vendorset',
    'gem::resolver::vendorspecification',
    'gem::rubyversionmismatch',
    'gem::runtimerequirementnotmeterror',
    'gem::safeyaml',
    'gem::security',
    'gem::security::exception',
    'gem::security::policy',
    'gem::security::signer',
    'gem::security::trustdir',
    'gem::securityoption',
    'gem::server',
    'gem::silentui',
    'gem::source',
    'gem::source::git',
    'gem::source::installed',
    'gem::source::local',
    'gem::source::lock',
    'gem::source::specificfile',
    'gem::source::vendor',
    'gem::sourcefetchproblem',
    'gem::sourcelist',
    'gem::specfetcher',
    'gem::specificgemnotfoundexception',
    'gem::specification',
    'gem::streamui',
    'gem::streamui::silentdownloadreporter',
    'gem::streamui::silentprogressreporter',
    'gem::streamui::simpleprogressreporter',
    'gem::streamui::verbosedownloadreporter',
    'gem::streamui::verboseprogressreporter',
    'gem::stubspecification',
    'gem::systemexitexception',
    'gem::testcase',
    'gem::testcase::specfetchersetup',
    'gem::testcase::staticset',
    'gem::text',
    'gem::uninstaller',
    'gem::unsatisfiabledependencyerror',
    'gem::uriformatter',
    'gem::userinteraction',
    'gem::util',
    'gem::validator',
    'gem::verificationerror',
    'gem::version',
    'gem::versionoption',
    'getoptlong',
    'getoptlong::ambiguousoption',
    'getoptlong::error',
    'getoptlong::invalidoption',
    'getoptlong::missingargument',
    'getoptlong::needlessargument',
    'gods',
    'himmspecs',
    'himmspecs::subclass',
    'hmmspecs',
    'hmmspecs::subclass',
    'hpimmspecs',
    'hpimmspecs::subclass',
    'hsmmspecs',
    'hash',
    'hashspecs',
    'hashspecs::byidentitykey',
    'hashspecs::byvaluekey',
    'hashspecs::defaulthash',
    'hashspecs::keywithprivatehash',
    'hashspecs::myhash',
    'hashspecs::myinitializerhash',
    'hashspecs::newhash',
    'hashspecs::tohashhash',
    'hashstringsascii8bit',
    'hashstringsusascii',
    'hashstringsutf8',
    'hi_exception',
    'hoge',
    'iehandler',
    'io',
    'io::eagainwaitreadable',
    'io::eagainwaitwritable',
    'io::einprogresswaitreadable',
    'io::einprogresswaitwritable',
    'io::ewouldblockwaitreadable',
    'io::ewouldblockwaitwritable',
    'io::waitreadable',
    'io::waitwritable',
    'io::generic_readable',
    'io::generic_writable',
    'iospecs',
    'iospecs::copystream',
    'iospecs::copystreamread',
    'iospecs::copystreamreadpartial',
    'iospecs::subio',
    'iostub',
    'ipaddr',
    'ipaddr::addressfamilyerror',
    'ipaddr::error',
    'ipaddr::invalidaddresserror',
    'ipaddr::invalidprefixerror',
    'ipsocket',
    'irb',
    'irb::abort',
    'irb::context',
    'irb::contextextender',
    'irb::extendcommand',
    'irb::extendcommand::changeworkspace',
    'irb::extendcommand::currentworkingworkspace',
    'irb::extendcommand::foreground',
    'irb::extendcommand::fork',
    'irb::extendcommand::help',
    'irb::extendcommand::irbcommand',
    'irb::extendcommand::jobs',
    'irb::extendcommand::kill',
    'irb::extendcommand::load',
    'irb::extendcommand::nop',
    'irb::extendcommand::popworkspace',
    'irb::extendcommand::pushworkspace',
    'irb::extendcommand::require',
    'irb::extendcommand::source',
    'irb::extendcommand::workspaces',
    'irb::extendcommandbundle',
    'irb::fileinputmethod',
    'irb::frame',
    'irb::inputmethod',
    'irb::inspector',
    'irb::irb',
    'irb::irbloader',
    'irb::jobmanager',
    'irb::loadabort',
    'irb::locale',
    'irb::methodextender',
    'irb::notifier',
    'irb::notifier::abstractnotifier',
    'irb::notifier::compositenotifier',
    'irb::notifier::levelednotifier',
    'irb::notifier::nomsgnotifier',
    'irb::outputmethod',
    'irb::readlineinputmethod',
    'irb::slex',
    'irb::slex::node',
    'irb::stdioinputmethod',
    'irb::stdiooutputmethod',
    'irb::workspace',
    'ivarmodmock',
    'includematcher',
    'infinitymatcher',
    'inspector',
    'integer',
    'isect',
    'itertest',
    'jisx0208',
    'jisx0208::char',
    'json',
    'json::circulardatastructure',
    'json::ext',
    'json::ext::generator',
    'json::ext::generator::generatormethods',
    'json::ext::generator::generatormethods::array',
    'json::ext::generator::generatormethods::bignum',
    'json::ext::generator::generatormethods::falseclass',
    'json::ext::generator::generatormethods::fixnum',
    'json::ext::generator::generatormethods::float',
    'json::ext::generator::generatormethods::hash',
    'json::ext::generator::generatormethods::integer',
    'json::ext::generator::generatormethods::nilclass',
    'json::ext::generator::generatormethods::object',
    'json::ext::generator::generatormethods::string',
    'json::ext::generator::generatormethods::string::extend',
    'json::ext::generator::generatormethods::trueclass',
    'json::ext::generator::state',
    'json::ext::parser',
    'json::generatorerror',
    'json::genericobject',
    'json::jsonerror',
    'json::missingunicodesupport',
    'json::nestingerror',
    'json::parsererror',
    'json::unparsererror',
    'junitformatter',
    'ksautoloadb',
    'ksautoloadc',
    'ksautoloadd',
    'kconv',
    'kernel',
    'kernelspecs',
    'kernelspecs::a',
    'kernelspecs::ancestorclass',
    'kernelspecs::ancestormodule',
    'kernelspecs::b',
    'kernelspecs::binding',
    'kernelspecs::blockgiven',
    'kernelspecs::c',
    'kernelspecs::calleetest',
    'kernelspecs::callerlocationstest',
    'kernelspecs::callertest',
    'kernelspecs::child',
    'kernelspecs::classmm',
    'kernelspecs::classnomm',
    'kernelspecs::clone',
    'kernelspecs::dup',
    'kernelspecs::duplicate',
    'kernelspecs::duplicatem',
    'kernelspecs::evaltest',
    'kernelspecs::foo',
    'kernelspecs::grandchild',
    'kernelspecs::instanceclass',
    'kernelspecs::instancevariable',
    'kernelspecs::kernelblockgiven',
    'kernelspecs::kindaclass',
    'kernelspecs::lambda',
    'kernelspecs::m',
    'kernelspecs::method',
    'kernelspecs::methodtest',
    'kernelspecs::methods',
    'kernelspecs::methods::metaclassmethods',
    'kernelspecs::modulemm',
    'kernelspecs::modulenomm',
    'kernelspecs::myextensionmodule',
    'kernelspecs::mymodule',
    'kernelspecs::notmatch',
    'kernelspecs::parent',
    'kernelspecs::parentmixin',
    'kernelspecs::privatesup',
    'kernelspecs::privatetoa',
    'kernelspecs::privatetoary',
    'kernelspecs::publicsub',
    'kernelspecs::respondviamissing',
    'kernelspecs::selfblockgiven',
    'kernelspecs::someothermodule',
    'kernelspecs::visibilitychange',
    'langsendspecs',
    'langsendspecs::attr19set',
    'langsendspecs::attrset',
    'langsendspecs::methodmissing',
    'langsendspecs::privategetter',
    'langsendspecs::privatesetter',
    'langsendspecs::toary',
    'langsendspecs::toproc',
    'languagespecs',
    'leakchecker',
    'lo_exception',
    'logger',
    'logger::formatter',
    'logger::logdevice',
    'logger::period',
    'logger::severity',
    'loggerspecs',
    'm',
    'md5constants',
    'md5constants::klass',
    'mosconfig',
    'mspec',
    'mspecmain',
    'mspecoption',
    'mspecoptions',
    'mspecoptions::optionerror',
    'mspecoptions::parseerror',
    'mspecrun',
    'mspecscript',
    'mspectag',
    'mainspecs',
    'mainspecs::module',
    'mainspecs::wrapincludemodule',
    'makemakefile',
    'makemakefile::logging',
    'makemakefile::string_or_failed_format',
    'mapitem',
    'marshal',
    'marshalspec',
    'marshalspec::basicobjectsubwithrespondtofalse',
    'marshalspec::structwithuserinitialize',
    'matchfilter',
    'matchyamlmatcher',
    'math',
    'math::domainerror',
    'mathspecs',
    'mathspecs::float',
    'mathspecs::integer',
    'mathspecs::stringsubclass',
    'mathspecs::userclass',
    'matrix',
    'matrix::eigenvaluedecomposition',
    'matrix::lupdecomposition',
    'matrixsub',
    'mdoc2man',
    'metaclassspecs',
    'metaclassspecs::a',
    'metaclassspecs::b',
    'metaclassspecs::c',
    'metaclassspecs::d',
    'method',
    'methodformatter',
    'methodmatcher',
    'methodspecs',
    'methodspecs::a',
    'methodspecs::b',
    'methodspecs::betweenbandc',
    'methodspecs::c',
    'methodspecs::d',
    'methodspecs::eql',
    'methodspecs::eql2',
    'methodspecs::methods',
    'methodspecs::mymod',
    'methodspecs::mysub',
    'methodspecs::mysuper',
    'methodspecs::overrideagain',
    'methodspecs::sourcelocation',
    'methodspecs::toproc',
    'methodspecs::toprocbeta',
    'microsoft_freethreadedxmldom_1_0',
    'microsoft_xmldom_1_0',
    'microsoft_xmldso_1_0',
    'microsoft_xmlhttp_1',
    'mixin',
    'mkspec',
    'mock',
    'mockintobject',
    'mockobject',
    'mockproxy',
    'module',
    'modulespecs',
    'modulespecs::a',
    'modulespecs::addconstant',
    'modulespecs::alias',
    'modulespecs::aliasing',
    'modulespecs::aliasingsubclass',
    'modulespecs::aliasingsuper',
    'modulespecs::aliasingsuper::child',
    'modulespecs::aliasingsuper::parent',
    'modulespecs::aliasingsuper::redefineafteralias',
    'modulespecs::aliasingsuper::target',
    'modulespecs::allonym',
    'modulespecs::alreadyinc',
    'modulespecs::alreadyinc::k',
    'modulespecs::alreadyinc::m',
    'modulespecs::alreadyinc::m0',
    'modulespecs::ancestor',
    'modulespecs::anonymous',
    'modulespecs::autoload',
    'modulespecs::autoload::dynclass',
    'modulespecs::autoload::dynclass::c',
    'modulespecs::autoload::dynmodule',
    'modulespecs::autoload::dynmodule::d',
    'modulespecs::autoload::e',
    'modulespecs::autoload::ex1',
    'modulespecs::autoload::f',
    'modulespecs::autoload::fromthread',
    'modulespecs::autoload::fromthread::a',
    'modulespecs::autoload::fromthread::a::b',
    'modulespecs::autoload::fromthread::a::b::c',
    'modulespecs::autoload::fromthread::d',
    'modulespecs::autoload::g',
    'modulespecs::autoload::gsub',
    'modulespecs::autoload::h',
    'modulespecs::autoload::hclass',
    'modulespecs::autoload::khash',
    'modulespecs::autoload::loadpath',
    'modulespecs::autoload::pp',
    'modulespecs::autoload::pp::qq',
    'modulespecs::autoload::q',
    'modulespecs::autoload::r',
    'modulespecs::autoload::s',
    'modulespecs::autoload::u',
    'modulespecs::autoload::u::v',
    'modulespecs::autoload::w',
    'modulespecs::autoload::w::y',
    'modulespecs::autoload::xx',
    'modulespecs::autoload::xx::yy',
    'modulespecs::autoload::yy',
    'modulespecs::autoload::z',
    'modulespecs::autoload::zz',
    'modulespecs::b',
    'modulespecs::basic',
    'modulespecs::c',
    'modulespecs::cvars',
    'modulespecs::casecompareonsingleton',
    'modulespecs::child',
    'modulespecs::child2',
    'modulespecs::childprivatemethodmadepublic',
    'modulespecs::classevaltest',
    'modulespecs::classvars',
    'modulespecs::classvars::a',
    'modulespecs::classvars::b',
    'modulespecs::classvars::m',
    'modulespecs::classwithfoo',
    'modulespecs::countschild',
    'modulespecs::countsmixin',
    'modulespecs::countsparent',
    'modulespecs::cyclicappenda',
    'modulespecs::cyclicappendb',
    'modulespecs::cyclicbarrier',
    'modulespecs::cyclicprepend',
    'modulespecs::detached',
    'modulespecs::extendobject',
    'modulespecs::extendobjectprivate',
    'modulespecs::first',
    'modulespecs::grandchild',
    'modulespecs::includedinobject',
    'modulespecs::includedinobject::includedmodulespecs',
    'modulespecs::includedmodule',
    'modulespecs::instancemeth',
    'modulespecs::instancemethchild',
    'modulespecs::instancemethmod',
    'modulespecs::internal',
    'modulespecs::lookup',
    'modulespecs::lookupchild',
    'modulespecs::lookupmod',
    'modulespecs::lookupmodinmod',
    'modulespecs::m',
    'modulespecs::m1',
    'modulespecs::m1::a',
    'modulespecs::m1::b',
    'modulespecs::m1::m',
    'modulespecs::m1::u',
    'modulespecs::m1::v',
    'modulespecs::m1::w',
    'modulespecs::m1::x',
    'modulespecs::m1::y',
    'modulespecs::m2',
    'modulespecs::m2::m1',
    'modulespecs::m2::m2',
    'modulespecs::m2::m3',
    'modulespecs::m3',
    'modulespecs::m3::c',
    'modulespecs::m3::m1',
    'modulespecs::m3::m2',
    'modulespecs::m3::pm1',
    'modulespecs::m3::pm2',
    'modulespecs::ma',
    'modulespecs::mb',
    'modulespecs::mc',
    'modulespecs::mvars',
    'modulespecs::modules',
    'modulespecs::modules::a',
    'modulespecs::modules::b',
    'modulespecs::modules::c',
    'modulespecs::modules::d',
    'modulespecs::modules::klass',
    'modulespecs::multipleincludes',
    'modulespecs::nameencoding',
    'modulespecs::nameencoding::modulespecs::nameencoding::cß',
    'modulespecs::nested',
    'modulespecs::nesting',
    'modulespecs::nesting::nestedclass',
    'modulespecs::p',
    'modulespecs::parent',
    'modulespecs::parentprivatemethodredef',
    'modulespecs::prependedmodule',
    'modulespecs::privconstmodule',
    'modulespecs::recordincludedmodules',
    'modulespecs::removeclassvariable',
    'modulespecs::reopeningmodule',
    'modulespecs::second',
    'modulespecs::shadowingouter',
    'modulespecs::shadowingouter::m',
    'modulespecs::shadowingouter::n',
    'modulespecs::singletononmodulecase',
    'modulespecs::singletononmodulecase::bar',
    'modulespecs::singletononmodulecase::foo',
    'modulespecs::submodule',
    'modulespecs::subclass',
    'modulespecs::subclassspec',
    'modulespecs::super',
    'modulespecs::super::superchild',
    'modulespecs::threadsafecounter',
    'modulespecs::unboundmethodtest',
    'modulespecs::z',
    'monitor',
    'monitormixin',
    'monitormixin::conditionvariable',
    'monitormixin::conditionvariable::timeout',
    'msxml',
    'multiformatter',
    'mutex',
    'myapp',
    'myclass1forerb_',
    'myclass4forerb',
    'myelem',
    'nkf',
    'nameerror',
    'nameerrorspecs',
    'nameerrorspecs::receiverclass',
    'namemap',
    'namemapspecs',
    'namemapspecs::a',
    'namemapspecs::a::b',
    'namemapspecs::error',
    'namemapspecs::fixnum',
    'net',
    'net::apop',
    'net::apopsession',
    'net::ftp',
    'net::ftp::bufferedsslsocket',
    'net::ftp::bufferedsocket',
    'net::ftp::mlsxentry',
    'net::ftp::nullsocket',
    'net::ftpconnectionerror',
    'net::ftperror',
    'net::ftppermerror',
    'net::ftpprotoerror',
    'net::ftpreplyerror',
    'net::ftptemperror',
    'net::http',
    'net::http::copy',
    'net::http::delete',
    'net::http::get',
    'net::http::head',
    'net::http::lock',
    'net::http::mkcol',
    'net::http::move',
    'net::http::options',
    'net::http::patch',
    'net::http::post',
    'net::http::propfind',
    'net::http::proppatch',
    'net::http::put',
    'net::http::trace',
    'net::http::unlock',
    'net::httpaccepted',
    'net::httpalreadyreported',
    'net::httpbadgateway',
    'net::httpbadrequest',
    'net::httpbadresponse',
    'net::httpclienterror',
    'net::httpconflict',
    'net::httpcontinue',
    'net::httpcreated',
    'net::httperror',
    'net::httpexceptions',
    'net::httpexpectationfailed',
    'net::httpfaileddependency',
    'net::httpfatalerror',
    'net::httpforbidden',
    'net::httpfound',
    'net::httpgatewaytimeout',
    'net::httpgenericrequest',
    'net::httpgone',
    'net::httpheader',
    'net::httpheadersyntaxerror',
    'net::httpimused',
    'net::httpinformation',
    'net::httpinsufficientstorage',
    'net::httpinternalservererror',
    'net::httplengthrequired',
    'net::httplocked',
    'net::httploopdetected',
    'net::httpmethodnotallowed',
    'net::httpmisdirectedrequest',
    'net::httpmovedpermanently',
    'net::httpmultistatus',
    'net::httpmultiplechoices',
    'net::httpnetworkauthenticationrequired',
    'net::httpnocontent',
    'net::httpnonauthoritativeinformation',
    'net::httpnotacceptable',
    'net::httpnotextended',
    'net::httpnotfound',
    'net::httpnotimplemented',
    'net::httpnotmodified',
    'net::httpok',
    'net::httppartialcontent',
    'net::httppaymentrequired',
    'net::httppermanentredirect',
    'net::httppreconditionfailed',
    'net::httppreconditionrequired',
    'net::httpprocessing',
    'net::httpproxyauthenticationrequired',
    'net::httpredirection',
    'net::httprequest',
    'net::httprequestentitytoolarge',
    'net::httprequestheaderfieldstoolarge',
    'net::httprequesttimeout',
    'net::httprequesturitoolong',
    'net::httprequestedrangenotsatisfiable',
    'net::httpresetcontent',
    'net::httpresponse',
    'net::httpretriableerror',
    'net::httpseeother',
    'net::httpservererror',
    'net::httpserverexception',
    'net::httpserviceunavailable',
    'net::httpsuccess',
    'net::httpswitchprotocol',
    'net::httptemporaryredirect',
    'net::httptoomanyrequests',
    'net::httpunauthorized',
    'net::httpunavailableforlegalreasons',
    'net::httpunknownresponse',
    'net::httpunprocessableentity',
    'net::httpunsupportedmediatype',
    'net::httpupgraderequired',
    'net::httpuseproxy',
    'net::httpvariantalsonegotiates',
    'net::httpversionnotsupported',
    'net::imap',
    'net::imap::badresponseerror',
    'net::imap::bodytypeattachment',
    'net::imap::bodytypebasic',
    'net::imap::bodytypeextension',
    'net::imap::bodytypemessage',
    'net::imap::bodytypemultipart',
    'net::imap::bodytypetext',
    'net::imap::byeresponseerror',
    'net::imap::crammd5authenticator',
    'net::imap::dataformaterror',
    'net::imap::digestmd5authenticator',
    'net::imap::error',
    'net::imap::flagcounterror',
    'net::imap::loginauthenticator',
    'net::imap::noresponseerror',
    'net::imap::numvalidator',
    'net::imap::plainauthenticator',
    'net::imap::responseerror',
    'net::imap::responseparseerror',
    'net::opentimeout',
    'net::pop3',
    'net::popauthenticationerror',
    'net::popbadresponse',
    'net::poperror',
    'net::popmail',
    'net::protoautherror',
    'net::protocommanderror',
    'net::protofatalerror',
    'net::protoretriableerror',
    'net::protoservererror',
    'net::protosyntaxerror',
    'net::protounknownerror',
    'net::protocretryerror',
    'net::protocolerror',
    'net::readtimeout',
    'net::smtp',
    'net::smtp::response',
    'net::smtpauthenticationerror',
    'net::smtperror',
    'net::smtpfatalerror',
    'net::smtpserverbusy',
    'net::smtpsyntaxerror',
    'net::smtpunknownerror',
    'net::smtpunsupportedcommand',
    'net::writeadapter',
    'netftpspecs',
    'netftpspecs::dummyftp',
    'nethttpexceptionsspecs',
    'nethttpexceptionsspecs::simple',
    'nethttpheaderspecs',
    'nethttpheaderspecs::example',
    'nethttprequestspecs',
    'nethttprequestspecs::testrequest',
    'nethttpspecs',
    'nethttpspecs::nullwriter',
    'nethttpspecs::requestbasicauthservlet',
    'nethttpspecs::requestbodyservlet',
    'nethttpspecs::requestheaderservlet',
    'nethttpspecs::requestservlet',
    'nethttpspecs::specservlet',
    'nextspecs',
    'nextspecs::block',
    'nomethoderror',
    'nomethoderrorspecs',
    'nomethoderrorspecs::nomethoderrora',
    'nomethoderrorspecs::nomethoderrorb',
    'nomethoderrorspecs::nomethoderrorc',
    'nomethoderrorspecs::nomethoderrord',
    'notify',
    'nthtoggle',
    'num2int',
    'numeric',
    'numericmockobject',
    'numericspecs',
    'numericspecs::comparison',
    'numericspecs::subclass',
    'oleproperty',
    'object',
    'object::capimodulespecsmodulea',
    'object::constantspecs',
    'object::constantspecs::containera',
    'object::constantspecs::containera::childa',
    'object::constantspecs::containerb',
    'object::constantspecs::containerb::childb',
    'object::importer',
    'object::parseerror',
    'object::timeouterror',
    'objectspace',
    'objectspace::internalobjectwrapper',
    'objectspace::weakmap',
    'objectspacefixtures',
    'objectspacefixtures::objecttobefound',
    'objectspacefixtures::objectwithinstancevariable',
    'objectspecdup',
    'objectspecdupinitcopy',
    'objecttest',
    'observercallbackspecs',
    'open3',
    'openssl',
    'openssl::asn1',
    'openssl::asn1::asn1data',
    'openssl::asn1::asn1error',
    'openssl::asn1::constructive',
    'openssl::asn1::objectid',
    'openssl::asn1::primitive',
    'openssl::bn',
    'openssl::bnerror',
    'openssl::buffering',
    'openssl::cipher',
    'openssl::cipher::cipher',
    'openssl::cipher::ciphererror',
    'openssl::config',
    'openssl::configerror',
    'openssl::digest',
    'openssl::digest::digesterror',
    'openssl::engine',
    'openssl::engine::engineerror',
    'openssl::extconfig',
    'openssl::hmac',
    'openssl::hmacerror',
    'openssl::kdf',
    'openssl::kdf::kdferror',
    'openssl::netscape',
    'openssl::netscape::spki',
    'openssl::netscape::spkierror',
    'openssl::ocsp',
    'openssl::ocsp::basicresponse',
    'openssl::ocsp::certificateid',
    'openssl::ocsp::ocsperror',
    'openssl::ocsp::request',
    'openssl::ocsp::response',
    'openssl::ocsp::singleresponse',
    'openssl::opensslerror',
    'openssl::pkcs12',
    'openssl::pkcs12::pkcs12error',
    'openssl::pkcs5',
    'openssl::pkcs7',
    'openssl::pkcs7::pkcs7error',
    'openssl::pkcs7::recipientinfo',
    'openssl::pkcs7::signerinfo',
    'openssl::pkey',
    'openssl::pkey::dh',
    'openssl::pkey::dherror',
    'openssl::pkey::dsa',
    'openssl::pkey::dsaerror',
    'openssl::pkey::ec',
    'openssl::pkey::ec::group',
    'openssl::pkey::ec::group::error',
    'openssl::pkey::ec::point',
    'openssl::pkey::ec::point::error',
    'openssl::pkey::ecerror',
    'openssl::pkey::pkey',
    'openssl::pkey::pkeyerror',
    'openssl::pkey::rsa',
    'openssl::pkey::rsaerror',
    'openssl::random',
    'openssl::random::randomerror',
    'openssl::ssl',
    'openssl::ssl::sslcontext',
    'openssl::ssl::sslerror',
    'openssl::ssl::sslerrorwaitreadable',
    'openssl::ssl::sslerrorwaitwritable',
    'openssl::ssl::sslserver',
    'openssl::ssl::sslsocket',
    'openssl::ssl::session',
    'openssl::ssl::session::sessionerror',
    'openssl::ssl::socketforwarder',
    'openssl::x509',
    'openssl::x509::attribute',
    'openssl::x509::attributeerror',
    'openssl::x509::crl',
    'openssl::x509::crlerror',
    'openssl::x509::certificate',
    'openssl::x509::certificateerror',
    'openssl::x509::extension',
    'openssl::x509::extensionerror',
    'openssl::x509::extensionfactory',
    'openssl::x509::name',
    'openssl::x509::name::rfc2253dn',
    'openssl::x509::nameerror',
    'openssl::x509::request',
    'openssl::x509::requesterror',
    'openssl::x509::revoked',
    'openssl::x509::revokederror',
    'openssl::x509::store',
    'openssl::x509::storecontext',
    'openssl::x509::storeerror',
    'openstruct',
    'openstructspecs',
    'openstructspecs::openstructsub',
    'openuri',
    'openuri::httperror',
    'openuri::httpredirect',
    'openuri::meta',
    'openuri::openread',
    'optionparser',
    'optionparser::ac',
    'optionparser::acceptables',
    'optionparser::ambiguousargument',
    'optionparser::ambiguousoption',
    'optionparser::arguable',
    'optionparser::completinghash',
    'optionparser::completion',
    'optionparser::invalidargument',
    'optionparser::invalidoption',
    'optionparser::list',
    'optionparser::missingargument',
    'optionparser::needlessargument',
    'optionparser::optionmap',
    'optionparser::parseerror',
    'optionparser::switch',
    'optionparser::switch::noargument',
    'optionparser::switch::optionalargument',
    'optionparser::switch::placedargument',
    'optionparser::switch::requiredargument',
    'outputmatcher',
    'outputtofdmatcher',
    'pkcs7',
    'pkey',
    'pp',
    'pp::ppmethods',
    'pstore',
    'pstore::error',
    'pty',
    'pty::childexited',
    'parent',
    'pathname',
    'pidigitspigot',
    'piece',
    'plane',
    'planet',
    'platformguard',
    'point',
    'precedencespecs',
    'precedencespecs::nonunaryoptest',
    'prettyprint',
    'prettyprint::singleline',
    'prime',
    'prime::eratosthenesgenerator',
    'prime::eratosthenessieve',
    'prime::generator23',
    'prime::pseudoprimegenerator',
    'prime::trialdivision',
    'prime::trialdivisiongenerator',
    'private',
    'private::a',
    'private::b',
    'private::b::c',
    'private::d',
    'private::e',
    'private::g',
    'private::h',
    'proc',
    'procspecs',
    'procspecs::arity',
    'procspecs::myproc',
    'procspecs::myproc2',
    'procspecs::procsubclass',
    'procspecs::sourcelocation',
    'procspecs::toaryasnil',
    'process',
    'process::gid',
    'process::status',
    'process::sys',
    'process::uid',
    'process::waiter',
    'processspecs',
    'processspecs::daemon',
    'processspecs::daemonizer',
    'processspecs::signalizer',
    'profilefilter',
    'profileformatter',
    'progress',
    'progress::rotator',
    'psych',
    'psych::badalias',
    'psych::classloader',
    'psych::classloader::restricted',
    'psych::coder',
    'psych::disallowedclass',
    'psych::emitter',
    'psych::exception',
    'psych::handler',
    'psych::handler::dumperoptions',
    'psych::handlers',
    'psych::handlers::recorder',
    'psych::json',
    'psych::json::stream',
    'psych::json::treebuilder',
    'psych::nodes',
    'psych::nodes::alias',
    'psych::nodes::document',
    'psych::nodes::mapping',
    'psych::nodes::node',
    'psych::nodes::scalar',
    'psych::nodes::sequence',
    'psych::nodes::stream',
    'psych::omap',
    'psych::parser',
    'psych::parser::mark',
    'psych::scalarscanner',
    'psych::set',
    'psych::stream',
    'psych::streaming',
    'psych::streaming::classmethods',
    'psych::syntaxerror',
    'psych::treebuilder',
    'psych::visitors',
    'psych::visitors::depthfirst',
    'psych::visitors::emitter',
    'psych::visitors::jsontree',
    'psych::visitors::noaliasruby',
    'psych::visitors::toruby',
    'psych::visitors::visitor',
    'psych::visitors::yamltree',
    'queue',
    'rdoc',
    'rdoc::alias',
    'rdoc::anonclass',
    'rdoc::anymethod',
    'rdoc::attr',
    'rdoc::classmodule',
    'rdoc::codeobject',
    'rdoc::comment',
    'rdoc::constant',
    'rdoc::context',
    'rdoc::context::section',
    'rdoc::crossreference',
    'rdoc::erbio',
    'rdoc::erbpartial',
    'rdoc::encoding',
    'rdoc::error',
    'rdoc::extend',
    'rdoc::generator',
    'rdoc::generator::darkfish',
    'rdoc::generator::jsonindex',
    'rdoc::generator::markup',
    'rdoc::generator::pot',
    'rdoc::generator::pot::messageextractor',
    'rdoc::generator::pot::po',
    'rdoc::generator::pot::poentry',
    'rdoc::generator::ri',
    'rdoc::ghostmethod',
    'rdoc::i18n',
    'rdoc::i18n::locale',
    'rdoc::i18n::text',
    'rdoc::include',
    'rdoc::markdown',
    'rdoc::markdown::literals',
    'rdoc::markdown::literals::memoentry',
    'rdoc::markdown::literals::parseerror',
    'rdoc::markdown::literals::ruleinfo',
    'rdoc::markdown::memoentry',
    'rdoc::markdown::parseerror',
    'rdoc::markdown::ruleinfo',
    'rdoc::markup',
    'rdoc::markup::attrchanger',
    'rdoc::markup::attrspan',
    'rdoc::markup::attributemanager',
    'rdoc::markup::attributes',
    'rdoc::markup::blankline',
    'rdoc::markup::blockquote',
    'rdoc::markup::document',
    'rdoc::markup::formatter',
    'rdoc::markup::formattertestcase',
    'rdoc::markup::hardbreak',
    'rdoc::markup::include',
    'rdoc::markup::indentedparagraph',
    'rdoc::markup::list',
    'rdoc::markup::listitem',
    'rdoc::markup::paragraph',
    'rdoc::markup::parser',
    'rdoc::markup::parser::error',
    'rdoc::markup::parser::parseerror',
    'rdoc::markup::preprocess',
    'rdoc::markup::raw',
    'rdoc::markup::rule',
    'rdoc::markup::special',
    'rdoc::markup::textformattertestcase',
    'rdoc::markup::toansi',
    'rdoc::markup::tobs',
    'rdoc::markup::tohtml',
    'rdoc::markup::tohtmlcrossref',
    'rdoc::markup::tohtmlsnippet',
    'rdoc::markup::tojoinedparagraph',
    'rdoc::markup::tolabel',
    'rdoc::markup::tomarkdown',
    'rdoc::markup::tordoc',
    'rdoc::markup::totableofcontents',
    'rdoc::markup::totest',
    'rdoc::markup::tottonly',
    'rdoc::markup::verbatim',
    'rdoc::metamethod',
    'rdoc::methodattr',
    'rdoc::mixin',
    'rdoc::normalclass',
    'rdoc::normalmodule',
    'rdoc::options',
    'rdoc::parser',
    'rdoc::parser::c',
    'rdoc::parser::changelog',
    'rdoc::parser::markdown',
    'rdoc::parser::rd',
    'rdoc::parser::ruby',
    'rdoc::parser::rubytools',
    'rdoc::parser::simple',
    'rdoc::parser::text',
    'rdoc::rd',
    'rdoc::rd::blockparser',
    'rdoc::rd::inline',
    'rdoc::rd::inlineparser',
    'rdoc::rdoc',
    'rdoc::ri',
    'rdoc::ri::driver',
    'rdoc::ri::driver::error',
    'rdoc::ri::driver::notfounderror',
    'rdoc::ri::error',
    'rdoc::ri::paths',
    'rdoc::ri::task',
    'rdoc::require',
    'rdoc::ripperstatelex',
    'rdoc::ripperstatelex::innerstatelex',
    'rdoc::rubygemshook',
    'rdoc::servlet',
    'rdoc::singleclass',
    'rdoc::stats',
    'rdoc::stats::normal',
    'rdoc::stats::quiet',
    'rdoc::stats::verbose',
    'rdoc::store',
    'rdoc::store::error',
    'rdoc::store::missingfileerror',
    'rdoc::task',
    'rdoc::testcase',
    'rdoc::text',
    'rdoc::tokenstream',
    'rdoc::tomdoc',
    'rdoc::toplevel',
    'rexml',
    'rexml::attlistdecl',
    'rexml::attribute',
    'rexml::attributes',
    'rexml::cdata',
    'rexml::child',
    'rexml::comment',
    'rexml::dtd',
    'rexml::dtd::attlistdecl',
    'rexml::dtd::elementdecl',
    'rexml::dtd::entitydecl',
    'rexml::dtd::notationdecl',
    'rexml::dtd::parser',
    'rexml::declaration',
    'rexml::doctype',
    'rexml::document',
    'rexml::element',
    'rexml::elementdecl',
    'rexml::elements',
    'rexml::encoding',
    'rexml::entity',
    'rexml::entityconst',
    'rexml::externalentity',
    'rexml::formatters',
    'rexml::formatters::default',
    'rexml::formatters::pretty',
    'rexml::formatters::transitive',
    'rexml::functions',
    'rexml::iosource',
    'rexml::instruction',
    'rexml::light',
    'rexml::light::node',
    'rexml::namespace',
    'rexml::node',
    'rexml::notationdecl',
    'rexml::output',
    'rexml::parent',
    'rexml::parseexception',
    'rexml::parsers',
    'rexml::parsers::baseparser',
    'rexml::parsers::lightparser',
    'rexml::parsers::pullevent',
    'rexml::parsers::pullparser',
    'rexml::parsers::sax2parser',
    'rexml::parsers::streamparser',
    'rexml::parsers::treeparser',
    'rexml::parsers::ultralightparser',
    'rexml::parsers::xpathparser',
    'rexml::quickpath',
    'rexml::sax2listener',
    'rexml::security',
    'rexml::source',
    'rexml::sourcefactory',
    'rexml::streamlistener',
    'rexml::syncenumerator',
    'rexml::text',
    'rexml::undefinednamespaceexception',
    'rexml::validation',
    'rexml::validation::choice',
    'rexml::validation::event',
    'rexml::validation::interleave',
    'rexml::validation::oneormore',
    'rexml::validation::optional',
    'rexml::validation::ref',
    'rexml::validation::relaxng',
    'rexml::validation::sequence',
    'rexml::validation::state',
    'rexml::validation::validationexception',
    'rexml::validation::validator',
    'rexml::validation::zeroormore',
    'rexml::xmldecl',
    'rexml::xmltokens',
    'rexml::xpath',
    'rexml::xpathparser',
    'rss',
    'rss::atom',
    'rss::atom::commonmodel',
    'rss::atom::contentmodel',
    'rss::atom::contentmodel::classmethods',
    'rss::atom::dateconstruct',
    'rss::atom::duplicatelinkchecker',
    'rss::atom::entry',
    'rss::atom::feed',
    'rss::atom::feed::author',
    'rss::atom::feed::category',
    'rss::atom::feed::contributor',
    'rss::atom::feed::entry',
    'rss::atom::feed::entry::content',
    'rss::atom::feed::entry::published',
    'rss::atom::feed::entry::source',
    'rss::atom::feed::entry::summary',
    'rss::atom::feed::generator',
    'rss::atom::feed::icon',
    'rss::atom::feed::id',
    'rss::atom::feed::link',
    'rss::atom::feed::logo',
    'rss::atom::feed::rights',
    'rss::atom::feed::subtitle',
    'rss::atom::feed::title',
    'rss::atom::feed::updated',
    'rss::atom::personconstruct',
    'rss::atom::personconstruct::email',
    'rss::atom::personconstruct::name',
    'rss::atom::personconstruct::uri',
    'rss::atom::textconstruct',
    'rss::atom::uricontentmodel',
    'rss::basedublincoremodel',
    'rss::baselistener',
    'rss::basemodel',
    'rss::baseparser',
    'rss::basetrackbackmodel',
    'rss::contentmodel',
    'rss::conversionerror',
    'rss::converter',
    'rss::dublincoremodel',
    'rss::element',
    'rss::error',
    'rss::itunesbasemodel',
    'rss::ituneschannelmodel',
    'rss::ituneschannelmodel::itunescategory',
    'rss::ituneschannelmodel::itunesimage',
    'rss::ituneschannelmodel::itunesowner',
    'rss::itunesitemmodel',
    'rss::itunesitemmodel::itunesduration',
    'rss::itunesmodelutils',
    'rss::imagefaviconmodel',
    'rss::imagefaviconmodel::imagefavicon',
    'rss::imageitemmodel',
    'rss::imageitemmodel::imageitem',
    'rss::imagemodelutils',
    'rss::invalidrsserror',
    'rss::listenermixin',
    'rss::maker',
    'rss::maker::atom',
    'rss::maker::atom::entry',
    'rss::maker::atom::entry::channel',
    'rss::maker::atom::entry::channel::cloud',
    'rss::maker::atom::entry::channel::description',
    'rss::maker::atom::entry::channel::generator',
    'rss::maker::atom::entry::channel::skipdays',
    'rss::maker::atom::entry::channel::skipdays::day',
    'rss::maker::atom::entry::channel::skiphours',
    'rss::maker::atom::entry::channel::skiphours::hour',
    'rss::maker::atom::entry::image',
    'rss::maker::atom::entry::items',
    'rss::maker::atom::entry::items::item',
    'rss::maker::atom::entry::textinput',
    'rss::maker::atom::feed',
    'rss::maker::atom::feed::channel',
    'rss::maker::atom::feed::channel::categories',
    'rss::maker::atom::feed::channel::categories::category',
    'rss::maker::atom::feed::channel::cloud',
    'rss::maker::atom::feed::channel::generator',
    'rss::maker::atom::feed::channel::links',
    'rss::maker::atom::feed::channel::links::link',
    'rss::maker::atom::feed::channel::skipdays',
    'rss::maker::atom::feed::channel::skipdays::day',
    'rss::maker::atom::feed::channel::skiphours',
    'rss::maker::atom::feed::channel::skiphours::hour',
    'rss::maker::atom::feed::image',
    'rss::maker::atom::feed::items',
    'rss::maker::atom::feed::items::item',
    'rss::maker::atom::feed::items::item::categories',
    'rss::maker::atom::feed::items::item::categories::category',
    'rss::maker::atom::feed::items::item::content',
    'rss::maker::atom::feed::items::item::enclosure',
    'rss::maker::atom::feed::items::item::guid',
    'rss::maker::atom::feed::items::item::links',
    'rss::maker::atom::feed::items::item::links::link',
    'rss::maker::atom::feed::items::item::source',
    'rss::maker::atom::feed::items::item::source::categories',
    'rss::maker::atom::feed::items::item::source::categories::category',
    'rss::maker::atom::feed::items::item::source::generator',
    'rss::maker::atom::feed::items::item::source::icon',
    'rss::maker::atom::feed::items::item::source::links',
    'rss::maker::atom::feed::items::item::source::links::link',
    'rss::maker::atom::feed::items::item::source::logo',
    'rss::maker::atom::feed::textinput',
    'rss::maker::atomcategory',
    'rss::maker::atomgenerator',
    'rss::maker::atomlink',
    'rss::maker::atomlogo',
    'rss::maker::atompersonconstructbase',
    'rss::maker::atompersons',
    'rss::maker::atomtextconstruct',
    'rss::maker::atomtextconstructbase',
    'rss::maker::atomtextconstructbase::ensurexmlcontent',
    'rss::maker::base',
    'rss::maker::channelbase',
    'rss::maker::channelbase::authorsbase',
    'rss::maker::channelbase::authorsbase::authorbase',
    'rss::maker::channelbase::categoriesbase',
    'rss::maker::channelbase::categoriesbase::categorybase',
    'rss::maker::channelbase::cloudbase',
    'rss::maker::channelbase::contributorsbase',
    'rss::maker::channelbase::contributorsbase::contributorbase',
    'rss::maker::channelbase::copyrightbase',
    'rss::maker::channelbase::descriptionbase',
    'rss::maker::channelbase::generatorbase',
    'rss::maker::channelbase::itunescategories',
    'rss::maker::channelbase::itunescategories::itunescategory',
    'rss::maker::channelbase::itunesimage',
    'rss::maker::channelbase::itunesowner',
    'rss::maker::channelbase::linksbase',
    'rss::maker::channelbase::linksbase::linkbase',
    'rss::maker::channelbase::skipdaysbase',
    'rss::maker::channelbase::skipdaysbase::daybase',
    'rss::maker::channelbase::skiphoursbase',
    'rss::maker::channelbase::skiphoursbase::hourbase',
    'rss::maker::channelbase::titlebase',
    'rss::maker::contentmodel',
    'rss::maker::dublincoremodel',
    'rss::maker::itunesbasemodel',
    'rss::maker::ituneschannelmodel',
    'rss::maker::ituneschannelmodel::itunescategoriesbase',
    'rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase',
    'rss::maker::ituneschannelmodel::itunesimagebase',
    'rss::maker::ituneschannelmodel::itunesownerbase',
    'rss::maker::itunesitemmodel',
    'rss::maker::itunesitemmodel::itunesdurationbase',
    'rss::maker::imagebase',
    'rss::maker::imagefaviconmodel',
    'rss::maker::imagefaviconmodel::imagefaviconbase',
    'rss::maker::imageitemmodel',
    'rss::maker::imageitemmodel::imageitembase',
    'rss::maker::itemsbase',
    'rss::maker::itemsbase::itembase',
    'rss::maker::itemsbase::itembase::contentbase',
    'rss::maker::itemsbase::itembase::descriptionbase',
    'rss::maker::itemsbase::itembase::enclosurebase',
    'rss::maker::itemsbase::itembase::guidbase',
    'rss::maker::itemsbase::itembase::itunesduration',
    'rss::maker::itemsbase::itembase::rightsbase',
    'rss::maker::itemsbase::itembase::sourcebase',
    'rss::maker::itemsbase::itembase::sourcebase::iconbase',
    'rss::maker::itemsbase::itembase::sourcebase::logobase',
    'rss::maker::itemsbase::itembase::sourcebase::rightsbase',
    'rss::maker::itemsbase::itembase::sourcebase::subtitlebase',
    'rss::maker::itemsbase::itembase::sourcebase::titlebase',
    'rss::maker::itemsbase::itembase::titlebase',
    'rss::maker::rss09',
    'rss::maker::rss091',
    'rss::maker::rss091::channel',
    'rss::maker::rss091::image',
    'rss::maker::rss091::items',
    'rss::maker::rss091::items::item',
    'rss::maker::rss091::textinput',
    'rss::maker::rss092',
    'rss::maker::rss092::channel',
    'rss::maker::rss092::image',
    'rss::maker::rss092::items',
    'rss::maker::rss092::items::item',
    'rss::maker::rss092::textinput',
    'rss::maker::rss09::channel',
    'rss::maker::rss09::channel::authors',
    'rss::maker::rss09::channel::authors::author',
    'rss::maker::rss09::channel::categories',
    'rss::maker::rss09::channel::categories::category',
    'rss::maker::rss09::channel::cloud',
    'rss::maker::rss09::channel::contributors',
    'rss::maker::rss09::channel::contributors::contributor',
    'rss::maker::rss09::channel::copyright',
    'rss::maker::rss09::channel::description',
    'rss::maker::rss09::channel::generator',
    'rss::maker::rss09::channel::links',
    'rss::maker::rss09::channel::links::link',
    'rss::maker::rss09::channel::skipdays',
    'rss::maker::rss09::channel::skipdays::day',
    'rss::maker::rss09::channel::skiphours',
    'rss::maker::rss09::channel::skiphours::hour',
    'rss::maker::rss09::channel::title',
    'rss::maker::rss09::image',
    'rss::maker::rss09::items',
    'rss::maker::rss09::items::item',
    'rss::maker::rss09::items::item::authors',
    'rss::maker::rss09::items::item::authors::author',
    'rss::maker::rss09::items::item::categories',
    'rss::maker::rss09::items::item::categories::category',
    'rss::maker::rss09::items::item::content',
    'rss::maker::rss09::items::item::contributors',
    'rss::maker::rss09::items::item::contributors::contributor',
    'rss::maker::rss09::items::item::description',
    'rss::maker::rss09::items::item::enclosure',
    'rss::maker::rss09::items::item::guid',
    'rss::maker::rss09::items::item::links',
    'rss::maker::rss09::items::item::links::link',
    'rss::maker::rss09::items::item::rights',
    'rss::maker::rss09::items::item::source',
    'rss::maker::rss09::items::item::source::authors',
    'rss::maker::rss09::items::item::source::authors::author',
    'rss::maker::rss09::items::item::source::categories',
    'rss::maker::rss09::items::item::source::categories::category',
    'rss::maker::rss09::items::item::source::contributors',
    'rss::maker::rss09::items::item::source::contributors::contributor',
    'rss::maker::rss09::items::item::source::generator',
    'rss::maker::rss09::items::item::source::icon',
    'rss::maker::rss09::items::item::source::links',
    'rss::maker::rss09::items::item::source::links::link',
    'rss::maker::rss09::items::item::source::logo',
    'rss::maker::rss09::items::item::source::rights',
    'rss::maker::rss09::items::item::source::subtitle',
    'rss::maker::rss09::items::item::source::title',
    'rss::maker::rss09::items::item::title',
    'rss::maker::rss09::textinput',
    'rss::maker::rss10',
    'rss::maker::rss10::channel',
    'rss::maker::rss10::channel::authors',
    'rss::maker::rss10::channel::authors::author',
    'rss::maker::rss10::channel::categories',
    'rss::maker::rss10::channel::categories::category',
    'rss::maker::rss10::channel::cloud',
    'rss::maker::rss10::channel::contributors',
    'rss::maker::rss10::channel::contributors::contributor',
    'rss::maker::rss10::channel::copyright',
    'rss::maker::rss10::channel::description',
    'rss::maker::rss10::channel::generator',
    'rss::maker::rss10::channel::links',
    'rss::maker::rss10::channel::links::link',
    'rss::maker::rss10::channel::skipdays',
    'rss::maker::rss10::channel::skipdays::day',
    'rss::maker::rss10::channel::skiphours',
    'rss::maker::rss10::channel::skiphours::hour',
    'rss::maker::rss10::channel::title',
    'rss::maker::rss10::image',
    'rss::maker::rss10::items',
    'rss::maker::rss10::items::item',
    'rss::maker::rss10::items::item::authors',
    'rss::maker::rss10::items::item::authors::author',
    'rss::maker::rss10::items::item::categories',
    'rss::maker::rss10::items::item::categories::category',
    'rss::maker::rss10::items::item::content',
    'rss::maker::rss10::items::item::contributors',
    'rss::maker::rss10::items::item::contributors::contributor',
    'rss::maker::rss10::items::item::description',
    'rss::maker::rss10::items::item::enclosure',
    'rss::maker::rss10::items::item::guid',
    'rss::maker::rss10::items::item::links',
    'rss::maker::rss10::items::item::links::link',
    'rss::maker::rss10::items::item::rights',
    'rss::maker::rss10::items::item::source',
    'rss::maker::rss10::items::item::source::authors',
    'rss::maker::rss10::items::item::source::authors::author',
    'rss::maker::rss10::items::item::source::categories',
    'rss::maker::rss10::items::item::source::categories::category',
    'rss::maker::rss10::items::item::source::contributors',
    'rss::maker::rss10::items::item::source::contributors::contributor',
    'rss::maker::rss10::items::item::source::generator',
    'rss::maker::rss10::items::item::source::icon',
    'rss::maker::rss10::items::item::source::links',
    'rss::maker::rss10::items::item::source::links::link',
    'rss::maker::rss10::items::item::source::logo',
    'rss::maker::rss10::items::item::source::rights',
    'rss::maker::rss10::items::item::source::subtitle',
    'rss::maker::rss10::items::item::source::title',
    'rss::maker::rss10::items::item::title',
    'rss::maker::rss10::textinput',
    'rss::maker::rss20',
    'rss::maker::rss20::channel',
    'rss::maker::rss20::channel::categories',
    'rss::maker::rss20::channel::categories::category',
    'rss::maker::rss20::channel::cloud',
    'rss::maker::rss20::channel::generator',
    'rss::maker::rss20::channel::skipdays',
    'rss::maker::rss20::channel::skipdays::day',
    'rss::maker::rss20::channel::skiphours',
    'rss::maker::rss20::channel::skiphours::hour',
    'rss::maker::rss20::image',
    'rss::maker::rss20::items',
    'rss::maker::rss20::items::item',
    'rss::maker::rss20::items::item::authors',
    'rss::maker::rss20::items::item::authors::author',
    'rss::maker::rss20::items::item::categories',
    'rss::maker::rss20::items::item::categories::category',
    'rss::maker::rss20::items::item::enclosure',
    'rss::maker::rss20::items::item::guid',
    'rss::maker::rss20::items::item::source',
    'rss::maker::rss20::items::item::source::links',
    'rss::maker::rss20::items::item::source::links::link',
    'rss::maker::rss20::textinput',
    'rss::maker::rssbase',
    'rss::maker::setupdefaultdate',
    'rss::maker::setupdefaultlanguage',
    'rss::maker::slashmodel',
    'rss::maker::syndicationmodel',
    'rss::maker::taxonomytopicmodel',
    'rss::maker::taxonomytopicmodel::taxonomytopicsbase',
    'rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase',
    'rss::maker::taxonomytopicsmodel',
    'rss::maker::taxonomytopicsmodel::taxonomytopicsbase',
    'rss::maker::textinputbase',
    'rss::maker::trackbackmodel',
    'rss::maker::trackbackmodel::trackbackaboutsbase',
    'rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase',
    'rss::maker::xmlstylesheets',
    'rss::maker::xmlstylesheets::xmlstylesheet',
    'rss::missingattributeerror',
    'rss::missingtagerror',
    'rss::nserror',
    'rss::notavailablevalueerror',
    'rss::notexpectedtagerror',
    'rss::notseterror',
    'rss::notvalidxmlparser',
    'rss::notwellformederror',
    'rss::overlappedprefixerror',
    'rss::parser',
    'rss::rdf',
    'rss::rdf::bag',
    'rss::rdf::bag::li',
    'rss::rdf::channel',
    'rss::rdf::channel::image',
    'rss::rdf::channel::items',
    'rss::rdf::channel::items::seq',
    'rss::rdf::channel::textinput',
    'rss::rdf::image',
    'rss::rdf::item',
    'rss::rdf::li',
    'rss::rdf::seq',
    'rss::rdf::seq::li',
    'rss::rdf::textinput',
    'rss::rexmllikexmlparser',
    'rss::rexmllistener',
    'rss::rexmlparser',
    'rss::rss09',
    'rss::rss10',
    'rss::rootelementmixin',
    'rss::rss',
    'rss::rss::channel',
    'rss::rss::channel::cloud',
    'rss::rss::channel::image',
    'rss::rss::channel::item',
    'rss::rss::channel::item::category',
    'rss::rss::channel::item::enclosure',
    'rss::rss::channel::item::guid',
    'rss::rss::channel::item::source',
    'rss::rss::channel::skipdays',
    'rss::rss::channel::skipdays::day',
    'rss::rss::channel::skiphours',
    'rss::rss::channel::skiphours::hour',
    'rss::rss::channel::textinput',
    'rss::setupmaker',
    'rss::slashmodel',
    'rss::syndicationmodel',
    'rss::taxonomytopicmodel',
    'rss::taxonomytopicmodel::taxonomytopic',
    'rss::taxonomytopicsmodel',
    'rss::taxonomytopicsmodel::taxonomytopics',
    'rss::taxonomytopicsmodel::taxonomytopics::bag',
    'rss::toomuchtagerror',
    'rss::trackbackmodel10',
    'rss::trackbackmodel10::trackbackabout',
    'rss::trackbackmodel10::trackbackping',
    'rss::trackbackmodel20',
    'rss::trackbackmodel20::trackbackabout',
    'rss::trackbackmodel20::trackbackping',
    'rss::trackbackutils',
    'rss::unknownconversionmethoderror',
    'rss::unknowntagerror',
    'rss::unsupportedmakerversionerror',
    'rss::utils',
    'rss::utils::csv',
    'rss::utils::explicitcleanother',
    'rss::utils::inheritedreader',
    'rss::utils::yesother',
    'rss::xml',
    'rss::xml::element',
    'rss::xmlparserlistener',
    'rss::xmlparsernotfound',
    'rss::xmlparserparser',
    'rss::xmlscanlistener',
    'rss::xmlscanparser',
    'rss::xmlstylesheet',
    'rss::xmlstylesheetmixin',
    'racc',
    'racc::cparseparams',
    'racc::parseerror',
    'racc::parser',
    'raiseerrormatcher',
    'random',
    'random::formatter',
    'range',
    'rangespecs',
    'rangespecs::custom',
    'rangespecs::myrange',
    'rangespecs::tenfoldsucc',
    'rangespecs::xs',
    'rangespecs::ys',
    'rational',
    'rational::compatible',
    'rationalspecs',
    'rationalspecs::subnumeric',
    'ray',
    'rbinstall',
    'rbinstall::unpackedinstaller',
    'rbinstall::unpackedinstaller::dirpackage',
    'readline',
    'redblacktree',
    'redblacktree::nilnode',
    'redblacktree::node',
    'reflectspecs',
    'reflectspecs::a',
    'reflectspecs::b',
    'reflectspecs::c',
    'reflectspecs::d',
    'reflectspecs::e',
    'reflectspecs::f',
    'reflectspecs::k',
    'reflectspecs::l',
    'reflectspecs::m',
    'reflectspecs::n',
    'reflectspecs::o',
    'reflectspecs::p',
    'regexp',
    'regexpspecssubclass',
    'rescuespecs',
    'resolv',
    'resolv::dns',
    'resolv::dns::config',
    'resolv::dns::config::nxdomain',
    'resolv::dns::config::otherresolverror',
    'resolv::dns::decodeerror',
    'resolv::dns::encodeerror',
    'resolv::dns::name',
    'resolv::dns::query',
    'resolv::dns::requester',
    'resolv::dns::requester::requesterror',
    'resolv::dns::resource',
    'resolv::dns::resource::any',
    'resolv::dns::resource::cname',
    'resolv::dns::resource::domainname',
    'resolv::dns::resource::generic',
    'resolv::dns::resource::hinfo',
    'resolv::dns::resource::in',
    'resolv::dns::resource::in::a',
    'resolv::dns::resource::in::aaaa',
    'resolv::dns::resource::in::srv',
    'resolv::dns::resource::in::wks',
    'resolv::dns::resource::loc',
    'resolv::dns::resource::minfo',
    'resolv::dns::resource::mx',
    'resolv::dns::resource::ns',
    'resolv::dns::resource::ptr',
    'resolv::dns::resource::soa',
    'resolv::dns::resource::txt',
    'resolv::hosts',
    'resolv::ipv4',
    'resolv::ipv6',
    'resolv::loc',
    'resolv::loc::alt',
    'resolv::loc::coord',
    'resolv::loc::size',
    'resolv::mdns',
    'resolv::resolverror',
    'resolv::resolvtimeout',
    'resolv::sz',
    'resolv::wscontrol',
    'respondtomatcher',
    'returnspecs',
    'returnspecs::blocks',
    'returnspecs::definemethod',
    'returnspecs::methodwithblock',
    'returnspecs::nestedblocks',
    'returnspecs::nestedcalls',
    'returnspecs::savedinnerblock',
    'returnspecs::throughdefinemethod',
    'rinda',
    'rinda::drbobjecttemplate',
    'rinda::invalidhashtuplekey',
    'rinda::notifytemplateentry',
    'rinda::requestcancelederror',
    'rinda::requestexpirederror',
    'rinda::rindaerror',
    'rinda::ringfinger',
    'rinda::ringprovider',
    'rinda::ringserver',
    'rinda::simplerenewer',
    'rinda::template',
    'rinda::templateentry',
    'rinda::tuple',
    'rinda::tuplebag',
    'rinda::tuplebag::tuplebin',
    'rinda::tupleentry',
    'rinda::tuplespace',
    'rinda::tuplespaceproxy',
    'rinda::waittemplateentry',
    'ring',
    'ringecho',
    'ripper',
    'ripper::filter',
    'rotation',
    'ruby2html',
    'rubyimplementation',
    'rubytoken',
    'rubytoken::tkerror',
    'rubytoken::tkid',
    'rubytoken::tknode',
    'rubytoken::tkopasgn',
    'rubytoken::tkop',
    'rubytoken::tkunknownchar',
    'rubytoken::tkval',
    'rubytoken::token',
    'rubyvm',
    'rubyvm::insnsincgenerator',
    'rubyvm::insnsinfoincgenerator',
    'rubyvm::instruction',
    'rubyvm::instructionsequence',
    'rubyvm::instructionsequence::basicstorage',
    'rubyvm::instructionsequence::dbmstorage',
    'rubyvm::instructionsequence::fs2storage',
    'rubyvm::instructionsequence::fsstorage',
    'rubyvm::instructionsequence::nullstorage',
    'rubyvm::instructionsloader',
    'rubyvm::minsnsincgenerator',
    'rubyvm::optinsnincgenerator',
    'rubyvm::optscincgenerator',
    'rubyvm::optunifsincgenerator',
    'rubyvm::sourcecodegenerator',
    'rubyvm::vmbodygenerator',
    'rubyvm::vmtcincgenerator',
    'rubyvm::yarvdocgenerator',
    'rubyvm::yasmdatarbgenerator',
    's',
    'sdbm',
    'sha1constants',
    'sha1constants::klass',
    'sockssocket',
    'scanf',
    'scanf::formatspecifier',
    'scanf::formatstring',
    'scene',
    'scratchpad',
    'securerandom',
    'sendspecs',
    'sendspecs::foo',
    'seq',
    'set',
    'shell',
    'shell::appendfile',
    'shell::appendio',
    'shell::builtincommand',
    'shell::cat',
    'shell::commandprocessor',
    'shell::concat',
    'shell::echo',
    'shell::error',
    'shell::filter',
    'shell::glob',
    'shell::processcontroller',
    'shell::systemcommand',
    'shell::tee',
    'shell::void',
    'shellwords',
    'shouldspecsmonitor',
    'signal',
    'signalexception',
    'signedzeromatcher',
    'simpletuplespace',
    'singleton',
    'singletonspecs',
    'singletonspecs::myclass',
    'singletonspecs::myclasschild',
    'singletonspecs::newspec',
    'singletonspecs::notinstantiated',
    'sizedqueue',
    'socket',
    'socket::ancillarydata',
    'socket::constants',
    'socket::ifaddr',
    'socket::option',
    'socket::udpsource',
    'socketspecs',
    'socketspecs::spectcpserver',
    'sortedset_flattenspecs',
    'sortedset_flattenspecs::comparablesortedset',
    'specevaluate',
    'specexpectation',
    'specguard',
    'specnegativeoperatormatcher',
    'specpositiveoperatormatcher',
    'spectag',
    'specversion',
    'specs',
    'specs::kernel',
    'specs::kernel::hasequal',
    'specs::kernel::hasnone',
    'specs::kernel::hasopequal',
    'specs::kernel::hasoppoopequal',
    'sphere',
    'spinnerformatter',
    'squigglyheredocspecs',
    'string',
    'stringio',
    'stringiospecs',
    'stringscanner',
    'stringscanner::error',
    'stringspecs',
    'stringspecs::iso88599encoding',
    'stringspecs::initializestring',
    'stringspecs::myarray',
    'stringspecs::myrange',
    'stringspecs::mystring',
    'stringspecs::stringmodule',
    'stringspecs::stringwithraisingconstructor',
    'stringspecs::substring',
    'stringspecs::utf8encoding',
    'struct',
    'structclasses',
    'structclasses::apple',
    'structclasses::honda',
    'structclasses::subclassx',
    'sub',
    'subtracter',
    'super',
    'super::alias1',
    'super::alias2',
    'super::alias3',
    'super::aliaswithsuper',
    'super::aliaswithsuper::as1',
    'super::aliaswithsuper::bs1',
    'super::aliaswithsuper::base',
    'super::aliaswithsuper::trigger',
    'super::anonymousmoduleincludedtwice',
    'super::anonymousmoduleincludedtwicebase',
    'super::frombasicobject',
    'super::includesfrombasic',
    'super::includesintermediate',
    'super::intermediatebasic',
    'super::keywords',
    'super::keywords::arguments',
    'super::keywords::optionalandplaceholderarguments',
    'super::keywords::optionalarguments',
    'super::keywords::placeholderarguments',
    'super::keywords::requiredandoptionalandplaceholderarguments',
    'super::keywords::requiredandoptionalarguments',
    'super::keywords::requiredandplaceholderarguments',
    'super::keywords::requiredarguments',
    'super::mm_a',
    'super::mm_b',
    'super::ms1',
    'super::ms1::a',
    'super::ms1::b',
    'super::ms1::moda',
    'super::ms1::modb',
    'super::ms2',
    'super::ms2::a',
    'super::ms2::b',
    'super::ms2::c',
    'super::ms2::modb',
    'super::ms3',
    'super::ms3::a',
    'super::ms3::b',
    'super::ms3::moda',
    'super::ms4',
    'super::ms4::a',
    'super::ms4::layer1',
    'super::ms4::layer2',
    'super::multisupertargets',
    'super::multisupertargets::a',
    'super::multisupertargets::b',
    'super::multisupertargets::basea',
    'super::multisupertargets::baseb',
    'super::multisupertargets::m',
    'super::regularandkeywords',
    'super::regularandkeywords::arguments',
    'super::regularandkeywords::optionalandplaceholderarguments',
    'super::regularandkeywords::optionalarguments',
    'super::regularandkeywords::placeholderarguments',
    'super::regularandkeywords::requiredandoptionalandplaceholderarguments',
    'super::regularandkeywords::requiredandoptionalarguments',
    'super::regularandkeywords::requiredandplaceholderarguments',
    'super::regularandkeywords::requiredarguments',
    'super::restargswithsuper',
    'super::restargswithsuper::a',
    'super::restargswithsuper::b',
    'super::s1',
    'super::s1::a',
    'super::s1::b',
    'super::s2',
    'super::s2::a',
    'super::s2::b',
    'super::s2::c',
    'super::s3',
    'super::s3::a',
    'super::s3::b',
    'super::s4',
    'super::s4::a',
    'super::s4::b',
    'super::s5',
    'super::s6',
    'super::s7',
    'super::singletonaliascase',
    'super::singletonaliascase::base',
    'super::singletonaliascase::foo',
    'super::singletoncase',
    'super::singletoncase::base',
    'super::singletoncase::foo',
    'super::splatandkeywords',
    'super::splatandkeywords::allarguments',
    'super::splatandkeywords::arguments',
    'super::zsuperwithblock',
    'super::zsuperwithblock::a',
    'super::zsuperwithblock::b',
    'super::zsuperwithoptional',
    'super::zsuperwithoptional::a',
    'super::zsuperwithoptional::b',
    'super::zsuperwithoptional::c',
    'super::zsuperwithrest',
    'super::zsuperwithrest::a',
    'super::zsuperwithrest::b',
    'super::zsuperwithrestandothers',
    'super::zsuperwithrestandothers::a',
    'super::zsuperwithrestandothers::b',
    'super::zsuperwithunderscores',
    'super::zsuperwithunderscores::a',
    'super::zsuperwithunderscores::b',
    'symbol',
    'symbolspecs',
    'symbolspecs::myrange',
    'sync_m',
    'sync_m::err',
    'sync_m::err::lockmodefailer',
    'sync_m::err::unknownlocker',
    'syntaxerror',
    'syslog',
    'syslog::constants',
    'syslog::facility',
    'syslog::level',
    'syslog::logger',
    'syslog::logger::formatter',
    'syslog::logger::severity',
    'syslog::macros',
    'syslog::option',
    'systemcallerror',
    'systemexit',
    'tcpserver',
    'tcpsocket',
    'tsort',
    'tsort::cyclic',
    'tagaction',
    'tagfilter',
    'taglistaction',
    'tagpurgeaction',
    'tally',
    'tallyaction',
    'tempio',
    'tempfile',
    'tempfile::remover',
    'test',
    'thread',
    'thread::backtrace::location',
    'threadbacktracelocationspecs',
    'threadspecs',
    'threadspecs::status',
    'threadspecs::subthread',
    'threadswait',
    'tick',
    'time',
    'timespecs',
    'timespecs::methodholder',
    'timespecs::subtime',
    'timeout',
    'timeout::error',
    'timeout::timeouterror',
    'toggle',
    'tracepoint',
    'tracepointspec',
    'tracepointspec::a',
    'tracepointspec::b',
    'tracepointspec::c',
    'tracepointspec::classwithmethodalias',
    'tracer',
    'transformation',
    'tuplespace',
    'tuplespace::template',
    'udpsocket',
    'unixserver',
    'unixsocket',
    'uri',
    'uri::badurierror',
    'uri::error',
    'uri::escape',
    'uri::ftp',
    'uri::generic',
    'uri::http',
    'uri::https',
    'uri::invalidcomponenterror',
    'uri::invalidurierror',
    'uri::ldap',
    'uri::ldaps',
    'uri::mailto',
    'uri::regexp',
    'uri::rfc2396_parser',
    'uri::rfc2396_regexp',
    'uri::rfc2396_regexp::pattern',
    'urispec',
    'unboundmethodspecs',
    'unboundmethodspecs::a',
    'unboundmethodspecs::b',
    'unboundmethodspecs::c',
    'unboundmethodspecs::child1',
    'unboundmethodspecs::child2',
    'unboundmethodspecs::child3',
    'unboundmethodspecs::methods',
    'unboundmethodspecs::mod',
    'unboundmethodspecs::parent',
    'unboundmethodspecs::sourcelocation',
    'uncaughtthrowerror',
    'unifdef',
    'usercustomconstructorstring',
    'userdefined',
    'userdefined::nested',
    'userdefinedimmediate',
    'userdefinedwithivar',
    'userhashinitparams',
    'usermarshal',
    'usermarshalwithclassname',
    'usermarshalwithivar',
    'vcs',
    'vcs::git',
    'vcs::notfounderror',
    'vcs::svn',
    'vpath',
    'variablematcher',
    'variablesspecs',
    'variablesspecs::arraylike',
    'variablesspecs::arraysubclass',
    'variablesspecs::chain',
    'variablesspecs::hashalike',
    'variablesspecs::opasgn',
    'variablesspecs::parasgn',
    'variablesspecs::privatemethods',
    'variablesspecs::toarynil',
    'vec',
    'vector',
    'vector::zerovectorerror',
    'versionguard',
    'webrick',
    'webrick::accesslog',
    'webrick::accesslog::accesslogerror',
    'webrick::basiclog',
    'webrick::cgi',
    'webrick::config',
    'webrick::cookie',
    'webrick::daemon',
    'webrick::genericserver',
    'webrick::htmlutils',
    'webrick::httpauth',
    'webrick::httpauth::authenticator',
    'webrick::httpauth::basicauth',
    'webrick::httpauth::digestauth',
    'webrick::httpauth::htdigest',
    'webrick::httpauth::htgroup',
    'webrick::httpauth::htpasswd',
    'webrick::httpauth::proxyauthenticator',
    'webrick::httpauth::proxybasicauth',
    'webrick::httpauth::proxydigestauth',
    'webrick::httpauth::userdb',
    'webrick::httpproxyserver',
    'webrick::httprequest',
    'webrick::httpresponse',
    'webrick::httpresponse::chunkedwrapper',
    'webrick::httpresponse::invalidheader',
    'webrick::httpserver',
    'webrick::httpservererror',
    'webrick::httpservlet',
    'webrick::httpservlet::abstractservlet',
    'webrick::httpservlet::cgihandler',
    'webrick::httpservlet::defaultfilehandler',
    'webrick::httpservlet::erbhandler',
    'webrick::httpservlet::filehandler',
    'webrick::httpservlet::httpservleterror',
    'webrick::httpservlet::prochandler',
    'webrick::httpstatus',
    'webrick::httpstatus::clienterror',
    'webrick::httpstatus::eoferror',
    'webrick::httpstatus::error',
    'webrick::httpstatus::info',
    'webrick::httpstatus::redirect',
    'webrick::httpstatus::servererror',
    'webrick::httpstatus::status',
    'webrick::httpstatus::success',
    'webrick::httputils',
    'webrick::httputils::formdata',
    'webrick::httpversion',
    'webrick::log',
    'webrick::snirequest',
    'webrick::servererror',
    'webrick::simpleserver',
    'webrick::utils',
    'webrick::utils::timeouthandler',
    'win32comgen',
    'win32ole',
    'win32ole::variant',
    'win32olespecs',
    'win32ole_event',
    'win32ole_method',
    'win32ole_param',
    'win32ole_record',
    'win32ole_type',
    'win32ole_typelib',
    'win32ole_variant',
    'warning',
    'warning::buffer',
    'weakref',
    'weakref::referror',
    'weakrefspec',
    'weakrefspecs',
    'win32',
    'win32::registry',
    'win32::registry::api',
    'win32::registry::constants',
    'win32::registry::error',
    'win32::registry::error::kernel32',
    'win32::registry::predefinedkey',
    'win32::resolv::wscontrol::wsock32',
    'win32::sspi',
    'win32::sspi::api',
    'win32::sspi::identity',
    'win32::sspi::negotiateauth',
    'win32::sspi::sspiresult',
    'win32::sspi::securitybuffer',
    'win32::sspi::securityhandle',
    'win32::sspi::timestamp',
    'win32api',
    'x509',
    'xml',
    'xml::parser',
    'xmlencoding_ja',
    'xmlencoding_ja::sjishandler',
    'xmp',
    'xmp::stringinputmethod',
    'yaml',
    'yaml::dbm',
    'yaml::store',
    'yaml::syck',
    'yamlformatter',
    'yieldspecs',
    'yieldspecs::yielder',
    'zero',
    'zlib',
    'zlib::buferror',
    'zlib::dataerror',
    'zlib::deflate',
    'zlib::error',
    'zlib::gzipfile',
    'zlib::gzipfile::crcerror',
    'zlib::gzipfile::error',
    'zlib::gzipfile::lengtherror',
    'zlib::gzipfile::nofooter',
    'zlib::gzipreader',
    'zlib::gzipwriter',
    'zlib::inflate',
    'zlib::memerror',
    'zlib::needdict',
    'zlib::streamend',
    'zlib::streamerror',
    'zlib::versionerror',
    'zlib::zstream',
    'm::n',
    'nil',
    'nil::foo',
    'unknown',
    'kernelspecs::notmatch#!~()',
    'openssl::bn#%()',
    'process::status#&()',
    'benchmark::tms#*()',
    'openssl::bn#*()',
    'openssl::bn#**()',
    'benchmark::tms#+()',
    'fiddle::pointer#+()',
    'openssl::bn#+()',
    'shell::filter#+()',
    'uri::generic#+()',
    'fiddle::pointer#+@()',
    'openssl::bn#+@()',
    'benchmark::tms#-()',
    'fiddle::pointer#-()',
    'openssl::bn#-()',
    'uri::generic#-()',
    'fiddle::pointer#-@()',
    'openssl::bn#-@()',
    'benchmark::tms#/()',
    'floatspecs::cancoerce#/()',
    'openssl::bn#/()',
    'shell::filter#<()',
    'csv::row#<<()',
    'csv::table#<<()',
    'digest::base#<<()',
    'digest::instance#<<()',
    'digest::sha2#<<()',
    'gem::availableset#<<()',
    'gem::sourcelist#<<()',
    'io::generic_writable#<<()',
    'net::writeadapter#<<()',
    'nethttpspecs::nullwriter#<<()',
    'openssl::bn#<<()',
    'openssl::buffering#<<()',
    'openssl::digest#<<()',
    'openssl::hmac#<<()',
    'psych::visitors::yamltree#<<()',
    'rdoc::markup::document#<<()',
    'rdoc::markup::list#<<()',
    'rdoc::markup::listitem#<<()',
    'rdoc::markup::raw#<<()',
    'rexml::attributes#<<()',
    'rexml::document#<<()',
    'rexml::elements#<<()',
    'rexml::light::node#<<()',
    'rexml::output#<<()',
    'rexml::parent#<<()',
    'rexml::text#<<()',
    'rexml::validation::choice#<<()',
    'rexml::validation::state#<<()',
    'rss::xml::element#<<()',
    'scratchpad::<<()',
    'webrick::basiclog#<<()',
    'webrick::httputils::formdata#<<()',
    'zlib::deflate#<<()',
    'zlib::gzipwriter#<<()',
    'zlib::inflate#<<()',
    'arrayspecs::comparablewithfixnum#<=>()',
    'arrayspecs::d#<=>()',
    'arrayspecs::mockforcompared#<=>()',
    'arrayspecs::sortsame#<=>()',
    'arrayspecs::ufosceptic#<=>()',
    'arrayspecs::uncomparable#<=>()',
    'comparablespecs::comparecallingsuper#<=>()',
    'comparablespecs::withonlycomparedefined#<=>()',
    'enumerablespecs::comparablewithfixnum#<=>()',
    'enumerablespecs::comparesbyvowelcount#<=>()',
    'enumerablespecs::invalidcomparable#<=>()',
    'enumerablespecs::reversecomparable#<=>()',
    'enumerablespecs::uncomparable#<=>()',
    'fiddle::pointer#<=>()',
    'file::stat#<=>()',
    'gem::dependency#<=>()',
    'gem::nametuple#<=>()',
    'gem::source#<=>()',
    'gem::source::git#<=>()',
    'gem::source::installed#<=>()',
    'gem::source::local#<=>()',
    'gem::source::specificfile#<=>()',
    'gem::source::vendor#<=>()',
    'gem::version#<=>()',
    'irb::notifier::levelednotifier#<=>()',
    'numericspecs::comparison#<=>()',
    'openssl::bn#<=>()',
    'openssl::x509::name#<=>()',
    'rdoc::alias#<=>()',
    'rdoc::constant#<=>()',
    'rdoc::context#<=>()',
    'rdoc::methodattr#<=>()',
    'rdoc::mixin#<=>()',
    'rexml::comment#<=>()',
    'rexml::text#<=>()',
    'rss::maker::itemsbase::itembase#<=>()',
    'rangespecs::custom#<=>()',
    'rangespecs::tenfoldsucc#<=>()',
    'sortedset_flattenspecs::comparablesortedset#<=>()',
    'webrick::httpversion#<=>()',
    'arrayspecs::assockey#==()',
    'arrayspecs::sortsame#==()',
    'csv::row#==()',
    'csv::table#==()',
    'digest::instance#==()',
    'encoding::converter#==()',
    'enumerablespecs::equals#==()',
    'fiddle::pointer#==()',
    'gem::nametuple#==()',
    'gem::platform#==()',
    'gem::resolver::molinillo::dependencygraph#==()',
    'gem::resolver::molinillo::dependencygraph::vertex#==()',
    'jisx0208::char#==()',
    'openssl::bn#==()',
    'openssl::pkey::ec::group#==()',
    'openssl::pkey::ec::point#==()',
    'openssl::ssl::session#==()',
    'openssl::x509::attribute#==()',
    'openssl::x509::crl#==()',
    'openssl::x509::certificate#==()',
    'openssl::x509::extension#==()',
    'openssl::x509::request#==()',
    'openssl::x509::revoked#==()',
    'process::status#==()',
    'rdoc::attr#==()',
    'rdoc::constant#==()',
    'rdoc::context::section#==()',
    'rdoc::markup::special#==()',
    'rdoc::toplevel#==()',
    'rexml::attribute#==()',
    'rexml::comment#==()',
    'rexml::instruction#==()',
    'rexml::validation::event#==()',
    'rexml::xmldecl#==()',
    'rss::xml::element#==()',
    'rangespecs::custom#==()',
    'specs::kernel::hasopequal#==()',
    'specs::kernel::hasoppoopequal#==()',
    'uri::generic#==()',
    'userdefined::nested#==()',
    'win32::sspi::sspiresult#==()',
    'enumerablespecs::pattern#===()',
    'gem::dependency#===()',
    'gem::platform#===()',
    'gem::requirement#===()',
    'modulespecs::casecompareonsingleton::===()',
    'openssl::bn#===()',
    'rinda::drbobjecttemplate#===()',
    'rinda::template#===()',
    'rinda::templateentry#===()',
    'systemcallerror::===()',
    'gem::dependency#=~()',
    'gem::platform#=~()',
    'gem::requirement#=~()',
    'rexml::light::node#=~()',
    'shell::filter#>()',
    'openssl::bn#>>()',
    'process::status#>>()',
    'shell::filter#>>()',
    'net::pop3::apop()',
    'gem::package::tartestcase#asciiz()',
    'kernelspecs::array_function()',
    'kernelspecs::array_method()',
    'win32::registry::api#closekey()',
    'win32::registry::api#createkey()',
    'irb::currentcontext()',
    'thread::debug()',
    'thread::debug=()',
    'win32::registry::api#deletekey()',
    'win32::registry::api#deletevalue()',
    'openssl::digest()',
    'win32::registry::api#enumkey()',
    'win32::registry::api#enumvalue()',
    'num2int::fix2int()',
    'num2int::fix2long()',
    'num2int::fix2short()',
    'num2int::fix2uint()',
    'num2int::fix2ulong()',
    'sync_m::err::fail()',
    'sync_m::err::lockmodefailer::fail()',
    'sync_m::err::unknownlocker::fail()',
    'win32::registry::api#flushkey()',
    'kernelspecs::hash_function()',
    'kernelspecs::hash_method()',
    'matrix::i()',
    'kernelspecs::integer_function()',
    'kernelspecs::integer_method()',
    'irb::jobmanager()',
    'syslog::macros#log_mask()',
    'syslog::macros#log_upto()',
    'num2int::num2int()',
    'num2int::num2ll()',
    'num2int::num2long()',
    'num2int::num2short()',
    'num2int::num2uint()',
    'num2int::num2ull()',
    'num2int::num2ulong()',
    'num2int::num2ushort()',
    'win32::registry::api#openkey()',
    'rss::rss::channel::item::guid#permalink?()',
    'net::http::proxy()',
    'win32::registry::api#queryinfokey()',
    'win32::registry::api#queryvalue()',
    'gem::package::tartestcase#sp()',
    'gem::package::tartestcase#sp_z()',
    'win32::registry::api#setvalue()',
    'irb::locale#string()',
    'kernel::uri()',
    'gem::package::tartestcase#z()',
    'array::[]()',
    'cgi::queryextension#[]()',
    'cgi::session#[]()',
    'config::[]()',
    'csv::row#[]()',
    'csv::table#[]()',
    'drb::drbsslsocket::sslconfig#[]()',
    'drb::gw#[]()',
    'dir::[]()',
    'env::[]()',
    'fiddle::cstructentity#[]()',
    'fiddle::compositehandler#[]()',
    'fiddle::handle::[]()',
    'fiddle::handle#[]()',
    'fiddle::importer#[]()',
    'fiddle::pointer::[]()',
    'fiddle::pointer#[]()',
    'gem::commandmanager#[]()',
    'gem::configfile#[]()',
    'hash::[]()',
    'json::[]()',
    'json::ext::generator::state#[]()',
    'json::genericobject#[]()',
    'matrix::[]()',
    'modulespecs::nesting::[]()',
    'net::httpheader#[]()',
    'objectspace::weakmap#[]()',
    'openssl::config#[]()',
    'prime::trialdivision#[]()',
    'psych::coder#[]()',
    'rdoc::i18n::locale::[]()',
    'rdoc::markup::attrspan#[]()',
    'rexml::attlistdecl#[]()',
    'rexml::attributes#[]()',
    'rexml::element#[]()',
    'rexml::elements#[]()',
    'rexml::light::node#[]()',
    'rexml::parent#[]()',
    'rexml::parsers::pullevent#[]()',
    'rss::maker::[]()',
    'rss::xml::element#[]()',
    'rinda::tuple#[]()',
    'rinda::tupleentry#[]()',
    'rubyvm::instructionsloader#[]()',
    'set::[]()',
    'shell::commandprocessor#[]()',
    'variablesspecs::hashalike#[]()',
    'vector::[]()',
    'webrick::cgi#[]()',
    'webrick::genericserver#[]()',
    'webrick::httprequest#[]()',
    'webrick::httpresponse#[]()',
    'webrick::httpstatus::[]()',
    'webrick::httputils::formdata#[]()',
    'win32::registry#[]()',
    'yaml::dbm#[]()',
    'cgi::session#[]=()',
    'csv::row#[]=()',
    'csv::table#[]=()',
    'drb::gw#[]=()',
    'env::[]=()',
    'fiddle::cstructentity#[]=()',
    'fiddle::pointer#[]=()',
    'gem::configfile#[]=()',
    'json::ext::generator::state#[]=()',
    'json::genericobject#[]=()',
    'langsendspecs::attr19set#[]=()',
    'langsendspecs::attrset#[]=()',
    'modulespecs::nesting::[]=()',
    'net::httpheader#[]=()',
    'objectspace::weakmap#[]=()',
    'openssl::config#[]=()',
    'psych::coder#[]=()',
    'rdoc::i18n::locale::[]=()',
    'rexml::attributes#[]=()',
    'rexml::elements#[]=()',
    'rexml::light::node#[]=()',
    'rexml::parent#[]=()',
    'rexml::xpathparser#[]=()',
    'rss::xml::element#[]=()',
    'variablesspecs::hashalike#[]=()',
    'webrick::httpresponse#[]=()',
    'win32::registry#[]=()',
    'yaml::dbm#[]=()',
    'rss::rss::channel::item::guid#_permalink?()',
    'drb::drbobject#__drbref()',
    'drb::drbobject#__drburi()',
    'irb::workspace#__evaluate__()',
    'irb::context#__exit__()',
    'super::frombasicobject#__send__()',
    'delegatespecs::delegator#__setobj__()',
    'drb::drbobject#_dump()',
    'gem::specification#_dump()',
    'win32::registry#_dump()',
    'gem::streamui#_gets_noecho()',
    'date::_httpdate()',
    'objectspace::_id2ref()',
    'date::_iso8601()',
    'date::_jisx0301()',
    'bigdecimal::_load()',
    'drb::drbobject::_load()',
    'gem::specification::_load()',
    'singleton::_load()',
    'userdefined::_load()',
    'userdefinedimmediate::_load()',
    'userdefinedwithivar::_load()',
    'date::_parse()',
    'racc::parser#_racc_do_parse_rb()',
    'racc::parser#_racc_do_reduce()',
    'racc::parser#_racc_evalact()',
    'racc::parser#_racc_init_sysvars()',
    'racc::parser#_racc_setup()',
    'racc::parser#_racc_yyparse_rb()',
    'date::_rfc2822()',
    'date::_rfc3339()',
    'date::_rfc822()',
    'gem::version#_segments()',
    'irb::context#_set_last_value()',
    'gem::version#_split_segments()',
    'date::_strptime()',
    'datetime::_strptime()',
    'gem::version#_version()',
    'date::_xmlschema()',
    'cgi::htmlextension#a()',
    'namemapspecs::a::a()',
    'namemapspecs::a#a()',
    'super::anonymousmoduleincludedtwicebase#a()',
    'super::restargswithsuper::a#a()',
    'super::restargswithsuper::b#a()',
    'super::zsuperwithblock::a#a()',
    'super::zsuperwithblock::b#a()',
    'defspecnested::a_class_method()',
    'defspecsingleton::a_class_method()',
    'definedspecs::basic#a_defined_method()',
    'object::a_metaclass_eval_method()',
    'reflectspecs::a#a_pro()',
    'nomethoderrorspecs::nomethoderrorc#a_protected_method()',
    'reflectspecs::a#a_pub()',
    'defspecnested::a_singleton_method()',
    'abbrev::abbrev()',
    'gem::specification#abbreviate()',
    'rexml::parsers::xpathparser#abbreviate()',
    'netftpspecs::dummyftp#abor()',
    'net::ftp#abort()',
    'process::abort()',
    'thread::abort_on_exception()',
    'thread::abort_on_exception=()',
    'uri::generic#absolute()',
    'resolv::dns::name#absolute?()',
    'uri::generic#absolute?()',
    'file::absolute_path()',
    'rubyvm::instructionsequence#absolute_path()',
    'thread::backtrace::location#absolute_path()',
    'optionparser::ac#ac_arg_disable()',
    'optionparser::ac#ac_arg_enable()',
    'optionparser::ac#ac_arg_with()',
    'drb::drbsslsocket::sslconfig#accept()',
    'drb::http0::server#accept()',
    'openssl::ssl::sslserver#accept()',
    'openssl::ssl::sslsocket#accept()',
    'optionparser::accept()',
    'optionparser::list#accept()',
    'psych::visitors::jsontree#accept()',
    'psych::visitors::toruby#accept()',
    'psych::visitors::visitor#accept()',
    'psych::visitors::yamltree#accept()',
    'rdoc::markup::blankline#accept()',
    'rdoc::markup::blockquote#accept()',
    'rdoc::markup::document#accept()',
    'rdoc::markup::hardbreak#accept()',
    'rdoc::markup::indentedparagraph#accept()',
    'rdoc::markup::list#accept()',
    'rdoc::markup::listitem#accept()',
    'rdoc::markup::paragraph#accept()',
    'rdoc::markup::raw#accept()',
    'rdoc::markup::rule#accept()',
    'rdoc::markup::verbatim#accept()',
    'rdoc::markup::tohtml#accept_blank_line()',
    'rdoc::markup::tordoc#accept_blank_line()',
    'rdoc::markup::tottonly#accept_blank_line()',
    'kernelspecs::blockgiven::accept_block()',
    'kernelspecs::kernelblockgiven::accept_block()',
    'kernelspecs::selfblockgiven::accept_block()',
    'kernelspecs::blockgiven::accept_block_as_argument()',
    'kernelspecs::kernelblockgiven::accept_block_as_argument()',
    'kernelspecs::selfblockgiven::accept_block_as_argument()',
    'rdoc::markup::tohtml#accept_block_quote()',
    'rdoc::markup::tordoc#accept_block_quote()',
    'rdoc::markup::tottonly#accept_block_quote()',
    'cgi::accept_charset()',
    'cgi::accept_charset=()',
    'rdoc::markup::formatter#accept_document()',
    'rdoc::markup::totableofcontents#accept_document()',
    'rdoc::markup::tobs#accept_heading()',
    'rdoc::markup::tohtml#accept_heading()',
    'rdoc::markup::tohtmlsnippet#accept_heading()',
    'rdoc::markup::tordoc#accept_heading()',
    'rdoc::markup::totableofcontents#accept_heading()',
    'rdoc::markup::tottonly#accept_heading()',
    'rdoc::markup::tordoc#accept_indented_paragraph()',
    'rdoc::markup::tohtml#accept_list_end()',
    'rdoc::markup::tomarkdown#accept_list_end()',
    'rdoc::markup::tordoc#accept_list_end()',
    'rdoc::markup::tottonly#accept_list_end()',
    'rdoc::markup::toansi#accept_list_item_end()',
    'rdoc::markup::tohtml#accept_list_item_end()',
    'rdoc::markup::tohtmlsnippet#accept_list_item_end()',
    'rdoc::markup::tomarkdown#accept_list_item_end()',
    'rdoc::markup::tordoc#accept_list_item_end()',
    'rdoc::markup::tottonly#accept_list_item_end()',
    'rdoc::markup::toansi#accept_list_item_start()',
    'rdoc::markup::tohtml#accept_list_item_start()',
    'rdoc::markup::tohtmlsnippet#accept_list_item_start()',
    'rdoc::markup::tomarkdown#accept_list_item_start()',
    'rdoc::markup::tordoc#accept_list_item_start()',
    'rdoc::markup::tottonly#accept_list_item_start()',
    'rdoc::markup::tohtml#accept_list_start()',
    'rdoc::markup::tohtmlsnippet#accept_list_start()',
    'rdoc::markup::tomarkdown#accept_list_start()',
    'rdoc::markup::tordoc#accept_list_start()',
    'rdoc::markup::tottonly#accept_list_start()',
    'socket::accept_loop()',
    'openssl::ssl::sslsocket#accept_nonblock()',
    'rdoc::markup::tohtml#accept_paragraph()',
    'rdoc::markup::tohtmlsnippet#accept_paragraph()',
    'rdoc::markup::tojoinedparagraph#accept_paragraph()',
    'rdoc::markup::tordoc#accept_paragraph()',
    'rdoc::markup::tottonly#accept_paragraph()',
    'rdoc::markup::tohtml#accept_raw()',
    'rdoc::markup::tordoc#accept_raw()',
    'rdoc::markup::tottonly#accept_raw()',
    'rdoc::markup::tohtml#accept_rule()',
    'rdoc::markup::tomarkdown#accept_rule()',
    'rdoc::markup::tordoc#accept_rule()',
    'rdoc::markup::tottonly#accept_rule()',
    'gem::localremoteoptions#accept_uri_http()',
    'rdoc::markup::tohtml#accept_verbatim()',
    'rdoc::markup::tohtmlsnippet#accept_verbatim()',
    'rdoc::markup::tomarkdown#accept_verbatim()',
    'rdoc::markup::tordoc#accept_verbatim()',
    'rdoc::markup::tottonly#accept_verbatim()',
    'webrick::httpserver#access_log()',
    'net::ftp#acct()',
    'netftpspecs::dummyftp#acct()',
    'cmath::acos()',
    'math::acos()',
    'cmath::acosh()',
    'math::acosh()',
    'gem::resolver::molinillo::dependencygraph::action::action_name()',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular::action_name()',
    'gem::resolver::molinillo::dependencygraph::deleteedge::action_name()',
    'gem::resolver::molinillo::dependencygraph::detachvertexnamed::action_name()',
    'gem::resolver::molinillo::dependencygraph::tag::action_name()',
    'mspec::actions()',
    'gem::specification#activate()',
    'shell::processcontroller::activate()',
    'gem::specification#activate_dependencies()',
    'gem::resolver::molinillo::delegates::resolutionstate#activated()',
    'gem::basicspecification#activated?()',
    'net::http#active?()',
    'net::pop3#active?()',
    'shell::builtincommand#active?()',
    'shell::systemcommand#active?()',
    'shell::processcontroller#active_job?()',
    'shell::processcontroller#active_jobs()',
    'shell::processcontroller#active_jobs_exist?()',
    'shell::processcontroller::active_process_controllers()',
    'acl::acllist#add()',
    'benchmark::tms#add()',
    'gem::availableset#add()',
    'gem::dependencylist#add()',
    'gem::resolver::requirementlist#add()',
    'gem::testcase::staticset#add()',
    'psych::coder#add()',
    'rdoc::context#add()',
    'rdoc::generator::pot::po#add()',
    'rexml::attributes#add()',
    'rexml::doctype#add()',
    'rexml::document#add()',
    'rexml::elements#add()',
    'rexml::parent#add()',
    'returnspecs::savedinnerblock#add()',
    'rinda::tuplebag::tuplebin#add()',
    'syslog::logger#add()',
    'webrick::httpauth::htgroup#add()',
    'benchmark::tms#add!()',
    'gem::requestset::lockfile#add_git()',
    'rdoc::anymethod#add_alias()',
    'rdoc::attr#add_alias()',
    'rdoc::context#add_alias()',
    'rdoc::methodattr#add_alias()',
    'rdoc::stats#add_alias()',
    'rdoc::toplevel#add_alias()',
    'rdoc::ri::driver#add_also_in()',
    'gem::resolver::installerset#add_always_install()',
    'openssl::x509::request#add_attribute()',
    'rdoc::context#add_attribute()',
    'rdoc::stats#add_attribute()',
    'rexml::element#add_attribute()',
    'rexml::element#add_attributes()',
    'net::imap::add_authenticator()',
    'gem::specification#add_bindir()',
    'gem::localremoteoptions#add_bulk_threshold_option()',
    'rdoc::store#add_c_enclosure()',
    'rdoc::store#add_c_variables()',
    'openssl::x509::store#add_cert()',
    'openssl::ocsp::request#add_certid()',
    'openssl::pkcs7#add_certificate()',
    'openssl::ssl::sslcontext#add_certificate()',
    'gem::package#add_checksums()',
    'gem::resolver::molinillo::dependencygraph#add_child_vertex()',
    'rdoc::context#add_class()',
    'rdoc::ri::driver#add_class()',
    'rdoc::stats#add_class()',
    'rdoc::context#add_class_or_module()',
    'gem::localremoteoptions#add_clear_sources_option()',
    'rdoc::classmodule#add_comment()',
    'rdoc::context::section#add_comment()',
    'gem::command::add_common_option()',
    'rdoc::context#add_constant()',
    'rdoc::stats#add_constant()',
    'rdoc::toplevel#add_constant()',
    'openssl::pkcs7#add_crl()',
    'openssl::x509::store#add_crl()',
    'openssl::pkcs7#add_data()',
    'gem::server#add_date()',
    'gem::specification#add_dependency()',
    'gem::specification#add_development_dependency()',
    'zlib::inflate#add_dictionary()',
    'gem::resolver::molinillo::dependencygraph#add_edge()',
    'gem::resolver::molinillo::dependencygraph::log#add_edge_no_circular()',
    'rexml::document#add_element()',
    'rexml::element#add_element()',
    'openssl::x509::name#add_entry()',
    'rexml::validation::choice#add_event_to_arry()',
    'rexml::validation::state#add_event_to_arry()',
    'rdoc::context#add_extend()',
    'rdoc::ri::driver#add_extends()',
    'openssl::x509::crl#add_extension()',
    'openssl::x509::certificate#add_extension()',
    'openssl::x509::revoked#add_extension()',
    'rdoc::ri::driver#add_extension_modules()',
    'gem::command#add_extra_args()',
    'net::httpheader#add_field()',
    'gem::package::tarwriter#add_file()',
    'openssl::x509::store#add_file()',
    'rdoc::stats#add_file()',
    'rdoc::store#add_file()',
    'gem::package::tarwriter#add_file_digest()',
    'gem::package::tarwriter#add_file_signed()',
    'gem::package::tarwriter#add_file_simple()',
    'tracer::add_filter()',
    'rdoc::rd::blockparser#add_footnote()',
    'rdoc::ri::driver#add_from()',
    'rdoc::rdoc::add_generator()',
    'webrick::httpservlet::filehandler::add_handler()',
    'rss::element::add_have_children_element()',
    'rdoc::markup#add_html()',
    'rdoc::markup::attributemanager#add_html()',
    'rdoc::context#add_include()',
    'rdoc::toplevel#add_include()',
    'rdoc::ri::driver#add_includes()',
    'gem::installupdateoptions#add_install_update_options()',
    'gem::gemcutterutilities#add_key_option()',
    'rdoc::rd::blockparser#add_label()',
    'rdoc::methodattr#add_line_numbers()',
    'rexml::parsers::baseparser#add_listener()',
    'rexml::parsers::lightparser#add_listener()',
    'rexml::parsers::pullparser#add_listener()',
    'rexml::parsers::sax2parser#add_listener()',
    'rexml::parsers::streamparser#add_listener()',
    'rexml::parsers::treeparser#add_listener()',
    'rexml::parsers::ultralightparser#add_listener()',
    'gem::resolver::installerset#add_local()',
    'gem::localremoteoptions#add_local_remote_options()',
    'rss::maker::add_maker()',
    'rdoc::context#add_method()',
    'rdoc::ri::driver#add_method()',
    'rdoc::stats#add_method()',
    'rdoc::toplevel#add_method()',
    'rdoc::ri::driver#add_method_documentation()',
    'rdoc::ri::driver#add_method_list()',
    'rdoc::context#add_module()',
    'rdoc::stats#add_module()',
    'rdoc::context#add_module_alias()',
    'rexml::element#add_namespace()',
    'rss::element::add_need_initialize_variable()',
    'rss::maker::base::add_need_initialize_variable()',
    'openssl::ocsp::basicresponse#add_nonce()',
    'openssl::ocsp::request#add_nonce()',
    'precedencespecs::nonunaryoptest#add_num()',
    'rubyvm::instruction#add_optimized()',
    'gem::command#add_option()',
    'rss::maker::base::add_other_element()',
    'gem::commands::ownercommand#add_owners()',
    'rdoc::markup::tohtmlsnippet#add_paragraph()',
    'gem::commands::environmentcommand#add_path()',
    'openssl::x509::store#add_path()',
    'gem::platformmismatch#add_platform()',
    'gem::versionoption#add_platform_option()',
    'rss::element::add_plural_form()',
    'gem::versionoption#add_prerelease_option()',
    'drb::drbprotocol::add_protocol()',
    'gem::localremoteoptions#add_proxy_option()',
    'openssl::pkcs7#add_recipient()',
    'rdoc::context#add_require()',
    'net::imap#add_response_handler()',
    'openssl::x509::crl#add_revoked()',
    'gem::specification#add_runtime_dependency()',
    'rubyvm::instruction#add_sc()',
    'shell::processcontroller#add_schedule()',
    'rdoc::context#add_section()',
    'gem::securityoption#add_security_option()',
    'gem::specification#add_self_to_load_path()',
    'openssl::pkcs7#add_signer()',
    'gem::resolver::sourceset#add_source_gem()',
    'gem::localremoteoptions#add_source_option()',
    'gem::specification::add_spec()',
    'rdoc::markup#add_special()',
    'rdoc::markup::attributemanager#add_special()',
    'rdoc::markup::formatter#add_special_rdoclink()',
    'rdoc::markup::formatter#add_special_tidylink()',
    'gem::command::add_specific_extra_args()',
    'gem::specification::add_specs()',
    'openssl::ocsp::basicresponse#add_status()',
    'precedencespecs::nonunaryoptest#add_str()',
    'gc::add_stress_to_class()',
    'gem::package::tarwriter#add_symlink()',
    'rdoc::markup::formatter#add_tag()',
    'rexml::element#add_text()',
    'rdoc::markup::textformattertestcase::add_text_tests()',
    'rdoc::context#add_to()',
    'rdoc::toplevel#add_to_classes_or_modules()',
    'rss::element::add_to_element_method()',
    'gem::testcase#add_to_fetcher()',
    'rdoc::tokenstream#add_token()',
    'rdoc::parser::rubytools#add_token_listener()',
    'rdoc::tokenstream#add_tokens()',
    'rubyvm::instruction#add_unif()',
    'gem::localremoteoptions#add_update_sources_option()',
    'openssl::config#add_value()',
    'precedencespecs::nonunaryoptest#add_var()',
    'gem::versionoption#add_version_option()',
    'gem::resolver::molinillo::dependencygraph#add_vertex()',
    'gem::resolver::molinillo::dependencygraph::log#add_vertex()',
    'rdoc::markup::formattertestcase::add_visitor_tests()',
    'rdoc::markup#add_word_pair()',
    'rdoc::markup::attributemanager#add_word_pair()',
    'openssl::ssl::socketforwarder#addr()',
    'socket::ifaddr#addr()',
    'socketspecs::addr()',
    'zlib::zstream#adler()',
    'zlib::adler32()',
    'zlib::adler32_combine()',
    'vcs::git#after_export()',
    'vcs::svn#after_export()',
    'gem::resolver::molinillo::ui#after_resolution()',
    'kernelspecs::foo#aka()',
    'methodspecs::sourcelocation#aka()',
    'unboundmethodspecs::sourcelocation#aka()',
    'gem::streamui#alert()',
    'gem::userinteraction#alert()',
    'gem::streamui#alert_error()',
    'gem::userinteraction#alert_error()',
    'gem::streamui#alert_warning()',
    'gem::userinteraction#alert_warning()',
    'psych::emitter#alias()',
    'psych::handler#alias()',
    'psych::treebuilder#alias()',
    'unboundmethodspecs::methods#alias_1()',
    'unboundmethodspecs::methods#alias_2()',
    'shell::alias_command()',
    'shell::commandprocessor::alias_command()',
    'rdoc::parser::alias_extension()',
    'shell::commandprocessor::alias_map()',
    'super::singletonaliascase::base#alias_on_singleton()',
    'modulespecs::aliasingsuper::redefineafteralias#alias_super_call()',
    'encoding::aliases()',
    'gem::validator#alien()',
    'drb::drbserver#alive?()',
    'drb::extserv#alive?()',
    'drb::http0::clientside#alive?()',
    'drb::http0::serverside#alive?()',
    'rinda::tupleentry#alive?()',
    'threadspecs::status#alive?()',
    'gem::specification::all()',
    'net::popmail#all()',
    'gem::specification::all=()',
    'rdoc::store#all_classes()',
    'rdoc::store#all_classes_and_modules()',
    'rdoc::store#all_files()',
    'rdoc::store#all_modules()',
    'gem::specification::all_names()',
    'gem::testcase#all_spec_names()',
    'gem::availableset#all_specs()',
    'symbol::all_symbols()',
    'threadswait::all_waits()',
    'object::allocate()',
    'objectspace::allocation_class_path()',
    'objectspace::allocation_generation()',
    'objectspace::allocation_method_id()',
    'objectspace::allocation_sourcefile()',
    'objectspace::allocation_sourceline()',
    'gem::resolver#allow_missing?()',
    'gem::resolver::molinillo::delegates::specificationprovider#allow_missing?()',
    'gem::resolver::molinillo::specificationprovider#allow_missing?()',
    'json::ext::generator::state#allow_nan?()',
    'random::formatter#alphanumeric()',
    'openssl::ssl::sslsocket#alpn_protocol()',
    'gem::security::alt_name_or_x509_entry()',
    'rss::xmlstylesheet#alternate=()',
    'gem::resolver::molinillo::dependencygraph::vertex#ancestor?()',
    'rdoc::classmodule#ancestors()',
    'rdoc::normalclass#ancestors()',
    'rdoc::singleclass#ancestors()',
    'rdoc::store#ancestors()',
    'rdoc::ri::driver#ancestors_of()',
    'netftpspecs::dummyftp#and_respond()',
    'rdoc::markup::formatter#annotate()',
    'rdoc::markup::tobs#annotate()',
    'classspecs::f#another()',
    'modulespecs::ancestor#another_method_to_undef()',
    'modulespecs::parent#another_method_to_undef()',
    'kernelspecs::parent#another_parent_method()',
    'modulespecs::parent#another_parent_method()',
    'rdoc::context#any_content()',
    'gem::fakefetcher#api_endpoint()',
    'gem::remotefetcher#api_endpoint()',
    'gem::gemcutterutilities#api_key()',
    'gem::configfile#api_keys()',
    'net::apop#apop?()',
    'net::pop3#apop?()',
    'gem::installer#app_script_text()',
    'rbinstall::unpackedinstaller#app_script_text()',
    'netftpspecs::dummyftp#appe()',
    'net::imap#append()',
    'optionparser::list#append()',
    'rdoc::rd::inline#append()',
    'shell::commandprocessor#append()',
    'webrick::httputils::formdata#append_data()',
    'kernelspecs::m::append_features()',
    'object::append_features()',
    'rss::atom::commonmodel::append_features()',
    'rss::atom::contentmodel::append_features()',
    'rss::atom::dateconstruct::append_features()',
    'rss::atom::personconstruct::append_features()',
    'rss::atom::textconstruct::append_features()',
    'rss::atom::uricontentmodel::append_features()',
    'rss::basedublincoremodel#append_features()',
    'rss::contentmodel::append_features()',
    'rss::ituneschannelmodel::append_features()',
    'rss::itunesitemmodel::append_features()',
    'rss::imagefaviconmodel::append_features()',
    'rss::imageitemmodel::append_features()',
    'rss::maker::atompersonconstructbase::append_features()',
    'rss::maker::atomtextconstructbase::append_features()',
    'rss::maker::contentmodel::append_features()',
    'rss::maker::dublincoremodel::append_features()',
    'rss::maker::ituneschannelmodel::append_features()',
    'rss::maker::itunesitemmodel::append_features()',
    'rss::maker::imagefaviconmodel::append_features()',
    'rss::maker::imageitemmodel::append_features()',
    'rss::maker::slashmodel::append_features()',
    'rss::maker::syndicationmodel::append_features()',
    'rss::maker::taxonomytopicmodel::append_features()',
    'rss::maker::taxonomytopicsmodel::append_features()',
    'rss::maker::trackbackmodel::append_features()',
    'rss::rss09::append_features()',
    'rss::rss10::append_features()',
    'rss::slashmodel::append_features()',
    'rss::syndicationmodel::append_features()',
    'rss::taxonomytopicmodel::append_features()',
    'rss::taxonomytopicsmodel::append_features()',
    'sync_m::append_features()',
    'net::ftp::mlsxentry#appendable?()',
    'gem::version#approximate_recommendation()',
    'rdoc::alias#aref()',
    'rdoc::classmodule#aref()',
    'rdoc::context::section#aref()',
    'rdoc::methodattr#aref()',
    'rdoc::anymethod#aref_prefix()',
    'rdoc::attr#aref_prefix()',
    'rdoc::methodattr#aref_prefix()',
    'rdoc::generator::markup#aref_to()',
    'rdoc::anymethod#arglists()',
    'gem::command#arguments()',
    'process::argv0()',
    'procspecs::arity#arity_check()',
    'win32ole_variant::array()',
    'gem::specification::array_attributes()',
    'json::ext::generator::state#array_nl()',
    'json::ext::generator::state#array_nl=()',
    'arrayspecs::array_with_7bit_utf8_and_usascii_strings()',
    'arrayspecs::array_with_usascii_and_7bit_ascii8bit_strings()',
    'arrayspecs::array_with_usascii_and_7bit_utf8_strings()',
    'arrayspecs::array_with_usascii_and_ascii8bit_strings()',
    'arrayspecs::array_with_usascii_and_utf8_strings()',
    'arrayspecs::array_with_utf8_and_7bit_ascii8bit_strings()',
    'arrayspecs::array_with_utf8_and_ascii8bit_strings()',
    'arrayspecs::array_with_utf8_and_usascii_strings()',
    'rdoc::generator::markup#as_href()',
    'json::genericobject#as_json()',
    'reflectspecs::a::as_pro()',
    'reflectspecs::a::as_pub()',
    'rdoc::markup::attributes#as_string()',
    'stringspecs::iso88599encoding#ascii_only()',
    'json::ext::generator::state#ascii_only?()',
    'encoding::converter::asciicompat_encoding()',
    'cmath::asin()',
    'math::asin()',
    'cmath::asinh()',
    'math::asinh()',
    'gem::mockgemui#ask()',
    'gem::streamui#ask()',
    'gem::userinteraction#ask()',
    'gem::streamui#ask_for_password()',
    'gem::userinteraction#ask_for_password()',
    'gem::testcase#ask_if_ok()',
    'gem::streamui#ask_yes_no()',
    'gem::userinteraction#ask_yes_no()',
    'openssl::pkey::ec::group#asn1_flag()',
    'openssl::pkey::ec::group#asn1_flag=()',
    'rdoc::generator::darkfish#assemble_template()',
    'gem::testcase#assert_activate()',
    'gem::testcase#assert_contains_make_command()',
    'rdoc::testcase#assert_directory()',
    'rdoc::testcase#assert_file()',
    'gem::package::tartestcase#assert_headers_equal()',
    'gem::testcase#assert_path_exists()',
    'rdoc::servlet#asset()',
    'fiddle::cstructentity#assign_names()',
    'env::assoc()',
    'gem::installer::at()',
    'time::at()',
    'cmath::atan()',
    'math::atan()',
    'cmath::atan2()',
    'math::atan2()',
    'cmath::atanh()',
    'math::atanh()',
    'file::atime()',
    'file::stat#atime()',
    'rss::atom::dateconstruct#atom_validate()',
    'rss::atom::feed::entry::content#atom_validate()',
    'rss::atom::textconstruct#atom_validate()',
    'rexml::sax2listener#attlistdecl()',
    'rexml::streamlistener#attlistdecl()',
    'rexml::parsers::pullevent#attlistdecl?()',
    'rdoc::markup::attributemanager#attribute()',
    'rexml::element#attribute()',
    'rexml::quickpath::attribute()',
    'gem::specification::attribute_names()',
    'rexml::doctype#attribute_of()',
    'openssl::x509::request#attributes()',
    'rdoc::markup::tordoc#attributes()',
    'rdoc::store#attributes()',
    'uri::ldap#attributes()',
    'openssl::x509::request#attributes=()',
    'uri::ldap#attributes=()',
    'rexml::doctype#attributes_of()',
    'net::smtp#auth_cram_md5()',
    'openssl::cipher#auth_data=()',
    'net::smtp#auth_login()',
    'net::pop3::auth_only()',
    'net::pop3#auth_only()',
    'net::smtp#auth_plain()',
    'openssl::cipher#auth_tag()',
    'openssl::cipher#auth_tag=()',
    'openssl::cipher#auth_tag_len=()',
    'net::imap#authenticate()',
    'net::smtp#authenticate()',
    'webrick::httpauth::basicauth#authenticate()',
    'webrick::httpauth::digestauth#authenticate()',
    'openssl::cipher#authenticated?()',
    'gem::specification#author()',
    'gem::specification#author=()',
    'gem::specification#authors()',
    'gem::specification#authors=()',
    'zlib::zstream#avail_in()',
    'zlib::zstream#avail_out()',
    'zlib::zstream#avail_out=()',
    'gem::specfetcher#available_specs()',
    'rss::baselistener::available_tags()',
    'modulespecs::cyclicbarrier#await()',
    'rexml::quickpath::axe()',
    'namemapspecs::a::b#b()',
    'super::zsuperwithblock::a#b()',
    'super::zsuperwithblock::b#b()',
    'reflectspecs::b#b_pro()',
    'reflectspecs::b#b_pub()',
    'exceptionspecs::backtrace::backtrace()',
    'exceptionspecs::unexceptional#backtrace()',
    'gem::configfile#backtrace()',
    'gem::streamui#backtrace()',
    'gem::resolver::stats#backtracking!()',
    'kernelspecs::foo#bar()',
    'kernelspecs::foo::bar()',
    'methodspecs::d#bar()',
    'methodspecs::methods#bar()',
    'methodspecs::mymod#bar()',
    'modulespecs::instancemethmod#bar()',
    'sendspecs::foo#bar()',
    'sendspecs::foo::bar()',
    'super::ms1::moda#bar()',
    'super::ms1::modb#bar()',
    'super::ms3::b::bar()',
    'super::ms3::moda#bar()',
    'super::s1::a#bar()',
    'super::s1::b#bar()',
    'super::s3::a::bar()',
    'super::s3::b::bar()',
    'tracepointspec::a#bar()',
    'tracepointspec::c#bar()',
    'unboundmethodspecs::methods#bar()',
    'cgi::htmlextension#base()',
    'random::formatter#base64()',
    'digest::class::base64digest()',
    'digest::instance#base64digest()',
    'digest::instance#base64digest!()',
    'gem::basicspecification#base_dir()',
    'gem::specification#base_dir()',
    'rubyvm::instructionsequence#base_label()',
    'thread::backtrace::location#base_label()',
    'rdoc::toplevel#base_name()',
    'file::basename()',
    'openssl::ocsp::response#basic()',
    'net::httpheader#basic_auth()',
    'webrick::httpauth#basic_auth()',
    'readline::basic_quote_characters()',
    'readline::basic_quote_characters=()',
    'readline::basic_word_break_characters()',
    'readline::basic_word_break_characters=()',
    'vector::basis()',
    'methodspecs::a#baz()',
    'private::b::c#baz()',
    'sendspecs::foo#baz()',
    'super::ms2::a#baz()',
    'super::ms2::c#baz()',
    'super::s2::a#baz()',
    'super::s2::c#baz()',
    'unboundmethodspecs::a#baz()',
    'gem::resolver::molinillo::ui#before_resolution()',
    'rdoc::task#before_running_rdoc()',
    'rdoc::stats#begin_adding()',
    'rdoc::stats::quiet#begin_adding()',
    'rescuespecs::begin_else()',
    'rescuespecs::begin_else_ensure()',
    'rescuespecs::begin_else_return()',
    'rescuespecs::begin_else_return_ensure()',
    'gem::command#begins?()',
    'benchmark::benchmark()',
    'benchmarkdriver::benchmark()',
    'gem::specification#bin_dir()',
    'gem::specification#bin_file()',
    'gem::bin_path()',
    'net::ftp#binary=()',
    'rdoc::parser::binary?()',
    'gem::binary_mode()',
    'fiddle::importer#bind()',
    'fiddle::importer#bind_function()',
    'gem::bindir()',
    'io::binread()',
    'io::binwrite()',
    'file::birthtime()',
    'file::stat#birthtime()',
    'openssl::bn#bit_set?()',
    'rdoc::markup::attributes#bitmap_for()',
    'redblacktree::node#black?()',
    'objectspacefixtures::blah()',
    'squigglyheredocspecs::blank()',
    'rdoc::testcase#blank_line()',
    'languagespecs::blanks()',
    'openssl::pkey::rsa#blinding_off!()',
    'openssl::pkey::rsa#blinding_on!()',
    'file::stat#blksize()',
    'rdoc::testcase#block()',
    'filespecs::block_device()',
    'digest::base#block_length()',
    'digest::instance#block_length()',
    'digest::sha2#block_length()',
    'openssl::digest#block_length()',
    'threadbacktracelocationspecs::block_location()',
    'shell::processcontroller::block_output_synchronize()',
    'rdoc::methodattr#block_params=()',
    'openssl::cipher#block_size()',
    'file::blockdev?()',
    'file::stat#blockdev?()',
    'cgi::htmlextension#blockquote()',
    'file::stat#blocks()',
    'benchmark::bm()',
    'benchmark::bmbm()',
    'net::httpresponse#body()',
    'object::body()',
    'webrick::httprequest#body()',
    'net::httpgenericrequest#body=()',
    'net::httpresponse#body=()',
    'net::httpgenericrequest#body_exist?()',
    'net::httpresponse::body_permitted?()',
    'net::httpgenericrequest#body_stream=()',
    'socket::option::bool()',
    'socket::option#bool()',
    'rexml::functions::boolean()',
    'gem::localremoteoptions#both?()',
    'irb::frame#bottom()',
    'irb::frame::bottom()',
    'vcs::git#branch()',
    'vcs::svn#branch()',
    'vcs::git#branch_list()',
    'vcs::svn#branch_list()',
    'breakspecs::lambda#break_in_block_in_method()',
    'breakspecs::block#break_in_block_in_while()',
    'breakspecs::lambda#break_in_defining_scope()',
    'breakspecs::block#break_in_method()',
    'breakspecs::lambda#break_in_method()',
    'breakspecs::block#break_in_method_captured()',
    'breakspecs::lambda#break_in_method_yield()',
    'breakspecs::block#break_in_nested_method()',
    'breakspecs::lambda#break_in_nested_scope()',
    'breakspecs::lambda#break_in_nested_scope_block()',
    'breakspecs::lambda#break_in_nested_scope_yield()',
    'breakspecs::block#break_in_yield_captured()',
    'breakspecs::block#break_in_yielding_method()',
    'breakspecs::block#break_nil()',
    'rdoc::markdown#break_on_newline()',
    'debugger__::break_points()',
    'breakspecs::block#break_value()',
    'prettyprint::singleline#breakable()',
    'socket::ifaddr#broadaddr()',
    'monitormixin::conditionvariable#broadcast()',
    'reflectspecs::b::bs_pro()',
    'reflectspecs::b::bs_pub()',
    'digest::bubblebabble()',
    'digest::class::bubblebabble()',
    'digest::instance#bubblebabble()',
    'win32::sspi::securitybuffer#buffersize()',
    'win32::sspi::securitybuffer#buffertype()',
    'json::ext::generator::state#buffer_initial_length()',
    'json::ext::generator::state#buffer_initial_length=()',
    'gem::commands::certcommand#build()',
    'gem::ext::cmakebuilder::build()',
    'gem::ext::configurebuilder::build()',
    'gem::ext::extconfbuilder::build()',
    'gem::ext::rakebuilder::build()',
    'gem::package::build()',
    'gem::package#build()',
    'gem::requestset::lockfile::build()',
    'matrix::build()',
    'rubyvm::sourcecodegenerator::build()',
    'stringiospecs::build()',
    'uri::ftp::build()',
    'uri::generic::build()',
    'uri::http::build()',
    'uri::ldap::build()',
    'uri::mailto::build()',
    'uri::generic::build2()',
    'gem::command::build_args()',
    'gem::specification#build_args()',
    'gem::command::build_args=()',
    'gem::ext::builder#build_extensions()',
    'gem::installer#build_extensions()',
    'rbinstall::unpackedinstaller#build_extensions()',
    'rdoc::markup::parser#build_heading()',
    'rdoc::tomdoc#build_heading()',
    'rdoc::generator::jsonindex#build_index()',
    'gem::indexer#build_indices()',
    'gem::specification#build_info_dir()',
    'gem::specification#build_info_file()',
    'rdoc::markup::parser#build_list()',
    'gem::indexer#build_marshal_gemspecs()',
    'gem::indexer#build_modern_index()',
    'gem::indexer#build_modern_indices()',
    'rdoc::markup::parser#build_paragraph()',
    'rdoc::tomdoc#build_paragraph()',
    'gem::testcase#build_rake_in()',
    'rubyvm::sourcecodegenerator#build_string()',
    'actionmap::build_tree()',
    'rdoc::markup::parser#build_verbatim()',
    'rdoc::tomdoc#build_verbatim()',
    'openssl::pkey::ec::builtin_curves()',
    'gem::version#bump()',
    'gem::specification#bundled_gem_in_old_ruby?()',
    'gem::bundlerversionfinder::bundler_version()',
    'gem::bundlerversionfinder::bundler_version_with_reason()',
    'csv::table#by_col()',
    'csv::table#by_col!()',
    'csv::table#by_col_or_row()',
    'csv::table#by_col_or_row!()',
    'openssl::engine::by_id()',
    'csv::table#by_row()',
    'csv::table#by_row!()',
    'socket::option::byte()',
    'socket::option#byte()',
    'rexml::child#bytes()',
    'securerandom::bytes()',
    'zlib::gzipreader#bytes()',
    'gem::package::tarreader::entry#bytes_read()',
    'evalspecs::a#c()',
    'namemapspecs::a#c()',
    'super::zsuperwithblock::a#c()',
    'super::zsuperwithblock::b#c()',
    'reflectspecs::c#c_pro()',
    'reflectspecs::c#c_pub()',
    'prime::trialdivision#cache()',
    'gem::source#cache_dir()',
    'gem::specification#cache_dir()',
    'downloader::cache_file()',
    'gem::specification#cache_file()',
    'rdoc::store#cache_path()',
    'gem::fakefetcher#cache_update_path()',
    'gem::remotefetcher#cache_update_path()',
    'gem::package::tartestcase#calc_checksum()',
    'rdoc::stats#calculate()',
    'fiddle::closure::blockcaller#call()',
    'fiddle::function#call()',
    'logger::formatter#call()',
    'syslog::logger::formatter#call()',
    'ensurespec::test#call_block()',
    'evalspecs::call_eval()',
    'mainspecs::call_foo()',
    'object::call_foo()',
    'breakspecs::block#call_method()',
    'langsendspecs::privategetter#call_self_foo()',
    'langsendspecs::privatesetter#call_self_foo_equals()',
    'langsendspecs::privatesetter#call_self_foo_equals_masgn()',
    'langsendspecs::privategetter#call_self_foo_or_equals()',
    'rdoc::anymethod#call_seq=()',
    'capiclassspecs::sub#call_super_method()',
    'capiclassspecs::subsub#call_super_method()',
    'capiclassspecs::super#call_super_method()',
    'nameerrorspecs::receiverclass#call_undefined_class_variable()',
    'kernelspecs::evaltest::call_yield()',
    'modulespecs::nesting::nestedclass::called_from_class_method()',
    'modulespecs::nesting::nestedclass#called_from_inst_method()',
    'modulespecs::nesting::called_from_module_method()',
    'rdoc::parser::can_parse()',
    'rdoc::parser::can_parse_by_name()',
    'rinda::tupleentry#cancel()',
    'rinda::waittemplateentry#cancel()',
    'webrick::utils::timeouthandler::cancel()',
    'rinda::tupleentry#canceled?()',
    'optionparser::completion::candidate()',
    'optionparser::completion#candidate()',
    'psych::emitter#canonical()',
    'psych::emitter#canonical=()',
    'net::httpheader#canonical_each()',
    'gem::version#canonical_segments()',
    'net::smtp::response#capabilities()',
    'net::imap#capability()',
    'net::smtp#capable_auth_types()',
    'net::smtp#capable_cram_md5_auth?()',
    'net::smtp#capable_login_auth?()',
    'net::smtp#capable_plain_auth?()',
    'net::smtp#capable_starttls?()',
    'thread::capi_thread_specs=()',
    'cgi::htmlextension#caption()',
    'open3::capture2()',
    'open3::capture2e()',
    'open3::capture3()',
    'breakspecs::block#capture_block()',
    'shell::commandprocessor#cat()',
    'timeout::error::catch()',
    'catchspecs::catching_method()',
    'cmath::cbrt()',
    'math::cbrt()',
    'fileutils::cd()',
    'shell::cd()',
    'rexml::sax2listener#cdata()',
    'rexml::streamlistener#cdata()',
    'rexml::parsers::pullevent#cdata?()',
    'rexml::element#cdatas()',
    'netftpspecs::dummyftp#cdup()',
    'stringspecs::iso88599encoding#cedilla()',
    'rexml::functions::ceiling()',
    'jisx0208::char#cell()',
    'openssl::ssl::sslsocket#cert()',
    'gem::request#cert_files()',
    'gem::security::trustdir#cert_path()',
    'gem::testcase::cert_path()',
    'openssl::ocsp::singleresponse#cert_status()',
    'openssl::ocsp::request#certid()',
    'openssl::ocsp::singleresponse#certid()',
    'openssl::pkcs7#certificates()',
    'openssl::pkcs7#certificates=()',
    'gem::commands::certcommand#certificates_matching()',
    'net::pop3::certs()',
    'cgispecs::cgi_new()',
    'openssl::x509::storecontext#chain()',
    'openssl::netscape::spki#challenge()',
    'webrick::httpauth::basicauth#challenge()',
    'webrick::httpauth::digestauth#challenge()',
    'openssl::netscape::spki#challenge=()',
    'rdoc::markup::attributemanager#change_attribute()',
    'rdoc::encoding::change_encoding()',
    'process::gid::change_privilege()',
    'process::uid::change_privilege()',
    'irb::context#change_workspace()',
    'rdoc::markup::attributemanager#changed_attribute_by_name()',
    'rdoc::markup::parser#char_pos()',
    'rss::rexmllikexmlparser#character()',
    'filespecs::character_device()',
    'rexml::sax2listener#characters()',
    'file::chardev?()',
    'file::stat#chardev?()',
    'openuri::meta#charset()',
    'dir::chdir()',
    'fileutils::chdir()',
    'net::ftp#chdir()',
    'bug::typeddata::check()',
    'net::imap#check()',
    'pty::check()',
    'rexml::text::check()',
    'win32::registry::api#check()',
    'divmodspecs::check_both_bigdecimal()',
    'divmodspecs::check_both_nan()',
    'gem::security::policy#check_cert()',
    'gem::security::policy#check_chain()',
    'json::ext::generator::state#check_circular?()',
    'gem::package::tarwriter#check_closed()',
    'gem::configfile#check_credentials_permissions()',
    'gem::security::policy#check_data()',
    'rbinstall::unpackedinstaller#check_executable_overwrite()',
    'rdoc::options#check_files()',
    'openssl::check_func()',
    'openssl::check_func_or_macro()',
    'gem::commands::checkcommand#check_gems()',
    'rdoc::options#check_generator()',
    'drb::drbserver#check_insecure_method()',
    'pp::ppmethods#check_inspect_key()',
    'gem::security::policy#check_key()',
    'openssl::pkey::ec#check_key()',
    'rdoc::parser::check_modeline()',
    'rdoc::task#check_names()',
    'openssl::ocsp::request#check_nonce()',
    'openssl::x509::certificate#check_private_key()',
    'gem::security::policy#check_root()',
    'gem::commands::setupcommand#check_ruby_version()',
    'gem::security::policy#check_trust()',
    'openssl::ocsp::singleresponse#check_validity()',
    'cgi::htmlextension#checkbox()',
    'cgi::htmlextension#checkbox_group()',
    'metaclassspecs::a::cheese()',
    'metaclassspecs::b::cheese()',
    'rdoc::context#child_name()',
    'dir::children()',
    'rexml::light::node#children()',
    'rexml::parent#children()',
    'file::chmod()',
    'fileutils::chmod()',
    'fileutils::chmod_r()',
    'kernelspecs::chomp()',
    'gem::streamui#choose_from_list()',
    'gem::userinteraction#choose_from_list()',
    'kernelspecs::chop()',
    'file::chown()',
    'fileutils::chown()',
    'fileutils::chown_r()',
    'dir::chroot()',
    'enumerator::lazy#chunk()',
    'enumerator::lazy#chunk_while()',
    'webrick::httpresponse#chunked=()',
    'net::httpheader#chunked?()',
    'webrick::httpresponse#chunked?()',
    'openssl::engine#cipher()',
    'openssl::ssl::sslsocket#cipher()',
    'openssl::pkcs7#cipher=()',
    'openssl::cipher::ciphers()',
    'openssl::ssl::sslcontext#ciphers()',
    'openssl::ssl::sslcontext#ciphers=()',
    'date::civil()',
    'datetime::civil()',
    'win32::registry::predefinedkey#class()',
    'rdoc::context#class_attributes()',
    'rdoc::generator::darkfish#class_dir()',
    'rdoc::generator::jsonindex#class_dir()',
    'rdoc::generator::pot#class_dir()',
    'rdoc::ri::driver#class_document()',
    'rdoc::store#class_file()',
    'unboundmethodspecs::parent::class_method()',
    'rdoc::context#class_method_list()',
    'rdoc::store#class_methods()',
    'gem::ext::builder::class_name()',
    'rss::baselistener::class_name()',
    'objectspace::class_name_of()',
    'rdoc::store#class_path()',
    'definedspecs::basic#class_variable_defined()',
    'definedspecs::basic#class_variable_undefined()',
    'ivarmodmock::class_variables()',
    'rdoc::context#classes()',
    'rdoc::ri::driver#classes()',
    'rdoc::ri::driver#classes_and_includes_and_extends_for()',
    'rdoc::context#classes_and_modules()',
    'rdoc::context#classes_hash()',
    'rdoc::store#classes_hash()',
    'gem::commands::cleanupcommand#clean_gems()',
    'gem::text#clean_text()',
    'mock::cleanup()',
    'openssl::engine::cleanup()',
    'openssl::x509::storecontext#cleanup()',
    'processspecs::signalizer#cleanup()',
    'env::clear()',
    'gc::profiler::clear()',
    'gem::dependencylist#clear()',
    'gem::sourcelist#clear()',
    'scratchpad::clear()',
    'specguard::clear()',
    'openssl::bn#clear_bit!()',
    'rdoc::classmodule#clear_comment()',
    'mspec::clear_current()',
    'gem::clear_default_specs()',
    'dirspecs::clear_dirs()',
    'mspec::clear_expectations()',
    'specguard::clear_guards()',
    'mspec::clear_modes()',
    'gem::clear_paths()',
    'mock::clear_replaced()',
    'threadspecs::clear_state()',
    'openssl::ssl::sslsocket#client_ca()',
    'webrick::httpstatus::client_error?()',
    'rdoc::task#clobber_task_description()',
    'process::clock_getres()',
    'process::clock_gettime()',
    'enumerablespecs::undupable#clone()',
    'rexml::attribute#clone()',
    'rexml::cdata#clone()',
    'rexml::comment#clone()',
    'rexml::doctype#clone()',
    'rexml::document#clone()',
    'rexml::element#clone()',
    'rexml::instruction#clone()',
    'rexml::text#clone()',
    'rexml::xmldecl#clone()',
    'cgi::session#close()',
    'cgi::session::filestore#close()',
    'cgi::session::memorystore#close()',
    'cgi::session::nullstore#close()',
    'cgi::session::pstore#close()',
    'drb::http0::callback#close()',
    'drb::http0::clientside#close()',
    'drb::http0::server#close()',
    'drb::http0::serverside#close()',
    'fiddle::handle#close()',
    'gem::package::tarreader#close()',
    'gem::package::tarreader::entry#close()',
    'gem::package::tarwriter#close()',
    'gem::silentui#close()',
    'gem::streamui#close()',
    'logger::logdevice#close()',
    'net::ftp#close()',
    'net::imap#close()',
    'openssl::buffering#close()',
    'openssl::ssl::sslserver#close()',
    'resolv::dns#close()',
    'syslog::close()',
    'webrick::basiclog#close()',
    'win32::registry#close()',
    'win32::registry::predefinedkey#close()',
    'zlib::gzipfile#close()',
    'zlib::zstream#close()',
    'gem::remotefetcher#close_all()',
    'fiddle::handle#close_enabled?()',
    'gem::package::tarreader::entry#closed?()',
    'gem::package::tarwriter#closed?()',
    'net::ftp#closed?()',
    'openssl::ssl::socketforwarder#closed?()',
    'zlib::gzipfile#closed?()',
    'zlib::zstream#closed?()',
    'iospecs::closed_io()',
    'modulespecs::cvars::cls()',
    'modulespecs::a::cma()',
    'modulespecs::b::cmb()',
    'vcs::git::cmd_args()',
    'vcs::git#cmd_pipe()',
    'vcs::git::cmd_pipe_at()',
    'vcs::git#cmd_read()',
    'vcs::git::cmd_read_at()',
    'openssl::engine#cmds()',
    'classspecs::e::cmeth()',
    'fileutils::cmp()',
    'openssl::bn#cmp()',
    'openssl::ocsp::certificateid#cmp()',
    'openssl::x509::name#cmp()',
    'openssl::ocsp::certificateid#cmp_issuer()',
    'socket::ancillarydata#cmsg_is?()',
    'webrick::httpstatus::status#code()',
    'irb::workspace#code_around_binding()',
    'win32ole::codepage()',
    'win32ole::codepage=()',
    'floatspecs::cancoerce#coerce()',
    'openssl::bn#coerce()',
    'uri::generic#coerce()',
    'openssl::pkey::ec::group#cofactor()',
    'enumerator::lazy#collect()',
    'rexml::elements#collect()',
    'enumerator::lazy#collect_concat()',
    'rdoc::parser::ruby#collect_first_comment()',
    'rdoc::tokenstream#collect_tokens()',
    'iospecs::collector()',
    'ripper::filter#column()',
    'matrix::column_vector()',
    'matrix::columns()',
    'matrix::combine()',
    'pp::ppmethods#comma_breakable()',
    'drb::extservmanager::command()',
    'drb::extservmanager::command=()',
    'gem::commandmanager#command_names()',
    'rdoc::testcase#comment()',
    'rexml::sax2listener#comment()',
    'rexml::streamlistener#comment()',
    'rubyvm::sourcecodegenerator#comment()',
    'zlib::gzipfile#comment()',
    'rdoc::codeobject#comment=()',
    'zlib::gzipwriter#comment=()',
    'rexml::parsers::pullevent#comment?()',
    'rexml::element#comments()',
    'date::commercial()',
    'datetime::commercial()',
    'rubyvm::sourcecodegenerator#commit()',
    'vcs::git#commit()',
    'vcs::svn#commit()',
    'gem::testcase#common_installer_setup()',
    'gem::testcase#common_installer_teardown()',
    'gem::command::common_options()',
    'gem::indexer#compact_specs()',
    'fileutils::compare_file()',
    'rexml::functions::compare_language()',
    'fileutils::compare_stream()',
    'arrayspecs::mockforcompared::compared?()',
    'encoding::compatible?()',
    'gem::bundlerversionfinder::compatible?()',
    'regexp::compile()',
    'ruby2html::compile()',
    'rubyvm::instructionsequence::compile()',
    'rubyvm::instructionsequence::compile_and_save_iseq()',
    'rubyvm::instructionsequence::basicstorage#compile_and_save_iseq()',
    'rubyvm::instructionsequence::nullstorage#compile_and_save_isq()',
    'rubyvm::instructionsequence::compile_file()',
    'rubyvm::instructionsequence::compile_option()',
    'rubyvm::instructionsequence::compile_option=()',
    'gem::commands::lockcommand#complain()',
    'optionparser::completion#complete()',
    'optionparser::list#complete()',
    'rdoc::classmodule#complete()',
    'rdoc::ri::driver#complete()',
    'rdoc::store#complete()',
    'win32::sspi::negotiateauth#complete_authentication()',
    'threadspecs::completed_thread()',
    'readline::completer_quote_characters()',
    'readline::completer_quote_characters=()',
    'readline::completer_word_break_characters()',
    'readline::completer_word_break_characters=()',
    'readline::completion_append_character()',
    'readline::completion_append_character=()',
    'readline::completion_case_fold()',
    'readline::completion_case_fold=()',
    'readline::completion_proc()',
    'readline::completion_proc=()',
    'uri::generic::component()',
    'uri::generic#component()',
    'uri::generic#component_ary()',
    'urispec::components()',
    'gem::resolver::compose_sets()',
    'gem::indexer#compress()',
    'gem::indexer#compress_indices()',
    'openssl::pkey::dh#compute_key()',
    'gem::requirement#concat()',
    'rdoc::markup::document#concat()',
    'rexml::functions::concat()',
    'shell::commandprocessor#concat()',
    'irb::conf()',
    'drb::config()',
    'mspecscript::config()',
    'gem::config_file()',
    'gem::configfile#config_file_name()',
    'gem::configuration()',
    'gem::configuration=()',
    'json::ext::generator::state#configure()',
    'gem::request::configure_connection_for_https()',
    'filespecs::configure_types()',
    'gem::dependencyresolutionerror#conflicting_dependencies()',
    'gem::resolver::conflict#conflicting_dependencies()',
    'gem::resolver::molinillo::delegates::resolutionstate#conflicts()',
    'gem::specification#conflicts()',
    'etc::confstr()',
    'drb::drbsslsocket::sslconfig#connect()',
    'net::ftp#connect()',
    'openssl::ssl::sslsocket#connect()',
    'win32ole::connect()',
    'openssl::ssl::sslsocket#connect_nonblock()',
    'net::httpheader#connection_close?()',
    'gem::request#connection_for()',
    'net::httpheader#connection_keep_alive?()',
    'gem::dependencyinstaller#consider_local?()',
    'gem::dependencyinstaller#consider_remote?()',
    'io::console()',
    'io::console_size()',
    'constantspecs::childa::const10()',
    'constantspecs::childa#const10()',
    'constantspecs::classa::const10()',
    'constantspecs::classa#const10()',
    'constantspecs::containera::const10()',
    'constantspecs::containera#const10()',
    'constantspecs::parenta::const10()',
    'constantspecs::parenta#const10()',
    'constantspecs::childa::const11()',
    'constantspecs::childa#const11()',
    'constantspecs::childa::const12()',
    'constantspecs::childa#const12()',
    'constantspecs::childa::const13()',
    'constantspecs::childa#const13()',
    'constantspecs::childa::const15()',
    'constantspecs::childa#const15()',
    'constantspecs::classa::const16()',
    'constantspecs::parenta::const16()',
    'constantspecs::childa::const19()',
    'object::constantspecs::containera::childa::const20()',
    'constantspecs::classb::const201()',
    'constantspecs::classb#const201()',
    'constantspecs::containerb::const201()',
    'constantspecs::containerb::childb::const201()',
    'constantspecs::containerb::childb#const201()',
    'constantspecs::parentb::const201()',
    'constantspecs::parentb#const201()',
    'constantspecs::containerb::childb::const202()',
    'constantspecs::containerb::childb#const202()',
    'constantspecs::containerb::childb::const203()',
    'constantspecs::containerb::childb#const203()',
    'constantspecs::containerb::childb::const204()',
    'constantspecs::containerb::childb#const204()',
    'constantspecs::containerb::childb::const205()',
    'constantspecs::containerb::childb#const205()',
    'constantspecs::containerb::childb::const206()',
    'constantspecs::classb::const209()',
    'constantspecs::parentb::const209()',
    'constantspecs::childa::const21()',
    'constantspecs::classb::const210()',
    'constantspecs::parentb::const210()',
    'object::constantspecs::containerb::childb::const211()',
    'constantspecs::containerb::childb::const212()',
    'constantspecs::containerb::childb::const213()',
    'constantspecs::containerb::childb#const213()',
    'constantspecs::containerb::childb::const214()',
    'constantspecs::classa::const22()',
    'constantspecs::parenta::const22()',
    'constantspecs::childa::const23()',
    'win32ole::const_load()',
    'constantspecs::classa::const_missing()',
    'object::const_missing()',
    'module::constants()',
    'rss::itunesitemmodel::itunesduration::construct()',
    'constantspecs::classa::constx()',
    'constantspecs::classa#constx()',
    'constantspecs::parenta::constx()',
    'constantspecs::parenta#constx()',
    'rexml::iosource#consume()',
    'rexml::source#consume()',
    'rexml::functions::contains()',
    'gem::basicspecification#contains_requirable_file?()',
    'rdoc::rd::blockparser#content()',
    'rss::itunesitemmodel::itunesduration#content=()',
    'rss::maker::itunesitemmodel::itunesdurationbase#content=()',
    'openuri::meta#content_encoding()',
    'net::httpheader#content_length()',
    'webrick::httprequest#content_length()',
    'webrick::httpresponse#content_length()',
    'net::httpheader#content_length=()',
    'webrick::httpresponse#content_length=()',
    'net::httpheader#content_range()',
    'rss::element::content_setup()',
    'net::httpheader#content_type()',
    'openuri::meta#content_type()',
    'rss::atom::contentmodel::classmethods#content_type()',
    'webrick::httprequest#content_type()',
    'webrick::httpresponse#content_type()',
    'net::httpheader#content_type=()',
    'webrick::httpresponse#content_type=()',
    'gem::package#contents()',
    'gem::package::old#contents()',
    'debugger__::context()',
    'rexml::doctype#context()',
    'rexml::parseexception#context()',
    'rexml::functions::context=()',
    'net::smtp::response#continue?()',
    'rdoc::parser::changelog#continue_entry_body()',
    'net::http#continue_timeout=()',
    'encoding::converter#convert()',
    'optionparser::completion#convert()',
    'rdoc::markup#convert()',
    'rdoc::markup::formatter#convert()',
    'rdoc::markup::tohtmlsnippet#convert()',
    'rdoc::markup::tolabel#convert()',
    'rss::converter#convert()',
    'rss::element#convert()',
    'webrick::httpversion::convert()',
    'rdoc::markup::attributemanager#convert_attrs()',
    'rdoc::markup::formatter#convert_flow()',
    'rdoc::markup::tohtmlsnippet#convert_flow()',
    'rdoc::markup::attributemanager#convert_html()',
    'rdoc::markup::formatter#convert_special()',
    'rdoc::markup::tobs#convert_special()',
    'rdoc::markup::attributemanager#convert_specials()',
    'rdoc::markup::formatter#convert_string()',
    'rdoc::markup::tobs#convert_string()',
    'rdoc::markup::tohtml#convert_string()',
    'rss::element#converter=()',
    'encoding::converter#convpath()',
    'fileutils::copy()',
    'net::http#copy()',
    'net::imap#copy()',
    'openssl::bn#copy()',
    'fileutils::copy_entry()',
    'fileutils::copy_file()',
    'openssl::ocsp::basicresponse#copy_nonce()',
    'rdoc::generator::darkfish#copy_static()',
    'fileutils::copy_stream()',
    'io::copy_stream()',
    'rdoc::markup::attributemanager#copy_string()',
    'gem::installer::fakepackage#copy_to()',
    'gem::package#copy_to()',
    'process::status#coredump?()',
    'gem::version::correct?()',
    'gem::remotefetcher#correct_for_windows_path()',
    'cmath::cos()',
    'math::cos()',
    'cmath::cosh()',
    'math::cosh()',
    'gc::count()',
    'rexml::functions::count()',
    'objectspace::count_imemo_objects()',
    'objectspace::count_nodes()',
    'objectspace::count_objects()',
    'objectspace::count_objects_size()',
    'objectspace::count_symbols()',
    'objectspace::count_tdata_objects()',
    'threadspecs::counter()',
    'threadspecs::counter=()',
    'rdoc::stats#coverage_level=()',
    'fileutils::cp()',
    'fileutils::cp_r()',
    'net::smtp::response#cram_md5_challenge()',
    'zlib::gzipfile#crc()',
    'zlib::crc32()',
    'zlib::crc32_combine()',
    'zlib::crc_table()',
    'net::ftp::mlsxentry#creatable?()',
    'exports::create()',
    'fiddle::cstructbuilder::create()',
    'gem::noaliasyamltree::create()',
    'gem::requirement::create()',
    'gem::version::create()',
    'net::imap#create()',
    'openssl::ocsp::response::create()',
    'openssl::pkcs12::create()',
    'psych::visitors::jsontree::create()',
    'psych::visitors::toruby::create()',
    'psych::visitors::yamltree::create()',
    'resolv::dns::name::create()',
    'resolv::ipv4::create()',
    'resolv::ipv6::create()',
    'resolv::loc::alt::create()',
    'resolv::loc::coord::create()',
    'resolv::loc::size::create()',
    'tempfile::create()',
    'win32::registry::create()',
    'win32::registry#create()',
    'threadspecs::create_and_kill_critical_thread()',
    'breakspecs::block#create_block()',
    'gem::security::create_cert()',
    'gem::security::create_cert_email()',
    'gem::security::create_cert_self_signed()',
    'defspecnested::create_class_method()',
    'threadspecs::create_critical_thread()',
    'rdoc::parser::changelog#create_document()',
    'rdoc::parser::changelog#create_entries()',
    'openssl::x509::extensionfactory#create_ext()',
    'openssl::x509::extensionfactory#create_ext_from_array()',
    'openssl::x509::extensionfactory#create_ext_from_hash()',
    'openssl::x509::extensionfactory#create_ext_from_string()',
    'openssl::x509::extensionfactory#create_extension()',
    'rexml::sourcefactory::create_from()',
    'win32ole::create_guid()',
    'rdoc::parser::changelog#create_items()',
    'gem::security::create_key()',
    'breakspecs::lambda#create_lambda()',
    'webrick::utils::create_listeners()',
    'dirspecs::create_mock_dirs()',
    'finddirspecs::create_mock_dirs()',
    'webrick::utils::create_self_signed_cert()',
    'net::pop3::create_ssl_params()',
    'gem::testcase#create_tmpdir()',
    'fiddle::importer#create_value()',
    'win32::registry#created?()',
    'gem::testcase::specfetchersetup#created_specs()',
    'gem::configfile#credentials_path()',
    'openssl::x509::extension#critical=()',
    'openssl::x509::extension#critical?()',
    'threadspecs::critical_is_reset()',
    'threadspecs::critical_thread1()',
    'threadspecs::critical_thread2()',
    'threadspecs::critical_thread_yields_to_main_thread()',
    'openssl::x509::extensionfactory#crl=()',
    'openssl::pkcs7#crls()',
    'openssl::pkcs7#crls=()',
    'rdoc::markup::tohtmlcrossref#cross_reference()',
    'reflectspecs::c::cs_pro()',
    'reflectspecs::c::cs_pub()',
    'rdoc::markdown#css()',
    'file::ctime()',
    'file::stat#ctime()',
    'openssl::engine#ctrl_cmd()',
    'fiber::current()',
    'mspec::current()',
    'rdoc::rdoc::current()',
    'thread::current()',
    'rdoc::rdoc::current=()',
    'openssl::x509::storecontext#current_cert()',
    'openssl::x509::storecontext#current_crl()',
    'rexml::iosource#current_line()',
    'rexml::source#current_line()',
    'rdoc::context#current_section()',
    'drb::current_server()',
    'openssl::pkey::ec::group#curve_name()',
    'classvariablesspec::classa#cvar_a()',
    'classvariablesspec::classa#cvar_a=()',
    'classvariablesspec::classc::cvar_c=()',
    'classvariablesspec::classc::cvar_defined?()',
    'classvariablesspec::modulem#cvar_m()',
    'classvariablesspec::modulem#cvar_m=()',
    'classvariablesspec::modulen#cvar_n()',
    'classvariablesspec::modulen#cvar_n=()',
    'rdoc::generator::markup#cvs_url()',
    'rdoc::toplevel#cvs_url()',
    'netftpspecs::dummyftp#cwd()',
    'matrix::eigenvaluedecomposition#d()',
    'reflectspecs::d#d_pro()',
    'reflectspecs::d#d_pub()',
    'process::daemon()',
    'processspecs::daemon#daemon_at_exit()',
    'processspecs::daemon#daemonizing_at_exit()',
    'net::smtp#data()',
    'resolv::dns::resource::txt#data()',
    'socket::ancillarydata#data()',
    'socket::option#data()',
    'openssl::pkcs7#data=()',
    'zlib::zstream#data_type()',
    'gem::datadir()',
    'gem::basicspecification#datadir()',
    'gem::specification#date()',
    'gem::specification#date=()',
    'rss::maker::channelbase#date=()',
    'rss::maker::itemsbase::itembase#date=()',
    'rss::maker::itemsbase::itembase::sourcebase#date=()',
    'rexml::parsers::sax2parser#deafen()',
    'gem::resolver::molinillo::ui#debug()',
    'gem::streamui#debug()',
    'net::imap::debug()',
    'openssl::debug()',
    'syslog::logger#debug()',
    'webrick::basiclog#debug()',
    'net::imap::debug=()',
    'openssl::debug=()',
    'shell::debug=()',
    'gem::resolver#debug?()',
    'gem::resolver::molinillo::ui#debug?()',
    'irb::context#debug?()',
    'webrick::basiclog#debug?()',
    'irb::context#debug_level=()',
    'rdoc::generator::darkfish#debug_msg()',
    'rdoc::generator::jsonindex#debug_msg()',
    'net::smtp#debug_output=()',
    'debugger__::debug_thread_info()',
    'gem::testcase::specfetchersetup::declare()',
    'openssl::asn1::decode()',
    'rexml::encoding#decode()',
    'uri::escape#decode()',
    'openssl::asn1::decode_all()',
    'net::imap::decode_utf7()',
    'uri::decode_www_form()',
    'uri::decode_www_form_component()',
    'openssl::cipher#decrypt()',
    'openssl::pkcs7#decrypt()',
    'rdoc::parser::c#deduplicate_call_seq()',
    'rexml::parent#deep_clone()',
    'rss::maker::base::def_array_element()',
    'rss::maker::atompersons#def_atom_persons()',
    'rss::maker::atomtextconstruct::def_atom_text_construct()',
    'rss::itunesmodelutils#def_class_accessor()',
    'rss::maker::itunesbasemodel#def_class_accessor()',
    'rss::maker::base::def_classed_element()',
    'rss::maker::base::def_classed_element_without_accessor()',
    'rss::maker::base::def_classed_elements()',
    'rss::converter#def_convert()',
    'rss::element::def_corresponded_attr_reader()',
    'rss::element::def_corresponded_attr_writer()',
    'rss::maker::itunesbasemodel#def_csv_accessor()',
    'rss::maker::base::def_csv_element()',
    'rss::itunesmodelutils#def_element_class_accessor()',
    'rss::itunesmodelutils#def_elements_class_accessor()',
    'rss::maker::itunesbasemodel#def_elements_class_accessor()',
    'rss::converter#def_else_enc()',
    'erb::defmethod::def_erb_method()',
    'rss::maker::itunesbasemodel#def_explicit_clean_other_accessor()',
    'irb::contextextender::def_extend_command()',
    'irb::extendcommandbundle::def_extend_command()',
    'rss::converter#def_iconv_convert()',
    'irb::inspector::def_inspector()',
    'irb::notifier::def_notifier()',
    'irb::notifier::compositenotifier#def_notifier()',
    'rubyvm::sourcecodegenerator::def_options()',
    'rss::maker::base::def_other_element()',
    'rss::maker::base::def_other_element_without_accessor()',
    'irb::methodextender#def_post_proc()',
    'irb::methodextender#def_pre_proc()',
    'rss::converter#def_same_enc()',
    'shell::def_system_command()',
    'shell::commandprocessor::def_system_command()',
    'rss::converter#def_to_euc_jp_from_iso_2022_jp()',
    'rss::converter#def_to_euc_jp_from_shift_jis()',
    'rss::converter#def_to_euc_jp_from_utf_8()',
    'rss::converter#def_to_iso_2022_jp_from_euc_jp()',
    'rss::converter#def_to_iso_8859_1_from_utf_8()',
    'rss::converter#def_to_shift_jis_from_euc_jp()',
    'rss::converter#def_to_shift_jis_from_utf_8()',
    'rss::converter#def_to_utf_8_from_euc_jp()',
    'rss::converter#def_to_utf_8_from_iso_8859_1()',
    'rss::converter#def_to_utf_8_from_shift_jis()',
    'rss::converter#def_uconv_convert_if_can()',
    'rss::maker::itunesbasemodel#def_yes_other_accessor()',
    'gem::requirement::default()',
    'hashspecs::defaulthash#default()',
    'rexml::xmldecl::default()',
    'drb::drbserver::default_acl()',
    'drb::drbserver::default_argc_limit()',
    'gem::default_bindir()',
    'gem::default_cert_path()',
    'io::default_console_size()',
    'gem::default_dir()',
    'gem::default_exec_format()',
    'gem::default_ext_dir_for()',
    'encoding::default_external()',
    'encoding::default_external=()',
    'gem::basicspecification#default_gem?()',
    'gem::default_gems_use_full_paths?()',
    'drb::drbserver::default_id_conv()',
    'net::imap::default_imap_port()',
    'net::imap::default_imaps_port()',
    'encoding::default_internal()',
    'encoding::default_internal=()',
    'gem::default_key_path()',
    'drb::drbserver::default_load_limit()',
    'rdoc::ri::driver::default_options()',
    'rss::parser::default_parser()',
    'rss::parser::default_parser=()',
    'net::ftp::default_passive()',
    'net::ftp::default_passive=()',
    'gem::default_path()',
    'net::pop3::default_pop3_port()',
    'net::pop3::default_pop3s_port()',
    'net::http::default_port()',
    'net::imap::default_port()',
    'net::pop3::default_port()',
    'net::smtp::default_port()',
    'uri::generic::default_port()',
    'uri::generic#default_port()',
    'shell::default_record_separator()',
    'shell::default_record_separator=()',
    'gem::default_rubygems_dirs()',
    'drb::drbserver::default_safe_level()',
    'gem::default_sources()',
    'gem::default_spec_cache_dir()',
    'gem::installer#default_spec_file()',
    'gem::basicspecification::default_specifications_dir()',
    'irb::default_src_encoding()',
    'net::smtp::default_ssl_context()',
    'net::imap::default_ssl_port()',
    'net::smtp::default_ssl_port()',
    'net::smtp::default_submission_port()',
    'shell::default_system_path()',
    'shell::default_system_path=()',
    'rdoc::options#default_title=()',
    'net::imap::default_tls_port()',
    'net::smtp::default_tls_port()',
    'gem::specification#default_value()',
    'rdoc::ri::task#defaults()',
    'rdoc::task#defaults()',
    'gem::command#defaults_str()',
    'gem::packagetask#define()',
    'rdoc::task#define()',
    'sync_m::define_aliases()',
    'yieldspecs::yielder::define_deep()',
    'objectspace::define_finalizer()',
    'objectspacefixtures::define_finalizer()',
    'definedspecs::superclass#define_method_args()',
    'definedspecs::superclass#define_method_block_args()',
    'definedspecs::superclass#define_method_block_no_args()',
    'definedspecs::superclass#define_method_no_args()',
    'constantvisibility::privconstmodulechild#defined_from_include()',
    'constantvisibility::privconstclass::nested::defined_from_scope()',
    'constantvisibility::privconstmodule::nested::defined_from_scope()',
    'constantvisibility::privconstclass::defined_from_self()',
    'constantvisibility::privconstmodule::defined_from_self()',
    'constantvisibility::privconstclasschild#defined_from_subclass()',
    'rdoc::context#defined_in?()',
    'definedspecs::defined_method()',
    'definedspecs::basic#defined_method()',
    'definedspecs::child#defined_super()',
    'definedspecs::mixin#defined_super()',
    'definedspecs::parent#defined_super()',
    'rdoc::attr#definition()',
    'rdoc::normalclass#definition()',
    'rdoc::normalmodule#definition()',
    'rdoc::singleclass#definition()',
    'rdoc::markdown#definition_lists()',
    'gem::deflate()',
    'zlib::deflate()',
    'zlib::deflate::deflate()',
    'zlib::deflate#deflate()',
    'openssl::pkey::ec::group#degree()',
    'netftpspecs::dummyftp#dele()',
    'weakrefspecs::delegated_method()',
    'net::ftp::mlsxentry#deletable?()',
    'cgi::session#delete()',
    'cgi::session::filestore#delete()',
    'cgi::session::memorystore#delete()',
    'cgi::session::nullstore#delete()',
    'cgi::session::pstore#delete()',
    'csv::row#delete()',
    'csv::table#delete()',
    'dir::delete()',
    'env::delete()',
    'file::delete()',
    'gem::sourcelist#delete()',
    'irb::jobmanager#delete()',
    'net::ftp#delete()',
    'net::http#delete()',
    'net::httpheader#delete()',
    'net::imap#delete()',
    'net::popmail#delete()',
    'rexml::attributes#delete()',
    'rexml::elements#delete()',
    'rexml::parent#delete()',
    'rinda::tuplebag#delete()',
    'rinda::tuplebag::tuplebin#delete()',
    'win32::registry#delete()',
    'yaml::dbm#delete()',
    'net::popmail#delete!()',
    'net::pop3::delete_all()',
    'net::pop3#delete_all()',
    'rexml::attributes#delete_all()',
    'rexml::elements#delete_all()',
    'rexml::parent#delete_at()',
    'rexml::element#delete_attribute()',
    'gem::resolver::molinillo::dependencygraph#delete_edge()',
    'gem::resolver::molinillo::dependencygraph::log#delete_edge()',
    'rexml::element#delete_element()',
    'csv::row#delete_if()',
    'csv::table#delete_if()',
    'env::delete_if()',
    'rexml::parent#delete_if()',
    'yaml::dbm#delete_if()',
    'win32::registry#delete_key()',
    'rdoc::rubygemshook#delete_legacy_args()',
    'dirspecs::delete_mock_dirs()',
    'finddirspecs::delete_mock_dirs()',
    'rexml::element#delete_namespace()',
    'webrick::httpauth::htdigest#delete_passwd()',
    'webrick::httpauth::htpasswd#delete_passwd()',
    'mspec::delete_tag()',
    'mspec::delete_tags()',
    'readline::delete_text()',
    'rinda::tuplebag#delete_unless_alive()',
    'win32::registry#delete_value()',
    'net::popmail#deleted?()',
    'gem::testcase#dep()',
    'gem::resolver::indexspecification#dependencies()',
    'gem::resolver::specspecification#dependencies()',
    'gem::specification#dependencies()',
    'gem::resolver#dependencies_for()',
    'gem::resolver::molinillo::delegates::specificationprovider#dependencies_for()',
    'gem::resolver::molinillo::specificationprovider#dependencies_for()',
    'gem::impossibledependencieserror#dependency()',
    'gem::dependencylist#dependency_order()',
    'gem::testcase#dependency_request()',
    'gem::specification#dependent_gems()',
    'gem::specification#dependent_specs()',
    'gem::deprecate::deprecate()',
    'mspec::deprecate()',
    'openssl::deprecated_warning_flag()',
    'gem::resolver::molinillo::delegates::resolutionstate#depth()',
    'json::ext::generator::state#depth()',
    'json::ext::generator::state#depth=()',
    'webrick::httputils::dequote()',
    'rubyvm::yarvdocgenerator#desc()',
    'specevaluate::desc()',
    'specevaluate::desc=()',
    'rubyvm::yarvdocgenerator#desc_en()',
    'rubyvm::yarvdocgenerator#desc_ja()',
    'gem::resolver::molinillo::dependencygraph::vertex#descendent?()',
    'mspec::describe()',
    'gem::command#description()',
    'gem::commands::unpackcommand#description()',
    'rdoc::classmodule#description()',
    'rdoc::generator::markup#description()',
    'gem::specification#description=()',
    'encoding::converter#destination_encoding()',
    'encoding::invalidbytesequenceerror#destination_encoding()',
    'encoding::undefinedconversionerror#destination_encoding()',
    'encoding::invalidbytesequenceerror#destination_encoding_name()',
    'encoding::undefinedconversionerror#destination_encoding_name()',
    'matrix::lupdecomposition#det()',
    'process::detach()',
    'gem::resolver::molinillo::dependencygraph#detach_vertex_named()',
    'gem::resolver::molinillo::dependencygraph::log#detach_vertex_named()',
    'openssl::pkcs7#detached()',
    'openssl::pkcs7#detached=()',
    'openssl::pkcs7#detached?()',
    'gem::specfetcher#detect()',
    'vcs::detect()',
    'gem::detect_gemdeps()',
    'matrix::lupdecomposition#determinant()',
    'file::stat#dev()',
    'file::stat#dev_major()',
    'file::stat#dev_minor()',
    'gem::resolver::activationrequest#development?()',
    'gem::resolver::dependencyrequest#development?()',
    'gem::specification#development_dependencies()',
    'openssl::pkey::ec#dh_compute_key()',
    'matrix::diagonal()',
    'methodspecs::eql#different_body()',
    'digest::class::digest()',
    'digest::instance#digest()',
    'openssl::digest::digest()',
    'openssl::engine#digest()',
    'openssl::hmac::digest()',
    'openssl::hmac#digest()',
    'digest::instance#digest!()',
    'digest::base#digest_length()',
    'digest::instance#digest_length()',
    'digest::sha2#digest_length()',
    'openssl::digest#digest_length()',
    'gem::dir()',
    'gem::installer#dir()',
    'net::ftp#dir()',
    'rdoc::classmodule#direct_ancestors()',
    'rdoc::normalclass#direct_ancestors()',
    'filespecs::directory()',
    'file::directory?()',
    'file::stat#directory?()',
    'gem::package::tarreader::entry#directory?()',
    'net::ftp::mlsxentry#directory?()',
    'net::ftp::mlsxentry#directory_makable?()',
    'file::dirname()',
    'gem::specification::dirs()',
    'gem::specification::dirs=()',
    'gc::disable()',
    'gc::profiler::disable()',
    'modulespecs::cyclicbarrier#disable!()',
    'fiddle::handle#disable_close()',
    'mspec::disable_feature()',
    'net::pop3::disable_ssl()',
    'net::pop3#disable_ssl()',
    'net::smtp#disable_ssl()',
    'net::smtp#disable_starttls()',
    'net::smtp#disable_tls()',
    'rubyvm::instructionsequence#disasm()',
    'rubyvm::instructionsequence::disasm()',
    'rubyvm::instructionsequence#disassemble()',
    'rubyvm::instructionsequence::disassemble()',
    'unboundmethodspecs::methods#discard_1()',
    'unboundmethodspecs::methods#discard_2()',
    'net::imap#disconnect()',
    'net::imap#disconnected?()',
    'debugger__::display()',
    'gem::resolver::stats#display()',
    'rdoc::ri::driver#display()',
    'rdoc::codeobject#display?()',
    'rdoc::toplevel#display?()',
    'rdoc::markup::attributemanager#display_attributes()',
    'rdoc::ri::driver#display_class()',
    'rdoc::ri::driver#display_method()',
    'rdoc::ri::driver#display_name()',
    'rdoc::ri::driver#display_names()',
    'rdoc::ri::driver#display_page()',
    'rdoc::ri::driver#display_page_list()',
    'fiddle::importer#dlload()',
    'fiddle::dlopen()',
    'fiddle::dlunwrap()',
    'fiddle::dlwrap()',
    'uri::ldap#dn()',
    'uri::ldap#dn=()',
    'rdoc::servlet#do_get()',
    'webrick::httpservlet::abstractservlet#do_get()',
    'webrick::httpservlet::erbhandler#do_get()',
    'webrick::httpservlet::abstractservlet#do_head()',
    'webrick::httpserver#do_options()',
    'webrick::httpservlet::abstractservlet#do_options()',
    'drb::http0::callback#do_post()',
    'webrick::httpservlet::erbhandler#do_post()',
    'rdoc::parser::c#do_aliases()',
    'rdoc::parser::c#do_attrs()',
    'variablesspecs::opasgn#do_bool_side_effects()',
    'rdoc::parser::c#do_boot_defclass()',
    'rdoc::parser::c#do_classes()',
    'rdoc::parser::c#do_constants()',
    'rdoc::parser::c#do_define_class()',
    'rdoc::parser::c#do_define_class_under()',
    'rdoc::parser::c#do_define_module()',
    'rdoc::parser::c#do_define_module_under()',
    'rdoc::parser::c#do_includes()',
    'rdoc::parser::c#do_methods()',
    'rdoc::parser::c#do_missing()',
    'rdoc::parser::c#do_modules()',
    'variablesspecs::opasgn#do_more_side_effects()',
    'basicsocket::do_not_reverse_lookup()',
    'basicsocket::do_not_reverse_lookup=()',
    'openssl::ssl::socketforwarder#do_not_reverse_lookup=()',
    'rdoc::markup::tottonly#do_nothing()',
    'racc::parser#do_parse()',
    'rinda::ringserver#do_reply()',
    'variablesspecs::opasgn#do_side_effect()',
    'rdoc::parser::c#do_singleton_class()',
    'rdoc::parser::c#do_struct_define_without_accessor()',
    'ensurespec::test#do_test()',
    'rss::baseparser#do_validate()',
    'rss::baseparser#do_validate=()',
    'rinda::ringserver#do_write()',
    'rdoc::testcase#doc()',
    'gem::specification#doc_dir()',
    'gem::server#doc_root()',
    'rdoc::stats#doc_stats()',
    'gem::commands::checkcommand#doctor()',
    'gem::doctor#doctor()',
    'rexml::attribute#doctype()',
    'rexml::document#doctype()',
    'rexml::sax2listener#doctype()',
    'rexml::streamlistener#doctype()',
    'rexml::text#doctype()',
    'rexml::parsers::pullevent#doctype?()',
    'rexml::streamlistener#doctype_end()',
    'rdoc::rdoc#document()',
    'rdoc::rubygemshook#document()',
    'rexml::child#document()',
    'rexml::document#document()',
    'rexml::element#document()',
    'rdoc::codeobject#document_children=()',
    'rdoc::codeobject#document_self=()',
    'rdoc::classmodule#document_self_or_methods()',
    'rdoc::servlet#documentation_page()',
    'rdoc::servlet#documentation_search()',
    'rdoc::servlet#documentation_source()',
    'rdoc::classmodule#documented?()',
    'rdoc::codeobject#documented?()',
    'rdoc::constant#documented?()',
    'rdoc::methodattr#documented?()',
    'gem::streamui::silentdownloadreporter#done()',
    'gem::streamui::silentprogressreporter#done()',
    'gem::streamui::simpleprogressreporter#done()',
    'gem::streamui::verbosedownloadreporter#done()',
    'gem::streamui::verboseprogressreporter#done()',
    'rexml::validation::event#done?()',
    'rdoc::stats#done_adding()',
    'rdoc::stats::quiet#done_adding()',
    'rdoc::codeobject#done_documenting=()',
    'gem::done_installing()',
    'bigdecimal::double_fig()',
    'squigglyheredocspecs::doublequoted()',
    'gem::resolver::molinillo::dependencygraph::action#down()',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular#down()',
    'gem::resolver::molinillo::dependencygraph::deleteedge#down()',
    'gem::resolver::molinillo::dependencygraph::detachvertexnamed#down()',
    'gem::resolver::molinillo::dependencygraph::tag#down()',
    'downloader::download()',
    'downloader::gnu::download()',
    'downloader::rubygems::download()',
    'downloader::unicode::download()',
    'gem::fakefetcher#download()',
    'gem::remotefetcher#download()',
    'gem::resolver::activationrequest#download()',
    'gem::source#download()',
    'gem::source::installed#download()',
    'gem::testcase::specfetchersetup#download()',
    'gem::streamui#download_reporter()',
    'gem::fakefetcher#download_to_cache()',
    'gem::remotefetcher#download_to_cache()',
    'rexml::xmldecl#dowrite()',
    'enumerator::lazy#drop()',
    'enumerator::lazy#drop_while()',
    'reflectspecs::d::ds_pro()',
    'reflectspecs::d::ds_pub()',
    'openssl::pkey::ec#dsa_sign_asn1()',
    'openssl::pkey::ec#dsa_verify_asn1()',
    'socket::ifaddr#dstaddr()',
    'json::genericobject::dump()',
    'marshal::dump()',
    'objectspace::dump()',
    'psych::dump()',
    'rdoc::ri::driver::dump()',
    'rexml::validation::validator#dump()',
    'objectspace::dump_all()',
    'psych::dump_stream()',
    'enumerablespecs::undupable#dup()',
    'threadspecs::dying_thread_ensures()',
    'threadspecs::dying_thread_with_outer_ensure()',
    'exception2messagemapper::e2mm::e2mm_message()',
    'reflectspecs::e#e_pro()',
    'reflectspecs::e#e_pub()',
    'csv::row#each()',
    'csv::table#each()',
    'env::each()',
    'enumspecs::numerous#each()',
    'enumerablespecs::eachcounter#each()',
    'enumerablespecs::eachdefiner#each()',
    'enumerablespecs::empty#each()',
    'enumerablespecs::emptywithsize#each()',
    'enumerablespecs::freezy#each()',
    'enumerablespecs::mapreturnsenumerable#each()',
    'enumerablespecs::mapreturnsenumerable::enumerablemapping#each()',
    'enumerablespecs::numerous#each()',
    'enumerablespecs::throwingeach#each()',
    'enumerablespecs::yieldsmixed#each()',
    'enumerablespecs::yieldsmixed2#each()',
    'enumerablespecs::yieldsmulti#each()',
    'enumerablespecs::yieldsmultiwithfalse#each()',
    'enumerablespecs::yieldsmultiwithsingletrue#each()',
    'enumeratorlazyspecs::eventsmixed#each()',
    'enumeratorlazyspecs::yieldsmixed#each()',
    'enumeratorspecs::feed#each()',
    'gem::availableset#each()',
    'gem::configfile#each()',
    'gem::dependencylist#each()',
    'gem::list#each()',
    'gem::package::tarreader#each()',
    'gem::resolver::molinillo::dependencygraph#each()',
    'gem::resolver::molinillo::dependencygraph::log#each()',
    'gem::sourcelist#each()',
    'gem::specification::each()',
    'net::httpheader#each()',
    'net::pop3#each()',
    'objectspace::weakmap#each()',
    'openssl::asn1::constructive#each()',
    'openssl::buffering#each()',
    'openssl::config#each()',
    'prime::pseudoprimegenerator#each()',
    'psych::nodes::node#each()',
    'rdoc::markup::document#each()',
    'rdoc::ri::paths::each()',
    'rdoc::ripperstatelex::innerstatelex#each()',
    'rexml::attlistdecl#each()',
    'rexml::attributes#each()',
    'rexml::elements#each()',
    'rexml::light::node#each()',
    'rexml::parent#each()',
    'rexml::parsers::pullparser#each()',
    'rexml::quickpath::each()',
    'rexml::syncenumerator#each()',
    'rexml::xpath::each()',
    'rss::xml::element#each()',
    'rinda::notifytemplateentry#each()',
    'rinda::ringfinger#each()',
    'rinda::tuple#each()',
    'rubyvm::instructionsloader#each()',
    'shell::cat#each()',
    'shell::concat#each()',
    'shell::echo#each()',
    'shell::filter#each()',
    'shell::glob#each()',
    'shell::systemcommand#each()',
    'shell::tee#each()',
    'shell::void#each()',
    'webrick::httpauth::htdigest#each()',
    'webrick::httpauth::htpasswd#each()',
    'webrick::httprequest#each()',
    'webrick::httpresponse#each()',
    'win32::registry#each()',
    'yaml::dbm#each()',
    'zlib::gzipreader#each()',
    'shell::processcontroller::each_active_object()',
    'resolv::each_address()',
    'resolv::dns#each_address()',
    'resolv::hosts#each_address()',
    'resolv::mdns#each_address()',
    'rdoc::classmodule#each_ancestor()',
    'rdoc::context#each_attribute()',
    'rexml::attributes#each_attribute()',
    'openssl::buffering#each_byte()',
    'zlib::gzipreader#each_byte()',
    'net::httpheader#each_capitalized()',
    'net::httpheader#each_capitalized_name()',
    'gem::security::trustdir#each_certificate()',
    'zlib::gzipreader#each_char()',
    'dir::each_child()',
    'rexml::parent#each_child()',
    'rubyvm::instructionsequence#each_child()',
    'rdoc::context#each_classmodule()',
    'optionparser::each_const()',
    'rdoc::context#each_constant()',
    'webrick::httputils::formdata#each_data()',
    'rexml::element#each_element()',
    'rexml::element#each_element_with_attribute()',
    'rexml::element#each_element_with_text()',
    'gem::package::tarreader#each_entry()',
    'exports::cygwin#each_export()',
    'exports::mingw#each_export()',
    'exports::mswin#each_export()',
    'rdoc::context#each_extend()',
    'mspec::each_file()',
    'actionmap::each_firstbyte_range()',
    'net::httpheader#each_header()',
    'rdoc::context#each_include()',
    'rexml::parent#each_index()',
    'env::each_key()',
    'net::httpheader#each_key()',
    'objectspace::weakmap#each_key()',
    'win32::registry#each_key()',
    'exports::cygwin#each_line()',
    'exports::mswin#each_line()',
    'openssl::buffering#each_line()',
    'zlib::gzipreader#each_line()',
    'net::pop3#each_mail()',
    'rdoc::context#each_method()',
    'net::httpheader#each_name()',
    'resolv::each_name()',
    'resolv::dns#each_name()',
    'resolv::hosts#each_name()',
    'rdoc::markup::attributes#each_name_of()',
    'objectspace::each_object()',
    'optionparser::list#each_option()',
    'env::each_pair()',
    'objectspace::weakmap#each_pair()',
    'yaml::dbm#each_pair()',
    'rdoc::codeobject#each_parent()',
    'integer::each_prime()',
    'rexml::node#each_recursive()',
    'resolv::dns#each_resource()',
    'rdoc::context#each_section()',
    'gem::sourcelist#each_source()',
    'gem::availableset#each_spec()',
    'tsort::each_strongly_connected_component()',
    'tsort::each_strongly_connected_component_from()',
    'env::each_value()',
    'net::httpheader#each_value()',
    'objectspace::weakmap#each_value()',
    'win32::registry#each_value()',
    'yaml::dbm#each_value()',
    'openssl::ssl::sslcontext#ecdh_curves=()',
    'shell::commandprocessor#echo()',
    'openssl::random::egd()',
    'openssl::random::egd_bytes()',
    'process::egid()',
    'process::egid=()',
    'stringspecs::utf8encoding::egrave()',
    'net::smtp#ehlo()',
    'process::gid::eid()',
    'process::uid::eid()',
    'matrix::eigenvaluedecomposition#eigenvalue_matrix()',
    'matrix::eigenvaluedecomposition#eigenvalues()',
    'matrix::eigenvaluedecomposition#eigenvector_matrix()',
    'matrix::eigenvaluedecomposition#eigenvector_matrix_inv()',
    'matrix::eigenvaluedecomposition#eigenvectors()',
    'rexml::attribute#element=()',
    'rss::utils#element_initialize_arguments?()',
    'rexml::sax2listener#elementdecl()',
    'rexml::streamlistener#elementdecl()',
    'rexml::parsers::pullevent#elementdecl?()',
    'vector::elements()',
    'readline::emacs_editing_mode()',
    'readline::emacs_editing_mode?()',
    'gem::security::email_to_name()',
    'rdoc::markdown#emphasis()',
    'gem::resolver::molinillo::resolutionstate::empty()',
    'matrix::empty()',
    'psych::handler#empty()',
    'dir::empty?()',
    'env::empty?()',
    'file::empty?()',
    'gem::availableset#empty?()',
    'gem::package::tarheader#empty?()',
    'gem::requestset::lockfile::tokenizer#empty?()',
    'gem::resolver::requirementlist#empty?()',
    'gem::sourcelist#empty?()',
    'rdoc::comment#empty?()',
    'rdoc::markup::document#empty?()',
    'rdoc::markup::list#empty?()',
    'rdoc::markup::listitem#empty?()',
    'rexml::elements#empty?()',
    'rexml::iosource#empty?()',
    'rexml::parsers::baseparser#empty?()',
    'rexml::source#empty?()',
    'rexml::text#empty?()',
    'arrayspecs::empty_frozen_array()',
    'hashspecs::empty_frozen_hash()',
    'arrayspecs::empty_recursive_array()',
    'gc::enable()',
    'gc::profiler::enable()',
    'fiddle::handle#enable_close()',
    'openssl::ssl::sslcontext#enable_fallback_scsv()',
    'mspec::enable_feature()',
    'gem::testcase#enable_shared()',
    'net::pop3::enable_ssl()',
    'net::pop3#enable_ssl()',
    'net::smtp#enable_ssl()',
    'net::smtp#enable_starttls()',
    'net::smtp#enable_starttls_auto()',
    'net::smtp#enable_tls()',
    'featureguard::enabled?()',
    'gc::profiler::enabled?()',
    'modulespecs::cyclicbarrier#enabled?()',
    'openssl::pkcs7::recipientinfo#enc_key()',
    'chainednexttest::enclosing_method()',
    'returnspecs::blocks#enclosing_method()',
    'returnspecs::nestedblocks#enclosing_method()',
    'returnspecs::nestedcalls#enclosing_method()',
    'rexml::encoding#encode()',
    'uri::escape#encode()',
    'rdoc::comment#encode!()',
    'rdoc::text::encode_fallback()',
    'net::imap::encode_utf7()',
    'uri::encode_www_form()',
    'uri::encode_www_form_component()',
    'codingus_ascii::encoding()',
    'codingutf_8::encoding()',
    'irb::fileinputmethod#encoding()',
    'irb::readlineinputmethod#encoding()',
    'irb::stdioinputmethod#encoding()',
    'rexml::document#encoding()',
    'rexml::encoding#encoding=()',
    'rexml::source#encoding=()',
    'rexml::xmldecl#encoding=()',
    'openssl::cipher#encrypt()',
    'openssl::pkcs7::encrypt()',
    'zlib::zstream#end()',
    'rdoc::ripperstatelex::end?()',
    'rss::rexmllikexmlparser#endelement()',
    'rdoc::markup::tohtml#end_accepting()',
    'rdoc::markup::tordoc#end_accepting()',
    'rdoc::markup::totableofcontents#end_accepting()',
    'rdoc::markup::tottonly#end_accepting()',
    'psych::emitter#end_document()',
    'psych::handler#end_document()',
    'psych::treebuilder#end_document()',
    'rexml::sax2listener#end_document()',
    'rexml::sax2listener#end_element()',
    'rexml::parsers::pullevent#end_element?()',
    'psych::emitter#end_mapping()',
    'psych::handler#end_mapping()',
    'rexml::sax2listener#end_prefix_mapping()',
    'psych::emitter#end_sequence()',
    'psych::handler#end_sequence()',
    'psych::emitter#end_stream()',
    'psych::handler#end_stream()',
    'psych::treebuilder#end_stream()',
    'zlib::zstream#ended?()',
    'etc::endgrent()',
    'etc::endpwent()',
    'openssl::engine::engines()',
    'gem::ensure_default_gem_subdirectories()',
    'gem::installer#ensure_dependency()',
    'gem::ensure_gem_subdirectories()',
    'gem::installer#ensure_loadable_spec()',
    'net::imap::numvalidator::ensure_mod_sequence_value()',
    'net::imap::numvalidator::ensure_number()',
    'net::imap::numvalidator::ensure_nz_number()',
    'rss::maker::atomtextconstructbase::ensurexmlcontent#ensure_xml_content()',
    'net::ftp::mlsxentry#enterable?()',
    'net::httpresponse#entity()',
    'rexml::doctype#entity()',
    'rexml::parsers::baseparser#entity()',
    'rexml::streamlistener#entity()',
    'rexml::parsers::pullevent#entity?()',
    'fiddle::cstruct::entity_class()',
    'fiddle::cunion::entity_class()',
    'rexml::document::entity_expansion_limit()',
    'rexml::security::entity_expansion_limit()',
    'rexml::document::entity_expansion_limit=()',
    'rexml::security::entity_expansion_limit=()',
    'rexml::document::entity_expansion_text_limit()',
    'rexml::security::entity_expansion_text_limit()',
    'rexml::document::entity_expansion_text_limit=()',
    'rexml::security::entity_expansion_text_limit=()',
    'rexml::sax2listener#entitydecl()',
    'rexml::streamlistener#entitydecl()',
    'rexml::parsers::pullevent#entitydecl?()',
    'dir::entries()',
    'enumerator::lazy#enum_for()',
    'gem::env_requirement()',
    'openssl::buffering#eof()',
    'zlib::gzipreader#eof()',
    'gem::package::tarreader::entry#eof?()',
    'irb::fileinputmethod#eof?()',
    'irb::readlineinputmethod#eof?()',
    'irb::stdioinputmethod#eof?()',
    'openssl::buffering#eof?()',
    'xmp::stringinputmethod#eof?()',
    'zlib::gzipreader#eof?()',
    'netftpspecs::dummyftp#eprt()',
    'fiddle::pointer#eql?()',
    'gem::nametuple#eql?()',
    'gem::platform#eql?()',
    'gem::resolver::molinillo::dependencygraph::vertex#eql?()',
    'gem::version#eql?()',
    'hashspecs::byvaluekey#eql?()',
    'openssl::bn#eql?()',
    'openssl::pkey::ec::group#eql?()',
    'openssl::pkey::ec::point#eql?()',
    'openssl::x509::name#eql?()',
    'rdoc::context::section#eql?()',
    'rdoc::toplevel#eql?()',
    'rangespecs::custom#eql?()',
    'uri::generic#eql?()',
    'specs::kernel::hasequal#equal?()',
    'specs::kernel::hasoppoopequal#equal?()',
    'math::erf()',
    'math::erfc()',
    'gem::mockgemui#error()',
    'openssl::x509::storecontext#error()',
    'rdoc::parser::ruby#error()',
    'rdoc::rdoc#error()',
    'rdoc::servlet#error()',
    'syslog::logger#error()',
    'webrick::basiclog#error()',
    'openssl::x509::storecontext#error=()',
    'rexml::parsers::pullevent#error?()',
    'webrick::basiclog#error?()',
    'webrick::httpstatus::error?()',
    'encoding::invalidbytesequenceerror#error_bytes()',
    'encoding::undefinedconversionerror#error_char()',
    'openssl::x509::storecontext#error_depth()',
    'netftpspecs::dummyftp#error_response()',
    'openssl::x509::storecontext#error_string()',
    'gem::resolver::composedset#errors()',
    'gem::resolver::installerset#errors()',
    'openssl::errors()',
    'reflectspecs::e::es_pro()',
    'reflectspecs::e::es_pub()',
    'cgi::escape#escape()',
    'cgi::util#escape()',
    'gem::uriformatter#escape()',
    'regexp::escape()',
    'shellwords::escape()',
    'uri::escape#escape()',
    'uri::rfc2396_parser#escape()',
    'webrick::accesslog#escape()',
    'webrick::htmlutils::escape()',
    'webrick::httputils#escape()',
    'webrick::httputils#escape8bit()',
    'cgi::util#escapeelement()',
    'cgi::escape#escapehtml()',
    'cgi::util#escapehtml()',
    'cgi::util#escape_element()',
    'webrick::httputils#escape_form()',
    'cgi::util#escape_html()',
    'webrick::httputils#escape_path()',
    'process::euid()',
    'process::euid=()',
    'rubyvm::instructionsequence#eval()',
    'defspecnestedb::eval_class_method()',
    'irb::context#eval_history=()',
    'irb::irb#eval_input()',
    'kernelspecs::evaltest::eval_yield_with_binding()',
    'irb::workspace#evaluate()',
    'psych::handler#event_location()',
    'psych::treebuilder#event_location()',
    'rexml::parsers::pullevent#event_type()',
    'gem::requirement#exact?()',
    'net::imap#examine()',
    'super::ms4::layer1#example()',
    'super::ms4::layer2#example()',
    'classspecs::k::example_class_method()',
    'classspecs::k#example_instance_method()',
    'boring::exception()',
    'drb::drbunknown#exception()',
    'encodingspecs::invalidbytesequenceerror::exception()',
    'encodingspecs::invalidbytesequenceerrorindirect::exception()',
    'encodingspecs::undefinedconversionerror::exception()',
    'encodingspecs::undefinedconversionerrorindirect::exception()',
    'exception::exception()',
    'timeout::error#exception()',
    'net::smtp::response#exception_class()',
    'definedspecs::exception_method()',
    'thread::exclusive()',
    'process::exec()',
    'gem::installer::exec_format()',
    'irb::notifier::abstractnotifier#exec_if()',
    'gem::specification#executable()',
    'gem::specification#executable=()',
    'file::executable?()',
    'file::stat#executable?()',
    'file::executable_real?()',
    'file::stat#executable_real?()',
    'gem::specification#executables()',
    'gem::specification#executables=()',
    'gem::command#execute()',
    'gem::commands::buildcommand#execute()',
    'gem::commands::certcommand#execute()',
    'gem::commands::checkcommand#execute()',
    'gem::commands::cleanupcommand#execute()',
    'gem::commands::contentscommand#execute()',
    'gem::commands::dependencycommand#execute()',
    'gem::commands::environmentcommand#execute()',
    'gem::commands::fetchcommand#execute()',
    'gem::commands::generateindexcommand#execute()',
    'gem::commands::helpcommand#execute()',
    'gem::commands::installcommand#execute()',
    'gem::commands::lockcommand#execute()',
    'gem::commands::mirrorcommand#execute()',
    'gem::commands::opencommand#execute()',
    'gem::commands::outdatedcommand#execute()',
    'gem::commands::ownercommand#execute()',
    'gem::commands::pristinecommand#execute()',
    'gem::commands::pushcommand#execute()',
    'gem::commands::querycommand#execute()',
    'gem::commands::rdoccommand#execute()',
    'gem::commands::servercommand#execute()',
    'gem::commands::setupcommand#execute()',
    'gem::commands::signincommand#execute()',
    'gem::commands::signoutcommand#execute()',
    'gem::commands::sourcescommand#execute()',
    'gem::commands::specificationcommand#execute()',
    'gem::commands::stalecommand#execute()',
    'gem::commands::uninstallcommand#execute()',
    'gem::commands::unpackcommand#execute()',
    'gem::commands::updatecommand#execute()',
    'gem::commands::whichcommand#execute()',
    'gem::commands::yankcommand#execute()',
    'dir::exist?()',
    'file::exist?()',
    'dir::exists?()',
    'file::exists?()',
    'irb::context#exit()',
    'process::exit()',
    'thread::exit()',
    'process::exit!()',
    'mspec::exit_code()',
    'process::status#exited?()',
    'process::status#exitstatus()',
    'bigmath::exp()',
    'cmath::exp()',
    'math::exp()',
    'actionmap::expand()',
    'rexml::parsers::xpathparser#expand()',
    'rdoc::ri::driver#expand_class()',
    'win32::registry::expand_environ()',
    'openssl::x509::name::rfc2253dn#expand_hexstring()',
    'rdoc::ri::driver#expand_name()',
    'openssl::x509::name::rfc2253dn#expand_pair()',
    'file::expand_path()',
    'shell::commandprocessor#expand_path()',
    'actionmap::expand_rec()',
    'rexml::validation::state#expand_ref_in()',
    'rdoc::text#expand_tabs()',
    'openssl::x509::name::rfc2253dn#expand_value()',
    'rexml::document#expanded_name()',
    'mspec::expectation()',
    'mspec::expectation?()',
    'rexml::validation::choice#expected()',
    'rexml::validation::interleave#expected()',
    'rexml::validation::oneormore#expected()',
    'rexml::validation::optional#expected()',
    'rexml::validation::state#expected()',
    'rexml::validation::zeroormore#expected()',
    'dirspecs::expected_paths()',
    'finddirspecs::expected_paths()',
    'rinda::tupleentry#expired?()',
    'webrick::cookie#expires()',
    'webrick::cookie#expires=()',
    'gem::resolver::conflict#explain()',
    'gem::resolver::conflict#explanation()',
    'gem::resolver::dependencyrequest#explicit?()',
    'ensurespec::container#explicit_return_in_method_with_ensure()',
    'openssl::pkey::dh#export()',
    'openssl::pkey::dsa#export()',
    'openssl::pkey::ec#export()',
    'openssl::pkey::rsa#export()',
    'vcs::git#export()',
    'vcs::svn#export()',
    'vcs::git#export_changelog()',
    'vcs::svn#export_changelog()',
    'exports::cygwin#exports()',
    'net::imap#expunge()',
    'irb::extendcommandbundle::extend_object()',
    'kernelspecs::m::extend_object()',
    'monitormixin::extend_object()',
    'object::extend_object()',
    'optionparser::arguable::extend_object()',
    'sync_m::extend_object()',
    'kernelspecs::m::extended()',
    'object::extended()',
    'rdoc::markdown::extension()',
    'rdoc::markdown#extension()',
    'rdoc::markdown#extension?()',
    'gem::basicspecification#extension_dir()',
    'gem::specification#extensions()',
    'openssl::ocsp::singleresponse#extensions()',
    'openssl::x509::crl#extensions()',
    'openssl::x509::certificate#extensions()',
    'openssl::x509::revoked#extensions()',
    'uri::ldap#extensions()',
    'gem::specification#extensions=()',
    'openssl::x509::crl#extensions=()',
    'openssl::x509::certificate#extensions=()',
    'openssl::x509::revoked#extensions=()',
    'uri::ldap#extensions=()',
    'gem::basicspecification#extensions_dir()',
    'fiddle::importer#extern()',
    'zlib::gzipreader#external_encoding()',
    'file::extname()',
    'delegatespecs::extra#extra()',
    'gem::command::extra_args()',
    'gem::command::extra_args=()',
    'rubyvm::instructionsequence::basicstorage#extra_data()',
    'delegatespecs::extra#extra_protected()',
    'gem::specification#extra_rdoc_files()',
    'gem::specification#extra_rdoc_files=()',
    'exports::extract()',
    'rdoc::generator::pot::messageextractor#extract()',
    'uri::extract()',
    'uri::rfc2396_parser#extract()',
    'gem::installer#extract_bin()',
    'rdoc::comment#extract_call_seq()',
    'rdoc::context::section#extract_comment()',
    'gem::installer#extract_files()',
    'gem::installer::fakepackage#extract_files()',
    'gem::package#extract_files()',
    'gem::package::old#extract_files()',
    'rbinstall::unpackedinstaller::dirpackage#extract_files()',
    'rdoc::i18n::text#extract_messages()',
    'kernelspecs::calleetest#f()',
    'kernelspecs::methodtest#f()',
    'namemapspecs::fixnum#f()',
    'reflectspecs::f#f_pro()',
    'reflectspecs::f#f_pub()',
    'syslog::facility()',
    'specexpectation::fail_with()',
    'progress::rotator#failed_string()',
    'rexml::functions::false()',
    'variablesspecs::false()',
    'socket::ancillarydata#family()',
    'socket::option#family()',
    'syslog::logger#fatal()',
    'webrick::basiclog#fatal()',
    'webrick::basiclog#fatal?()',
    'openssl::ssl::socketforwarder#fcntl()',
    'mspec::feature_enabled?()',
    'rss::rootelementmixin#feed_info()',
    'csv::row#fetch()',
    'env::fetch()',
    'gem::request#fetch()',
    'gem::streamui::silentdownloadreporter#fetch()',
    'gem::streamui::verbosedownloadreporter#fetch()',
    'net::httpheader#fetch()',
    'net::imap#fetch()',
    'rinda::tuple#fetch()',
    'rinda::tupleentry#fetch()',
    'yaml::dbm#fetch()',
    'gem::remotefetcher#fetch_file()',
    'gem::remotefetcher#fetch_http()',
    'gem::remotefetcher#fetch_https()',
    'gem::fakefetcher#fetch_path()',
    'gem::remotefetcher#fetch_path()',
    'resolv::dns#fetch_resource()',
    'gem::remotefetcher#fetch_s3()',
    'drb::fetch_server()',
    'gem::fakefetcher#fetch_size()',
    'gem::remotefetcher#fetch_size()',
    'gem::source#fetch_spec()',
    'gem::source::lock#fetch_spec()',
    'gem::remotefetcher::fetcher()',
    'gem::specfetcher::fetcher()',
    'gem::remotefetcher::fetcher=()',
    'csv::row#field()',
    'csv::row#field?()',
    'csv::row#field_row?()',
    'csv::row#fields()',
    'filespecs::fifo()',
    'digest::class::file()',
    'digest::instance#file()',
    'rdoc::markup::document#file=()',
    'file::file?()',
    'file::stat#file?()',
    'gem::package::tarreader::entry#file?()',
    'net::ftp::mlsxentry#file?()',
    'rdoc::generator::darkfish#file_dir()',
    'rdoc::generator::jsonindex#file_dir()',
    'cgi::htmlextension#file_field()',
    'irb::context#file_input?()',
    'gem::specification#file_name()',
    'rdoc::codeobject#file_name()',
    'ripper::filter#filename()',
    'readline::filename_quote_characters()',
    'readline::filename_quote_characters=()',
    'gem::specification#files()',
    'mspec::files()',
    'gem::specification#files=()',
    'rdoc::store#files_hash()',
    'gem::commands::contentscommand#files_in()',
    'gem::commands::contentscommand#files_in_default_gem()',
    'gem::commands::contentscommand#files_in_gem()',
    'csv::filter()',
    'rexml::quickpath::filter()',
    'uri::ldap#filter()',
    'gem::bundlerversionfinder::filter!()',
    'uri::ldap#filter=()',
    'irb::workspace#filter_backtrace()',
    'optionparser::parseerror::filter_backtrace()',
    'rdoc::ri::driver#filter_methods()',
    'coveragespecs::filtered_result()',
    'openssl::cipher#final()',
    'bug::symbol::find()',
    'encoding::find()',
    'find::find()',
    'irb::locale#find()',
    'rinda::tuplebag#find()',
    'rinda::tuplebag::tuplebin#find()',
    'gem::specification::find_active_stub_by_path()',
    'rdoc::parser::c#find_alias_comment()',
    'enumerator::lazy#find_all()',
    'gem::availableset#find_all()',
    'gem::resolver::apiset#find_all()',
    'gem::resolver::composedset#find_all()',
    'gem::resolver::currentset#find_all()',
    'gem::resolver::gitset#find_all()',
    'gem::resolver::indexset#find_all()',
    'gem::resolver::installerset#find_all()',
    'gem::resolver::lockset#find_all()',
    'gem::resolver::set#find_all()',
    'gem::resolver::vendorset#find_all()',
    'gem::testcase::staticset#find_all()',
    'rinda::tuplebag#find_all()',
    'gem::specification::find_all_by_full_name()',
    'gem::specification::find_all_by_name()',
    'rinda::tuplebag#find_all_template()',
    'rdoc::classmodule#find_ancestor_local_symbol()',
    'rdoc::parser::c#find_attr_comment()',
    'rdoc::context#find_attribute()',
    'rdoc::context#find_attribute_named()',
    'rdoc::parser::c#find_body()',
    'gem::specification::find_by_name()',
    'gem::specification::find_by_path()',
    'rdoc::store#find_c_enclosure()',
    'rdoc::parser::c#find_class()',
    'rdoc::parser::c#find_class_comment()',
    'rdoc::context#find_class_method_named()',
    'rdoc::classmodule#find_class_named()',
    'rdoc::store#find_class_named()',
    'rdoc::store#find_class_named_from()',
    'rdoc::store#find_class_or_module()',
    'rdoc::toplevel#find_class_or_module()',
    'gem::commandmanager#find_command()',
    'gem::commandmanager#find_command_possibilities()',
    'rdoc::parser::c#find_const_comment()',
    'rdoc::context#find_constant_named()',
    'gem::fakefetcher#find_data()',
    'rdoc::context#find_enclosing_module_named()',
    'rdoc::context#find_external_alias()',
    'rdoc::context#find_external_alias_named()',
    'rdoc::context#find_file_named()',
    'rdoc::store#find_file_named()',
    'gem::find_files()',
    'rexml::node#find_first_recursive()',
    'gem::commands::unpackcommand#find_in_cache()',
    'gem::specification::find_in_unresolved()',
    'gem::specification::find_in_unresolved_tree()',
    'gem::specification::find_inactive_by_path()',
    'rdoc::markup::preprocess#find_include_file()',
    'rdoc::context#find_instance_method_named()',
    'gem::find_latest_files()',
    'rdoc::context#find_local_symbol()',
    'rdoc::toplevel#find_local_symbol()',
    'rdoc::context#find_method()',
    'rdoc::context#find_method_named()',
    'rdoc::ri::driver#find_methods()',
    'rdoc::parser::c#find_modifiers()',
    'rdoc::context#find_module_named()',
    'rdoc::store#find_module_named()',
    'rdoc::toplevel#find_module_named()',
    'gem::dependencylist#find_name()',
    'rdoc::parser::c#find_override_comment()',
    'rdoc::ri::driver#find_pager_jruby()',
    'gem::commands::whichcommand#find_paths()',
    'uri::generic#find_proxy()',
    'openssl::ocsp::basicresponse#find_response()',
    'gem::testcase::staticset#find_spec()',
    'gem::dependencyinstaller#find_spec_by_name_and_version()',
    'rdoc::ri::driver#find_store()',
    'rdoc::context#find_symbol()',
    'rdoc::context#find_symbol_module()',
    'shell::commandprocessor#find_system_command()',
    'rdoc::store#find_text_page()',
    'rdoc::store#find_unique()',
    'gem::find_unresolved_default_spec()',
    'rinda::ringfinger::finger()',
    'encoding::converter#finish()',
    'net::http#finish()',
    'net::pop3#finish()',
    'net::smtp#finish()',
    'openssl::engine#finish()',
    'psych::visitors::yamltree#finish()',
    'rdoc::options#finish()',
    'specguard::finish()',
    'zlib::gzipfile#finish()',
    'zlib::zstream#finish()',
    'rdoc::options#finish_page_dir()',
    'gem::finish_resolve()',
    'progress::rotator#finish_string()',
    'zlib::zstream#finished?()',
    'openssl::fips_mode()',
    'openssl::fips_mode=()',
    'gem::sourcelist#first()',
    'rexml::quickpath::first()',
    'rexml::xpath::first()',
    'rexml::xpathparser#first()',
    'prettyprint::singleline#first?()',
    'rubyvm::instructionsequence#first_lineno()',
    'enumerablespecs::yieldsmixed2::first_yields()',
    'rdoc::store#fix_basic_object_inheritance()',
    'definedspecs::fixnum_method()',
    'socket::ifaddr#flags()',
    'openssl::x509::store#flags=()',
    'openssl::x509::storecontext#flags=()',
    'enumerator::lazy#flat_map()',
    'rexml::functions::floor()',
    'rdoc::markup::attributemanager#flow()',
    'gem::package::tarwriter#flush()',
    'openssl::buffering#flush()',
    'shell::systemcommand#flush()',
    'webrick::httpauth::htdigest#flush()',
    'webrick::httpauth::htgroup#flush()',
    'webrick::httpauth::htpasswd#flush()',
    'win32::registry#flush()',
    'zlib::deflate#flush()',
    'zlib::gzipwriter#flush()',
    'rdoc::text#flush_left()',
    'zlib::zstream#flush_next_in()',
    'zlib::zstream#flush_next_out()',
    'openssl::ssl::sslcontext#flush_sessions()',
    'file::fnmatch()',
    'file::fnmatch?()',
    'constantspecs::cs_singleton1::foo()',
    'defspec::foo()',
    'methodspecs::methods#foo()',
    'modulespecs::autoload::fromthread::a::b::foo()',
    'modulespecs::autoload::fromthread::a::b::c::foo()',
    'modulespecs::classwithfoo#foo()',
    'modulespecs::instancemeth#foo()',
    'modulespecs::m3::m1#foo()',
    'modulespecs::m3::m2#foo()',
    'modulespecs::m3::pm1#foo()',
    'modulespecs::m3::pm2#foo()',
    'modulespecs::prependedmodule#foo()',
    'modulespecs::reopeningmodule::foo()',
    'modulespecs::unboundmethodtest#foo()',
    'object::foo()',
    'private::b#foo()',
    'sendspecs::foo#foo()',
    'super::aliaswithsuper::as1#foo()',
    'super::aliaswithsuper::bs1#foo()',
    'super::aliaswithsuper::trigger::foo()',
    'super::keywords::arguments#foo()',
    'super::keywords::optionalandplaceholderarguments#foo()',
    'super::keywords::optionalarguments#foo()',
    'super::keywords::placeholderarguments#foo()',
    'super::keywords::requiredandoptionalandplaceholderarguments#foo()',
    'super::keywords::requiredandoptionalarguments#foo()',
    'super::keywords::requiredandplaceholderarguments#foo()',
    'super::keywords::requiredarguments#foo()',
    'super::ms1::b#foo()',
    'super::ms1::moda#foo()',
    'super::ms2::modb#foo()',
    'super::ms3::a#foo()',
    'super::ms3::b::foo()',
    'super::ms3::moda#foo()',
    'super::multisupertargets::basea#foo()',
    'super::multisupertargets::baseb#foo()',
    'super::multisupertargets::m#foo()',
    'super::regularandkeywords::arguments#foo()',
    'super::regularandkeywords::optionalandplaceholderarguments#foo()',
    'super::regularandkeywords::optionalarguments#foo()',
    'super::regularandkeywords::placeholderarguments#foo()',
    'super::regularandkeywords::requiredandoptionalandplaceholderarguments#foo()',
    'super::regularandkeywords::requiredandoptionalarguments#foo()',
    'super::regularandkeywords::requiredandplaceholderarguments#foo()',
    'super::regularandkeywords::requiredarguments#foo()',
    'super::s1::a#foo()',
    'super::s1::b#foo()',
    'super::s2::b#foo()',
    'super::s3::a#foo()',
    'super::s3::a::foo()',
    'super::s3::b::foo()',
    'super::s4::a#foo()',
    'super::s4::b#foo()',
    'super::splatandkeywords::allarguments#foo()',
    'super::splatandkeywords::arguments#foo()',
    'tracepointspec::b#foo()',
    'tracepointspec::c#foo()',
    'unboundmethodspecs::methods#foo()',
    'unboundmethodspecs::parent#foo()',
    'modulespecs::reopeningmodule::foo2()',
    'super::aliaswithsuper::trigger::foo_baz()',
    'super::aliaswithsuper::trigger::foo_quux()',
    'super::includesfrombasic#foobar()',
    'super::includesintermediate#foobar()',
    'super::singletonaliascase::base#foobar()',
    'super::singletonaliascase::foo#foobar()',
    'super::singletoncase::base#foobar()',
    'super::singletoncase::foo#foobar()',
    'rdoc::parser::for()',
    'gem::specification#for_cache()',
    'gem::resolver::for_current_gems()',
    'basicsocket::for_fd()',
    'bug::file::stat::for_fd()',
    'io::for_fd()',
    'bug::file::stat::for_path()',
    'gem::installer::for_spec()',
    'gem::resolver::conflict#for_spec?()',
    'rdoc::codeobject#force_documentation=()',
    'addrinfo::foreach()',
    'csv::foreach()',
    'dir::foreach()',
    'io::foreach()',
    'net::pop3::foreach()',
    'shell::commandprocessor#foreach()',
    'process::fork()',
    'thread::fork()',
    'cgi::htmlextension#form()',
    'net::httpheader#form_data=()',
    'benchmark::tms#format()',
    'irb::locale#format()',
    'prettyprint::format()',
    'webrick::accesslog#format()',
    'rdoc::comment#format=()',
    'net::imap::format_date()',
    'net::imap::format_datetime()',
    'gem::text#format_text()',
    'gem::installer#formatted_program_filename()',
    'rdoc::generator::markup#formatter()',
    'rdoc::ri::driver#formatter()',
    'unboundmethodspecs::methods#four()',
    'uri::generic#fragment=()',
    'fiddle::free()',
    'fiddle::pointer#free()',
    'fiddle::pointer#free=()',
    'openssl::ssl::sslcontext#freeze()',
    'math::frexp()',
    'rdoc::store#friendly_path()',
    'gem::package::tarheader::from()',
    'gem::sourcelist::from()',
    'iospecs::copystream::from()',
    'iospecs::copystream::from=()',
    'kernelspecs::calleetest#from_class_body()',
    'kernelspecs::methodtest#from_class_body()',
    'kernelspecs::calleetest#from_eval()',
    'kernelspecs::methodtest#from_eval()',
    'gem::requestset::lockfile::tokenizer::from_file()',
    'json::genericobject::from_hash()',
    'gem::nametuple::from_list()',
    'unboundmethodspecs::mod#from_mod()',
    'rdoc::classmodule::from_module()',
    'process::gid::from_name()',
    'process::uid::from_name()',
    'integer::from_prime_division()',
    'kernelspecs::calleetest#from_send()',
    'kernelspecs::methodtest#from_send()',
    'jisx0208::char::from_sjis()',
    'gem::dependencylist::from_specs()',
    'json::ext::generator::state::from_state()',
    'gem::specification::from_yaml()',
    'drb::front()',
    'drb::extserv#front()',
    'arrayspecs::frozen_array()',
    'hashspecs::frozen_hash()',
    'reflectspecs::f::fs_pro()',
    'reflectspecs::f::fs_pub()',
    'file::ftype()',
    'file::stat#ftype()',
    'gem::basicspecification#full_gem_path()',
    'gem::basicspecification#full_name()',
    'gem::nametuple#full_name()',
    'gem::package::tarreader::entry#full_name()',
    'gem::resolver::activationrequest#full_name()',
    'gem::resolver::specspecification#full_name()',
    'gem::resolver::specification#full_name()',
    'gem::specification#full_name()',
    'rdoc::classmodule#full_name()',
    'rdoc::constant#full_name()',
    'rdoc::context#full_name()',
    'rdoc::methodattr#full_name()',
    'rdoc::mixin#full_name()',
    'rdoc::toplevel#full_name()',
    'rss::element#full_name()',
    'rss::ituneschannelmodel::itunescategory#full_name()',
    'rss::ituneschannelmodel::itunesimage#full_name()',
    'rss::ituneschannelmodel::itunesowner#full_name()',
    'rss::itunesitemmodel::itunesduration#full_name()',
    'rss::imagefaviconmodel::imagefavicon#full_name()',
    'rss::imageitemmodel::imageitem#full_name()',
    'rss::rdf#full_name()',
    'rss::rdf::bag#full_name()',
    'rss::rdf::li#full_name()',
    'rss::rdf::seq#full_name()',
    'rss::taxonomytopicmodel::taxonomytopic#full_name()',
    'rss::taxonomytopicsmodel::taxonomytopics#full_name()',
    'rss::xml::element#full_name()',
    'rdoc::codeobject#full_name=()',
    'rdoc::alias#full_old_name()',
    'gem::basicspecification#full_require_paths()',
    'gem::resolver::activationrequest#full_spec()',
    'rdoc::context#fully_documented?()',
    'rdoc::stats#fully_documented?()',
    'rexml::namespace#fully_expanded_name()',
    'bug::funcall()',
    'bug::funcall_callback()',
    'rexml::quickpath::function()',
    'kernelspecs::calleetest#g()',
    'kernelspecs::methodtest#g()',
    'math::gamma()',
    'objectspacefixtures::garbage()',
    'objectspace::garbage_collect()',
    'objectspacefixtures::garbage_objid()',
    'rdoc::rdoc#gather_files()',
    'enumeratorlazyspecs::yieldsmixed::gathered_non_array_yields()',
    'enumerablespecs::yieldsmixed2::gathered_yields()',
    'enumeratorlazyspecs::yieldsmixed::gathered_yields()',
    'enumerablespecs::yieldsmixed2::gathered_yields_with_args()',
    'enumeratorlazyspecs::yieldsmixed::gathered_yields_with_args()',
    'openssl::bn#gcd()',
    'gem::requestset#gem()',
    'gem::requestset::gemdependencyapi#gem()',
    'gem::testcase::specfetchersetup#gem()',
    'gem::commands::contentscommand#gem_contents()',
    'gem::basicspecification#gem_dir()',
    'gem::installer#gem_dir()',
    'rdoc::ri::paths::gem_dir()',
    'gem::indexer#gem_file_list()',
    'gem::commands::contentscommand#gem_install_dir()',
    'gem::doctor#gem_repository?()',
    'rdoc::ri::paths::gemdirs()',
    'gem::basicspecification#gems_dir()',
    'gem::specification#gems_dir()',
    'gem::requestset::gemdependencyapi#gemspec()',
    'rdoc::parser::c#gen_body_table()',
    'rdoc::parser::c#gen_const_table()',
    'securerandom::gen_random()',
    'rdoc::markup::formatter::gen_relative_url()',
    'rdoc::generator::darkfish#gen_sub_directories()',
    'rdoc::markup::tohtml#gen_url()',
    'rdoc::markup::tohtmlcrossref#gen_url()',
    'rdoc::markup::tohtmlsnippet#gen_url()',
    'rdoc::markup::tomarkdown#gen_url()',
    'csv::generate()',
    'json::ext::generator::state#generate()',
    'openssl::pkey::dh::generate()',
    'openssl::pkey::dsa::generate()',
    'openssl::pkey::ec::generate()',
    'openssl::pkey::rsa::generate()',
    'rdoc::generator::darkfish#generate()',
    'rdoc::generator::jsonindex#generate()',
    'rdoc::generator::pot#generate()',
    'rdoc::generator::ri#generate()',
    'rdoc::rdoc#generate()',
    'rdoc::rubygemshook#generate()',
    'rubyvm::insnsincgenerator#generate()',
    'rubyvm::insnsinfoincgenerator#generate()',
    'rubyvm::minsnsincgenerator#generate()',
    'rubyvm::optinsnincgenerator#generate()',
    'rubyvm::optscincgenerator#generate()',
    'rubyvm::optunifsincgenerator#generate()',
    'rubyvm::sourcecodegenerator#generate()',
    'rubyvm::vmbodygenerator#generate()',
    'rubyvm::vmtcincgenerator#generate()',
    'rubyvm::yarvdocgenerator#generate()',
    'rubyvm::yasmdatarbgenerator#generate()',
    'gem::installer#generate_bin_script()',
    'rbinstall::unpackedinstaller#generate_bin_script()',
    'gem::installer#generate_bin_symlink()',
    'rdoc::generator::darkfish#generate_class()',
    'rdoc::generator::darkfish#generate_class_files()',
    'gem::commands::setupcommand#generate_default_dirs()',
    'rexml::validation::state#generate_event()',
    'rdoc::generator::darkfish#generate_file_files()',
    'rubyvm::vmbodygenerator#generate_from_insnname()',
    'rdoc::generator::jsonindex#generate_gzipped()',
    'gem::indexer#generate_index()',
    'rdoc::generator::darkfish#generate_index()',
    'openssl::pkey::ec#generate_key()',
    'openssl::pkey::dh#generate_key!()',
    'openssl::pkey::ec#generate_key!()',
    'csv::generate_line()',
    'rdoc::generator::darkfish#generate_page()',
    'openssl::bn::generate_prime()',
    'rdoc::generator::darkfish#generate_servlet_not_found()',
    'rdoc::generator::darkfish#generate_servlet_root()',
    'rdoc::generator::darkfish#generate_table_of_contents()',
    'gem::installer#generate_windows_script()',
    'rdoc::rubygemshook::generation_hook()',
    'openssl::pkey::ec::group#generator()',
    'rdoc::options#generator_descriptions()',
    'rdoc::servlet#generator_for()',
    'mspecscript::get()',
    'modulespecs::m3#get()',
    'modulespecs::m3::c#get()',
    'modulespecs::threadsafecounter#get()',
    'net::ftp#get()',
    'net::http::get()',
    'net::http#get()',
    'rdoc::markup::parser#get()',
    'net::http#get2()',
    'gem::command#get_all_gem_names()',
    'gem::command#get_all_gem_names_and_versions()',
    'returnspecs::methodwithblock#get_ary()',
    'rexml::attributes#get_attribute()',
    'rexml::attributes#get_attribute_ns()',
    'rss::element::get_attributes()',
    'bindingspecs::demo#get_binding()',
    'kernelspecs::binding#get_binding()',
    'bindingspecs::demo#get_binding_and_line()',
    'bindingspecs::demo#get_binding_in_block()',
    'rdoc::parser::ruby#get_bool()',
    'gem::commands::cleanupcommand#get_candidate_gems()',
    'gem::request::get_cert_files()',
    'object::get_class()',
    'object::get_class_name()',
    'rdoc::parser::ruby#get_class_or_module()',
    'rdoc::parser::ruby#get_class_specification()',
    'constantspecs::get_const()',
    'rdoc::parser::ruby#get_constant()',
    'modulespecs::classevaltest::get_constant_from_scope()',
    'modulespecs::classevaltest::get_constant_from_scope_with_send()',
    'rdoc::parser::ruby#get_constant_with_optional_parens()',
    'resolv::get_dhcpinfo()',
    'resolv::get_dhcpinfo_95()',
    'resolv::get_dhcpinfo_98()',
    'resolv::get_dhcpinfo_key()',
    'resolv::get_dns_server_list()',
    'rexml::element#get_elements()',
    'bindingspecs::demo#get_empty_binding()',
    'gem::commands::opencommand#get_env_editor()',
    'net::httpheader#get_fields()',
    'rss::utils#get_file_and_line_from_caller()',
    'bindingspecs::demo#get_file_of_binding()',
    'rexml::xpathparser#get_first()',
    'gem::commands::cleanupcommand#get_gems_to_cleanup()',
    'resolv::get_hosts_dir()',
    'resolv::get_hosts_path()',
    'resolv::wscontrol::get_iflist()',
    'resolv::get_info()',
    'vcs::svn#get_info()',
    'win32::sspi::negotiateauth#get_initial_token()',
    'webrick::httpservlet::abstractservlet::get_instance()',
    'bindingspecs::demo#get_line_of_binding()',
    'gem::commands::unpackcommand#get_metadata()',
    'rexml::functions::get_namespace()',
    'prime::eratosthenessieve#get_nth_prime()',
    'gem::command#get_one_gem_name()',
    'gem::command#get_one_optional_argument()',
    'webrick::httpauth::htdigest#get_passwd()',
    'webrick::httpauth::htpasswd#get_passwd()',
    'webrick::httpauth::userdb#get_passwd()',
    'gem::commands::unpackcommand#get_path()',
    'gem::commands::cleanupcommand#get_primary_gems()',
    'net::http::get_print()',
    'gem::request::get_proxy_from_env()',
    'languagespecs::get_regexp_with_substitution()',
    'resolv::get_resolv_info()',
    'net::http::get_response()',
    'object::get_result()',
    'vcs::git::get_revisions()',
    'vcs::svn::get_revisions()',
    'readline::get_screen_size()',
    'rdoc::generator::darkfish#get_sorted_module_list()',
    'rdoc::ripperstatelex#get_squashed_tk()',
    'rdoc::generator::darkfish#get_svninfo()',
    'rdoc::parser::ruby#get_symbol_or_name()',
    'rexml::element#get_text()',
    'debugger__::get_thread()',
    'rdoc::parser::rubytools#get_tk()',
    'rdoc::parser::rubytools#get_tk_until()',
    'rdoc::parser::rubytools#get_tkread()',
    'modulespecs::autoload::u::v::get_value()',
    'openssl::config#get_value()',
    'net::imap#getacl()',
    'ipsocket::getaddress()',
    'resolv::getaddress()',
    'resolv::dns#getaddress()',
    'resolv::hosts#getaddress()',
    'resolv::getaddresses()',
    'resolv::dns#getaddresses()',
    'resolv::hosts#getaddresses()',
    'addrinfo::getaddrinfo()',
    'socket::getaddrinfo()',
    'net::ftp#getbinaryfile()',
    'zlib::gzipreader#getbyte()',
    'gem::package::tarreader::entry#getc()',
    'openssl::buffering#getc()',
    'zlib::gzipreader#getc()',
    'io::generic_readable#getch()',
    'net::ftp#getdir()',
    'process::sys::getegid()',
    'process::sys::geteuid()',
    'process::sys::getgid()',
    'etc::getgrent()',
    'etc::getgrgid()',
    'etc::getgrnam()',
    'socket::gethostbyaddr()',
    'socket::gethostbyname()',
    'tcpsocket::gethostbyname()',
    'socket::gethostname()',
    'socket::getifaddrs()',
    'etc::getlogin()',
    'resolv::getname()',
    'resolv::dns#getname()',
    'resolv::hosts#getname()',
    'socket::getnameinfo()',
    'resolv::getnames()',
    'resolv::dns#getnames()',
    'resolv::hosts#getnames()',
    'optionparser::getopts()',
    'optionparser::arguable#getopts()',
    'io::generic_readable#getpass()',
    'process::getpgid()',
    'process::getpgrp()',
    'process::getpriority()',
    'pty::getpty()',
    'etc::getpwent()',
    'etc::getpwnam()',
    'etc::getpwuid()',
    'net::imap#getquota()',
    'net::imap#getquotaroot()',
    'resolv::dns#getresource()',
    'resolv::dns#getresources()',
    'process::getrlimit()',
    'irb::fileinputmethod#gets()',
    'irb::inputmethod#gets()',
    'irb::locale#gets()',
    'irb::readlineinputmethod#gets()',
    'irb::stdioinputmethod#gets()',
    'openssl::buffering#gets()',
    'xmp::stringinputmethod#gets()',
    'zlib::gzipreader#gets()',
    'socket::getservbyname()',
    'socket::getservbyport()',
    'webrick::utils::getservername()',
    'process::getsid()',
    'openssl::ssl::socketforwarder#getsockopt()',
    'rss::baselistener::getter()',
    'net::ftp#gettextfile()',
    'process::sys::getuid()',
    'dir::getwd()',
    'fileutils::getwd()',
    'pathname::getwd()',
    'file::stat#gid()',
    'process::gid()',
    'process::gid=()',
    'gem::requestset::gemdependencyapi#git()',
    'gem::testcase#git_gem()',
    'gem::requestset::gemdependencyapi#git_source()',
    'rdoc::markdown#github()',
    'dir::glob()',
    'pathname::glob()',
    'shell::commandprocessor#glob()',
    'definedspecs::basic#global_variable_defined()',
    'definedspecs::basic#global_variable_read()',
    'definedspecs::basic#global_variable_undefined()',
    'time::gm()',
    'process::gid::grant_privilege()',
    'process::uid::grant_privilege()',
    'rdoc::stats#great_job()',
    'enumerablespecs::yieldsmixed2::greedy_yields()',
    'date::gregorian_leap?()',
    'enumerator::lazy#grep()',
    'vcs::git#grep()',
    'vcs::svn#grep()',
    'enumerator::lazy#grep_v()',
    'etc::group()',
    'gem::requestset::gemdependencyapi#group()',
    'openssl::pkey::ec#group()',
    'prettyprint::singleline#group()',
    'openssl::pkey::ec#group=()',
    'rdoc::parser::changelog#group_entries()',
    'process::groups()',
    'process::groups=()',
    'file::grpowned?()',
    'file::stat#grpowned?()',
    'mspec::guard()',
    'pp::ppmethods#guard_inspect_key()',
    'mspec::guarded?()',
    'specguard::guards()',
    'kconv::guess()',
    'nkf::guess()',
    'optionparser::switch::guess()',
    'gem::gunzip()',
    'gem::util::gunzip()',
    'zlib::gunzip()',
    'gem::gzip()',
    'gem::indexer#gzip()',
    'gem::util::gzip()',
    'zlib::gzip()',
    'gem::package#gzip_to()',
    'cgi::util#h()',
    'erb::util::h()',
    'rss::utils#h()',
    'kernelspecs::methods::hachi()',
    'metaclassspecs::c::ham()',
    'netftpspecs::dummyftp#handle()',
    'nethttpspecs::specservlet#handle()',
    'rdoc::markup::preprocess#handle()',
    'gem::configfile#handle_arguments()',
    'rdoc::parser::c#handle_attr()',
    'rdoc::parser::c#handle_class_module()',
    'rdoc::parser::c#handle_constants()',
    'rdoc::markup::preprocess#handle_directive()',
    'rdoc::parser::c#handle_ifdefs_in()',
    'thread::handle_interrupt()',
    'rdoc::parser::c#handle_method()',
    'gem::command#handle_options()',
    'rdoc::rdoc#handle_pipe()',
    'rdoc::markup::tomarkdown#handle_rdoc_link()',
    'netftpspecs::dummyftp#handle_request()',
    'rdoc::parser::c#handle_singleton()',
    'rdoc::markup::tohtmlcrossref#handle_special_crossref()',
    'rdoc::markup::tohtmlsnippet#handle_special_crossref()',
    'rdoc::markup::tolabel#handle_special_crossref()',
    'rdoc::markup::tohtml#handle_special_hard_break()',
    'rdoc::markup::tohtmlsnippet#handle_special_hard_break()',
    'rdoc::markup::tomarkdown#handle_special_hard_break()',
    'rdoc::markup::tordoc#handle_special_hard_break()',
    'rdoc::markup::tohtml#handle_special_hyperlink()',
    'rdoc::markup::tohtmlcrossref#handle_special_hyperlink()',
    'rdoc::markup::tohtml#handle_special_rdoclink()',
    'rdoc::markup::tohtmlcrossref#handle_special_rdoclink()',
    'rdoc::markup::tomarkdown#handle_special_rdoclink()',
    'rdoc::markup::tordoc#handle_special_suppressed_crossref()',
    'rdoc::markup::tohtml#handle_special_tidylink()',
    'rdoc::markup::tolabel#handle_special_tidylink()',
    'rdoc::markup::tomarkdown#handle_special_tidylink()',
    'rdoc::parser::c#handle_tab_width()',
    'fiddle::importer#handler()',
    'fiddle::compositehandler#handlers()',
    'gem::command#handles?()',
    'rdoc::testcase#hard_break()',
    'rexml::element#has_attributes?()',
    'gem::specification#has_conflicts?()',
    'rexml::element#has_elements?()',
    'rinda::tuplebag#has_expires?()',
    'cgi::queryextension#has_key?()',
    'csv::row#has_key?()',
    'env::has_key?()',
    'mock::has_key?()',
    'rexml::light::node#has_name?()',
    'rexml::namespace#has_name?()',
    'rexml::parsers::baseparser#has_next?()',
    'kernelspecs::has_private_method()',
    'rexml::element#has_text?()',
    'env::has_value?()',
    'yaml::dbm#has_value?()',
    'bug::scanargs::hash()',
    'evalspecs::coercedobject#hash()',
    'gem::nametuple#hash()',
    'gem::resolver::molinillo::dependencygraph::vertex#hash()',
    'hashspecs::byidentitykey#hash()',
    'hashspecs::byvaluekey#hash()',
    'openssl::bn#hash()',
    'openssl::x509::name#hash()',
    'rdoc::toplevel#hash()',
    'rexml::attribute#hash()',
    'uri::generic#hash()',
    'openssl::ocsp::certificateid#hash_algorithm()',
    'openssl::x509::name#hash_old()',
    'rss::atom::entry#have_author?()',
    'rss::atom::feed#have_author?()',
    'rss::atom::feed::entry#have_author?()',
    'rss::atom::feed::entry::source#have_author?()',
    'rss::element::have_children_elements()',
    'rss::element::have_content?()',
    'gem::testcase#have_git?()',
    'gem::server#have_rdoc_4_plus?()',
    'rss::element#have_required_elements?()',
    'rss::maker::atom::feed::channel#have_required_values?()',
    'rss::maker::atom::feed::items::item#have_required_values?()',
    'rss::maker::base#have_required_values?()',
    'rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#have_required_values?()',
    'rss::maker::imagefaviconmodel::imagefaviconbase#have_required_values?()',
    'rss::maker::imageitemmodel::imageitembase#have_required_values?()',
    'rss::maker::rss10::image#have_required_values?()',
    'rss::maker::rss10::textinput#have_required_values?()',
    'rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase#have_required_values?()',
    'rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#have_required_values?()',
    'rss::atom::feed::entry::content#have_xml_content?()',
    'rss::atom::textconstruct#have_xml_content?()',
    'rss::element#have_xml_content?()',
    'net::http#head()',
    'rdoc::testcase#head()',
    'net::http#head2()',
    'arrayspecs::head_recursive_array()',
    'gem::package::tartestcase#header()',
    'net::popmail#header()',
    'csv::row#header?()',
    'csv::row#header_row?()',
    'csv::row#headers()',
    'csv::table#headers()',
    'uri::mailto#headers=()',
    'net::smtp#helo()',
    'net::ftp#help()',
    'netftpspecs::dummyftp#help()',
    'super::s5#here()',
    'super::s6#here()',
    'drb::here?()',
    'drb::drbserver#here?()',
    'random::formatter#hex()',
    'casefolding::util#hex_seq()',
    'digest::class::hexdigest()',
    'digest::instance#hexdigest()',
    'openssl::hmac::hexdigest()',
    'openssl::hmac#hexdigest()',
    'digest::instance#hexdigest!()',
    'digest::hexencode()',
    'jisx0208::char#hi()',
    'cgi::htmlextension#hidden()',
    'uri::generic#hierarchical?()',
    'uri::ldap#hierarchical?()',
    'irb::context#history_file()',
    'irb::context#history_file=()',
    'openssl::kdf::hkdf()',
    'dir::home()',
    'rdoc::ri::paths::home_dir()',
    'irb::context#home_workspace()',
    'gem::host()',
    'gem::gemcutterutilities#host()',
    'webrick::httprequest#host()',
    'gem::host=()',
    'uri::generic#host=()',
    'socketspecs::hostname()',
    'uri::generic#hostname()',
    'openssl::ssl::sslsocket#hostname=()',
    'uri::generic#hostname=()',
    'socketspecs::hostnamev6()',
    'rss::itunesitemmodel::itunesduration#hour=()',
    'rss::maker::itunesitemmodel::itunesdurationbase#hour=()',
    'rss::xmlstylesheet#href=()',
    'matrix::hstack()',
    'cgi::htmlextension#html()',
    'rdoc::markdown#html()',
    'erb::util::html_escape()',
    'rss::utils#html_escape()',
    'rdoc::markup::tohtml#html_list_name()',
    'rdoc::markup::tohtmlsnippet#html_list_name()',
    'rdoc::alias#html_name()',
    'rdoc::methodattr#html_name()',
    'net::http::http_default_port()',
    'downloader::http_options()',
    'rdoc::context#http_url()',
    'rdoc::toplevel#http_url()',
    'date::httpdate()',
    'datetime::httpdate()',
    'time::httpdate()',
    'cgi::cookie#httponly=()',
    'downloader::https()',
    'downloader::https=()',
    'downloader::https?()',
    'gem::remotefetcher#https?()',
    'net::http::https_default_port()',
    'math::hypot()',
    'kernelspecs::methods::ichi()',
    'rss::maker::channelbase#icon()',
    'rss::maker::channelbase#icon=()',
    'json::iconv()',
    'openssl::engine#id()',
    'openssl::ssl::session#id()',
    'rexml::functions::id()',
    'syslog::ident()',
    'file::identical?()',
    'fileutils::identical?()',
    'unboundmethodspecs::methods#identical_body()',
    'matrix::identity()',
    'net::imap#idle()',
    'net::imap#idle_done()',
    'rdoc::servlet#if_modified_since()',
    'socket::ifaddr#ifindex()',
    'rdoc::codeobject#ignore()',
    'rdoc::markup::formatter#ignore()',
    'rss::baseparser#ignore_unknown_element()',
    'rss::baseparser#ignore_unknown_element=()',
    'rexml::element#ignore_whitespace_nodes()',
    'rdoc::codeobject#ignored?()',
    'rss::rss#image()',
    'cgi::htmlextension#image_button()',
    'rss::imagefaviconmodel::imagefavicon#image_size=()',
    'cgi::htmlextension#img()',
    'platformguard::implementation?()',
    'gem::resolver::dependencyrequest#implicit?()',
    'ensurespec::container#implicit_return_in_method_with_ensure()',
    'gem::requestset#import()',
    'fiddle::importer#import_function()',
    'fiddle::importer#import_symbol()',
    'fiddle::importer#import_value()',
    'kernelspecs::calleetest#in_block()',
    'kernelspecs::methodtest#in_block()',
    'rdoc::context::section#in_files()',
    'rdoc::ri::driver#in_path?()',
    'rdoc::markup::formatter#in_tt?()',
    'shell::processcontroller::inactivate()',
    'optionparser::inc()',
    'variablesspecs::parasgn#inc()',
    'cgi::queryextension#include?()',
    'csv::row#include?()',
    'env::include?()',
    'gem::sourcelist#include?()',
    'objectspace::weakmap#include?()',
    'rexml::attlistdecl#include?()',
    'rdoc::markup::preprocess#include_file()',
    'basicobjectspecs::instexec::included()',
    'json::ext::generator::generatormethods::string::included()',
    'modulespecs::singletononmodulecase::foo::included()',
    'object::included()',
    'rss::maker::atomtextconstructbase::ensurexmlcontent::included()',
    'syslog::constants::included()',
    'syslog::macros::included()',
    'capiclassspecs::m#included?()',
    'modulespecs::singletononmodulecase::bar::included_called()',
    'modulespecs::singletononmodulecase::bar::included_called?()',
    'optionparser::switch::incompatible_argument_styles()',
    'optionparser::switch::noargument::incompatible_argument_styles()',
    'encoding::invalidbytesequenceerror#incomplete_input?()',
    'modulespecs::threadsafecounter#increment_and_get()',
    'threadspecs::increment_counter()',
    'json::ext::generator::state#indent()',
    'rexml::node#indent()',
    'json::ext::generator::state#indent=()',
    'rexml::text#indent_text()',
    'psych::emitter#indentation()',
    'psych::emitter#indentation=()',
    'vector::independent?()',
    'csv::row#index()',
    'env::index()',
    'rexml::elements#index()',
    'rexml::parent#index()',
    'yaml::dbm#index()',
    'rdoc::generator::jsonindex#index_classes()',
    'rexml::node#index_in_parent()',
    'rdoc::generator::jsonindex#index_methods()',
    'rdoc::generator::jsonindex#index_pages()',
    'gem::resolver::molinillo::ui#indicate_progress()',
    'openssl::pkey::ec::point#infinity?()',
    'gem::inflate()',
    'gem::util::inflate()',
    'zlib::inflate()',
    'zlib::inflate::inflate()',
    'zlib::inflate#inflate()',
    'syslog::logger#info()',
    'webrick::basiclog#info()',
    'win32::registry#info()',
    'webrick::basiclog#info?()',
    'webrick::httpstatus::info?()',
    'capiclassspecs::inherited::inherited()',
    'capiclassspecs::newclass::inherited()',
    'classspecs::h::inherited()',
    'coreclassspecs::a::inherited()',
    'coreclassspecs::h::inherited()',
    'coreclassspecs::inherited::a::inherited()',
    'coreclassspecs::inherited::d::inherited()',
    'coreclassspecs::m#inherited()',
    'exports::inherited()',
    'modulespecs::recordincludedmodules::inherited()',
    'object::inherited()',
    'rss::element::inherited()',
    'rss::maker::base::inherited()',
    'rss::utils::inheritedreader#inherited_array_reader()',
    'rss::element::inherited_base()',
    'rss::maker::base::inherited_base()',
    'rss::utils::inheritedreader#inherited_hash_reader()',
    'rss::utils::inheritedreader#inherited_reader()',
    'gem::packagetask#init()',
    'irb::inspector#init()',
    'progress::rotator#init_string()',
    'rdoc::markup::toansi#init_tags()',
    'rdoc::markup::tobs#init_tags()',
    'rdoc::markup::tohtml#init_tags()',
    'rdoc::markup::tomarkdown#init_tags()',
    'rdoc::markup::tordoc#init_tags()',
    'process::initgroups()',
    'enumeratorlazyspecs::yieldsmixed::initial_yields()',
    'gem::package#initialize()',
    'rdoc::generator::pot#initialize()',
    'rdoc::generator::ri#initialize()',
    'rdoc::rd::inline#initialize()',
    'shell::commandprocessor::initialize()',
    'kernelspecs::clone#initialize_clone()',
    'gem::resolver::molinillo::dependencygraph#initialize_copy()',
    'gem::specification#initialize_copy()',
    'json::ext::generator::state#initialize_copy()',
    'kernelspecs::duplicate#initialize_copy()',
    'openssl::bn#initialize_copy()',
    'openssl::cipher#initialize_copy()',
    'openssl::digest#initialize_copy()',
    'openssl::hmac#initialize_copy()',
    'openssl::ocsp::basicresponse#initialize_copy()',
    'openssl::ocsp::certificateid#initialize_copy()',
    'openssl::ocsp::request#initialize_copy()',
    'openssl::ocsp::response#initialize_copy()',
    'openssl::ocsp::singleresponse#initialize_copy()',
    'openssl::pkcs12#initialize_copy()',
    'openssl::pkcs7#initialize_copy()',
    'openssl::pkey::dh#initialize_copy()',
    'openssl::pkey::dsa#initialize_copy()',
    'openssl::pkey::ec#initialize_copy()',
    'openssl::pkey::ec::group#initialize_copy()',
    'openssl::pkey::ec::point#initialize_copy()',
    'openssl::pkey::rsa#initialize_copy()',
    'openssl::ssl::session#initialize_copy()',
    'openssl::x509::attribute#initialize_copy()',
    'openssl::x509::crl#initialize_copy()',
    'openssl::x509::certificate#initialize_copy()',
    'openssl::x509::extension#initialize_copy()',
    'openssl::x509::name#initialize_copy()',
    'openssl::x509::request#initialize_copy()',
    'openssl::x509::revoked#initialize_copy()',
    'stringspecs::initializestring#initialize_copy()',
    'zlib::deflate#initialize_copy()',
    'enumerablespecs::undupable#initialize_dup()',
    'kernelspecs::dup#initialize_dup()',
    'net::httpheader#initialize_http_header()',
    'rdoc::context#initialize_methods_etc()',
    'irb::initialize_tracer()',
    'rexml::elements#inject()',
    'gem::availableset#inject_into_list()',
    'rdoc::rd::inlineparser#inline()',
    'rss::atom::feed::entry::content#inline_html?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_html?()',
    'rss::atom::feed::entry::content#inline_other?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_other?()',
    'rss::atom::feed::entry::content#inline_other_base64?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_other_base64?()',
    'rss::atom::feed::entry::content#inline_other_text?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_other_text?()',
    'rss::atom::feed::entry::content#inline_other_xml?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_other_xml?()',
    'rss::atom::feed::entry::content#inline_text?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_text?()',
    'rss::atom::feed::entry::content#inline_xhtml?()',
    'rss::maker::itemsbase::itembase::contentbase#inline_xhtml?()',
    'kernelspecs::lambda#inner()',
    'returnspecs::savedinnerblock#inner()',
    'file::stat#ino()',
    'gem::mockgemui#input()',
    'readline::input=()',
    'shell::appendfile#input=()',
    'shell::appendio#input=()',
    'shell::filter#input=()',
    'shell::systemcommand#input=()',
    'matrixsub::ins()',
    'irb::jobmanager#insert()',
    'rexml::parent#insert_after()',
    'rexml::parent#insert_before()',
    'encoding::converter#insert_output()',
    'readline::insert_text()',
    'cgi::cookie#inspect()',
    'csv::row#inspect()',
    'csv::table#inspect()',
    'digest::instance#inspect()',
    'env::inspect()',
    'encoding::converter#inspect()',
    'fiddle::pointer#inspect()',
    'file::stat#inspect()',
    'gem::platform#inspect()',
    'gem::resolver::molinillo::dependencygraph#inspect()',
    'gem::resolver::molinillo::dependencygraph::vertex#inspect()',
    'irb::irb#inspect()',
    'irb::jobmanager#inspect()',
    'jisx0208::char#inspect()',
    'net::http#inspect()',
    'net::httpgenericrequest#inspect()',
    'net::httpresponse#inspect()',
    'net::pop3#inspect()',
    'net::popmail#inspect()',
    'net::smtp#inspect()',
    'net::writeadapter#inspect()',
    'objectspace::internalobjectwrapper#inspect()',
    'objectspace::weakmap#inspect()',
    'openssl::config#inspect()',
    'openssl::engine#inspect()',
    'openssl::hmac#inspect()',
    'openssl::x509::certificate#inspect()',
    'optionparser::parseerror#inspect()',
    'process::status#inspect()',
    'rexml::attribute#inspect()',
    'rexml::element#inspect()',
    'rexml::instruction#inspect()',
    'rexml::parsers::pullevent#inspect()',
    'rexml::text#inspect()',
    'rexml::validation::choice#inspect()',
    'rexml::validation::event#inspect()',
    'rexml::validation::interleave#inspect()',
    'rexml::validation::ref#inspect()',
    'rexml::validation::state#inspect()',
    'rexml::xmldecl#inspect()',
    'rangespecs::custom#inspect()',
    'rangespecs::xs#inspect()',
    'rangespecs::ys#inspect()',
    'rubyvm::instruction#inspect()',
    'rubyvm::instructionsequence#inspect()',
    'shell::filter#inspect()',
    'socket::ancillarydata#inspect()',
    'socket::ifaddr#inspect()',
    'socket::option#inspect()',
    'syslog::inspect()',
    'thread::backtrace::location#inspect()',
    'uri::generic#inspect()',
    'uri::rfc2396_parser#inspect()',
    'win32::registry#inspect()',
    'zlib::gzipfile::error#inspect()',
    'irb::context#inspect?()',
    'irb::context#inspect_mode=()',
    'irb::inspector#inspect_value()',
    'fileutils::install()',
    'gem::install()',
    'gem::dependencyinstaller#install()',
    'gem::installer#install()',
    'gem::requestset#install()',
    'gem::resolver::gitspecification#install()',
    'gem::resolver::installedspecification#install()',
    'gem::resolver::lockspecification#install()',
    'gem::resolver::specification#install()',
    'gem::resolver::vendorspecification#install()',
    'drb::install_acl()',
    'irb::extendcommandbundle#install_alias_method()',
    'rss::baselistener::install_class_name()',
    'rss::basemodel#install_date_element()',
    'gem::commands::setupcommand#install_default_bundler_gem()',
    'gem::testcase#install_default_gems()',
    'gem::testcase#install_default_specs()',
    'rss::maker::dublincoremodel::install_dublin_core()',
    'gem::commands::setupcommand#install_executables()',
    'irb::contextextender::install_extend_commands()',
    'irb::extendcommandbundle::install_extend_commands()',
    'gem::commands::setupcommand#install_file()',
    'gem::requestset#install_from_gemdeps()',
    'gem::testcase#install_gem()',
    'gem::testcase#install_gem_user()',
    'rss::element::install_get_attribute()',
    'rss::baselistener::install_get_text_element()',
    'rss::basemodel#install_have_attribute_element()',
    'rss::basemodel#install_have_child_element()',
    'rss::basemodel#install_have_children_element()',
    'drb::install_id_conv()',
    'rss::maker::imagefaviconmodel::install_image_favicon()',
    'rss::maker::imageitemmodel::install_image_item()',
    'gem::indexer#install_indices()',
    'gem::requestset#install_into()',
    'gem::commands::setupcommand#install_lib()',
    'mock::install_method()',
    'rss::element::install_model()',
    'rss::element::install_must_call_validator()',
    'rss::element::install_ns()',
    'gem::commands::setupcommand#install_rdoc()',
    'rdoc::rdoc#install_siginfo_handler()',
    'gem::testcase#install_specs()',
    'shell::install_system_commands()',
    'rss::maker::taxonomytopicmodel::install_taxo_topic()',
    'rss::maker::taxonomytopicsmodel::install_taxo_topics()',
    'rss::basemodel#install_text_element()',
    'gem::installupdateoptions#install_update_defaults_str()',
    'gem::platform::installable?()',
    'gem::resolver::installedspecification#installable_platform?()',
    'gem::resolver::localspecification#installable_platform?()',
    'gem::resolver::specification#installable_platform?()',
    'gem::installer#installation_satisfies_dependency?()',
    'gem::resolver::activationrequest#installed?()',
    'rdoc::servlet#installed_docs()',
    'gem::installer#installed_specs()',
    'csv::instance()',
    'gem::commandmanager::instance()',
    'gem::commandmanager#instance()',
    'redblacktree::nilnode::instance()',
    'syslog::instance()',
    'rdoc::context#instance_attributes()',
    'rdoc::context#instance_method_list()',
    'rdoc::store#instance_methods()',
    'himmspecs::subclass#instance_sub_method()',
    'hmmspecs::subclass#instance_sub_method()',
    'definedspecs::basic#instance_variable_defined()',
    'definedspecs::basic#instance_variable_defined_nil()',
    'definedspecs::basic#instance_variable_read()',
    'definedspecs::basic#instance_variable_undefined()',
    'rexml::streamlistener#instruction()',
    'rss::listenermixin#instruction()',
    'rexml::parsers::pullevent#instruction?()',
    'rexml::element#instructions()',
    'socket::ancillarydata::int()',
    'socket::ancillarydata#int()',
    'socket::option::int()',
    'socket::option#int()',
    'rdoc::ri::driver#interactive()',
    'objectspace::internal_class_of()',
    'objectspace::internalobjectwrapper#internal_object_id()',
    'objectspace::internal_super_of()',
    'debugger__::interrupt()',
    'env::invert()',
    'yaml::dbm#invert()',
    'openssl::pkey::ec::point#invert!()',
    'gem::command#invoke()',
    'processspecs::daemonizer#invoke()',
    'breakspecs::lambda#invoke_lambda()',
    'breakspecs::lambda#invoke_lambda_block()',
    'gem::command#invoke_with_build_args()',
    'breakspecs::lambda#invoke_yield()',
    'breakspecs::block#invoke_yield_in_while()',
    'breaktest::invoking_method()',
    'chainednexttest::invoking_method()',
    'returnspecs::nestedcalls#invoking_method()',
    'breaktest::invoking_method2()',
    'iospecs::io_fixture()',
    'iospecs::io_mock()',
    'addrinfo::ip()',
    'socket::ip_address_list()',
    'socket::ancillarydata::ip_pktinfo()',
    'socket::ancillarydata#ip_pktinfo()',
    'socket::option::ipv4_multicast_loop()',
    'socket::option#ipv4_multicast_loop()',
    'socket::option::ipv4_multicast_ttl()',
    'socket::option#ipv4_multicast_ttl()',
    'socket::ancillarydata::ipv6_pktinfo()',
    'socket::ancillarydata#ipv6_pktinfo()',
    'socket::ancillarydata#ipv6_pktinfo_addr()',
    'socket::ancillarydata#ipv6_pktinfo_ifindex()',
    'irb::irb()',
    'irb::jobmanager#irb()',
    'irb::irb_abort()',
    'irb::irb_at_exit()',
    'irb::extendcommandbundle#irb_context()',
    'irb::irb_exit()',
    'irb::extendcommandbundle#irb_exit()',
    'irb::context#irb_level()',
    'irb::extendcommandbundle#irb_load()',
    'irb::irbloader#irb_load()',
    'irb::extendcommandbundle#irb_require()',
    'super::mm_b#is_a?()',
    'rdoc::constant#is_alias_for()',
    'gem::resolver::molinillo::dependencygraph::vertex#is_reachable_from?()',
    'net::http::is_version_1_2?()',
    'rubyvm::instructionsequence::fs2storage#iseq_key_name()',
    'kconv::iseuc()',
    'kconv::isjis()',
    'date::iso8601()',
    'datetime::iso8601()',
    'time::iso8601()',
    'process::sys::issetugid()',
    'kconv::issjis()',
    'openssl::pkcs7::recipientinfo#issuer()',
    'openssl::pkcs7::signerinfo#issuer()',
    'openssl::x509::crl#issuer()',
    'openssl::x509::certificate#issuer()',
    'openssl::x509::crl#issuer=()',
    'openssl::x509::certificate#issuer=()',
    'openssl::x509::extensionfactory#issuer_certificate=()',
    'openssl::ocsp::certificateid#issuer_key_hash()',
    'openssl::ocsp::certificateid#issuer_name_hash()',
    'gem::security::trustdir#issuer_of()',
    'kconv::isutf8()',
    'rdoc::testcase#item()',
    'rss::atom::entry#items()',
    'rss::rss#items()',
    'bug::integer::breakable::iter_break()',
    'bug::integer::breakable::iter_break_value()',
    'gem::resolver::stats#iteration!()',
    'openssl::cipher#iv=()',
    'openssl::cipher#iv_len()',
    'openssl::cipher#iv_len=()',
    'date::jd()',
    'datetime::jd()',
    'date::jisx0301()',
    'datetime::jisx0301()',
    'shell::processcontroller#jobs()',
    'shell::processcontroller#jobs_exist?()',
    'file::join()',
    'shellwords::join()',
    'uri::join()',
    'uri::rfc2396_parser#join()',
    'threadspecs::join_dying_thread_with_outer_ensure()',
    'json::genericobject::json_creatable?()',
    'bigdecimal::json_create()',
    'complex::json_create()',
    'date::json_create()',
    'datetime::json_create()',
    'exception::json_create()',
    'json::ext::generator::generatormethods::string::extend#json_create()',
    'json::genericobject::json_create()',
    'openstruct::json_create()',
    'range::json_create()',
    'rational::json_create()',
    'regexp::json_create()',
    'struct::json_create()',
    'symbol::json_create()',
    'time::json_create()',
    'date::julian_leap?()',
    'kernelspecs::methods::juu()',
    'kernelspecs::methods::juu_ichi()',
    'kernelspecs::methods::juu_ni()',
    'kernelspecs::methods#juu_san()',
    'kconv::kconv()',
    'webrick::httprequest#keep_alive?()',
    'webrick::httpresponse#keep_alive?()',
    'env::keep_if()',
    'processspecs::daemon#keep_stdio_open_false_stderr()',
    'processspecs::daemon#keep_stdio_open_false_stdin()',
    'processspecs::daemon#keep_stdio_open_false_stdout()',
    'processspecs::daemon#keep_stdio_open_files()',
    'processspecs::daemon#keep_stdio_open_true_stderr()',
    'processspecs::daemon#keep_stdio_open_true_stdin()',
    'processspecs::daemon#keep_stdio_open_true_stdout()',
    'basicobjectspecs::bosubclass::kernel_defined?()',
    'env::key()',
    'yaml::dbm#key()',
    'openssl::cipher#key=()',
    'cgi::queryextension#key?()',
    'csv::row#key?()',
    'env::key?()',
    'net::httpheader#key?()',
    'objectspace::weakmap#key?()',
    'openssl::cipher#key_len()',
    'openssl::cipher#key_len=()',
    'gem::testcase::key_path()',
    'cgi::queryextension#keys()',
    'env::keys()',
    'objectspace::weakmap#keys()',
    'win32::registry#keys()',
    'irb::inspector::keys_with_inspector()',
    'irb::jobmanager#kill()',
    'process::kill()',
    'shell::systemcommand#kill()',
    'thread::kill()',
    'shell::processcontroller#kill_job()',
    'aliasobject::klass_method()',
    'kernelspecs::methods#ku()',
    'matrix::lupdecomposition#l()',
    'reflectspecs::l#l_pro()',
    'reflectspecs::l#l_pub()',
    'rubyvm::instructionsequence#label()',
    'thread::backtrace::location#label()',
    'rexml::functions::lang()',
    'rdoc::markup::list#last()',
    'rexml::functions::last()',
    'rss::maker::channelbase#lastbuilddate=()',
    'encoding::converter#last_error()',
    'fiddle::last_error()',
    'fiddle::last_error=()',
    'regexp::last_match()',
    'openuri::meta#last_modified()',
    'rdoc::toplevel#last_modified()',
    'objectspacefixtures::last_objid()',
    'process::last_status()',
    'openssl::x509::crl#last_update()',
    'openssl::x509::crl#last_update=()',
    'gc::latest_gc_info()',
    'gem::latest_rubygems_version()',
    'gem::latest_spec_for()',
    'gem::server#latest_specs()',
    'gem::specification::latest_specs()',
    'gem::dependency#latest_version?()',
    'gem::latest_version_for()',
    'gem::server#launch()',
    'enumerator::lazy#lazy()',
    'file::lchmod()',
    'file::lchown()',
    'math::ldexp()',
    'bug::scanargs::lead()',
    'bug::scanargs::lead_hash()',
    'bug::scanargs::lead_opt()',
    'bug::scanargs::lead_opt_hash()',
    'bug::scanargs::lead_opt_trail()',
    'bug::scanargs::lead_opt_trail_hash()',
    'bug::scanargs::lead_opt_var()',
    'bug::scanargs::lead_opt_var_hash()',
    'bug::scanargs::lead_opt_var_trail()',
    'bug::scanargs::lead_opt_var_trail_hash()',
    'bug::scanargs::lead_var()',
    'bug::scanargs::lead_var_hash()',
    'bug::scanargs::lead_var_trail()',
    'bug::scanargs::lead_var_trail_hash()',
    'date::leap?()',
    'squigglyheredocspecs::least_indented_on_the_last_line()',
    'gem::testcase::specfetchersetup#legacy_platform()',
    'digest::instance#length()',
    'env::length()',
    'objectspace::weakmap#length()',
    'rdoc::markup::listitem#length()',
    'rexml::attributes#length()',
    'rexml::parent#length()',
    'rexml::syncenumerator#length()',
    'socket::ancillarydata#level()',
    'socket::option#level()',
    'zlib::gzipfile#level()',
    'irb::notifier::compositenotifier#level=()',
    'irb::notifier::compositenotifier#level_notifier=()',
    'gem::text#levenshtein_distance()',
    'ripper::lex()',
    'math::lgamma()',
    'gem::basicspecification#lib_dirs_glob()',
    'gem::specification#lib_files()',
    'psych::libyaml_version()',
    'gem::specification#license()',
    'gem::specification#license=()',
    'gem::specification#licenses()',
    'gem::specification#licenses=()',
    'bigdecimal::limit()',
    'irb::readlineinputmethod#line()',
    'irb::stdioinputmethod#line()',
    'rexml::parseexception#line()',
    'readline::line_buffer()',
    'rdoc::rd::blockparser#line_index()',
    'psych::emitter#line_width()',
    'psych::emitter#line_width=()',
    'ripper::filter#lineno()',
    'thread::backtrace::location#lineno()',
    'zlib::gzipreader#lineno()',
    'zlib::gzipreader#lineno=()',
    'iospecs::lines()',
    'zlib::gzipreader#lines()',
    'iospecs::lines_arbitrary_separator()',
    'iospecs::lines_empty_separator()',
    'iospecs::lines_limit()',
    'iospecs::lines_r_separator()',
    'iospecs::lines_space_separator()',
    'iospecs::lines_space_separator_limit()',
    'iospecs::lines_without_newline_characters()',
    'socket::option::linger()',
    'socket::option#linger()',
    'file::link()',
    'fileutils::link()',
    'rdoc::markup::tohtmlcrossref#link()',
    'rss::maker::imagebase#link()',
    'downloader::link_cache()',
    'rdoc::markdown#link_to()',
    'encoding::list()',
    'net::ftp#list()',
    'net::imap#list()',
    'netftpspecs::dummyftp#list()',
    'rdoc::testcase#list()',
    'signal::list()',
    'thread::list()',
    'webrick::httputils::formdata#list()',
    'rdoc::markup::tohtml#list_end_for()',
    'rdoc::rdoc#list_files_in_directory()',
    'rdoc::markdown#list_item_from()',
    'rdoc::markup::tohtml#list_item_start()',
    'rdoc::markup::tohtmlsnippet#list_item_start()',
    'rdoc::ri::driver#list_known_classes()',
    'rdoc::ri::driver#list_methods_matching()',
    'net::ftp::mlsxentry#listable?()',
    'gem::server#listen()',
    'openssl::ssl::sslserver#listen()',
    'rexml::parsers::sax2parser#listen()',
    'webrick::genericserver#listen()',
    'rss::rexmlparser::listener()',
    'rss::xmlparserparser::listener()',
    'rss::xmlscanparser::listener()',
    'rss::rexmllikexmlparser#listener=()',
    'hashstringsascii8bit::literal_hash()',
    'hashstringsusascii::literal_hash()',
    'hashstringsutf8::literal_hash()',
    'fileutils::ln()',
    'openssl::asn1::objectid#ln()',
    'fileutils::ln_s()',
    'fileutils::ln_sf()',
    'jisx0208::char#lo()',
    'benchmarkdriver::load()',
    'casefolding::load()',
    'casemapping::load()',
    'codeloadingspecs::method#load()',
    'gem::requestset::gemdependencyapi#load()',
    'gem::safeyaml::load()',
    'gem::specification::load()',
    'irb::locale#load()',
    'json::genericobject::load()',
    'marshal::load()',
    'openssl::engine::load()',
    'psych::load()',
    'rdoc::i18n::locale#load()',
    'rdoc::store#load_all()',
    'gem::configfile#load_api_keys()',
    'rdoc::store#load_cache()',
    'gem::testcase::load_cert()',
    'gem::security::trustdir#load_certificate()',
    'rdoc::store#load_class()',
    'rdoc::store#load_class_data()',
    'gem::commands::certcommand#load_default_cert()',
    'gem::commands::certcommand#load_default_key()',
    'gem::specification::load_defaults()',
    'gem::load_env_plugins()',
    'gem::configfile#load_file()',
    'irb::irbloader#load_file()',
    'psych::load_file()',
    'rubyvm::instructionsequence::load_from_binary()',
    'rubyvm::instructionsequence::load_from_binary_extra_data()',
    'gem::requestset#load_gemdeps()',
    'rubyvm::instructionsequence::load_iseq()',
    'rubyvm::instructionsequence::basicstorage#load_iseq()',
    'rubyvm::instructionsequence::nullstorage#load_iseq()',
    'gem::testcase::load_key()',
    'rdoc::ri::driver#load_method()',
    'rdoc::store#load_method()',
    'rdoc::ri::driver#load_methods_matching()',
    'webrick::httputils::load_mime_types()',
    'rdoc::rdoc#load_options()',
    'rdoc::store#load_page()',
    'gem::load_path_insert_index()',
    'gem::load_plugins()',
    'openssl::engine#load_private_key()',
    'bug::load_protect()',
    'openssl::engine#load_public_key()',
    'openssl::random::load_random_file()',
    'rdoc::rubygemshook::load_rdoc()',
    'gem::testcase::staticset#load_spec()',
    'gem::source#load_specs()',
    'psych::load_stream()',
    'rdoc::parser::c#load_variable_map()',
    'gem::load_yaml()',
    'rdoc::load_yaml()',
    'ksautoloadb::loaded()',
    'ksautoloadc::loaded()',
    'ksautoloadd::loaded()',
    'modulespecs::autoload::dynclass::c#loaded()',
    'modulespecs::autoload::dynmodule::d#loaded()',
    'modulespecs::autoload::e#loaded()',
    'modulespecs::autoload::f::loaded()',
    'modulespecs::autoload::g#loaded()',
    'modulespecs::autoload::h#loaded()',
    'modulespecs::autoload::loadpath::loaded()',
    'gem::testcase#loaded_spec_names()',
    'gem::platform::local()',
    'time::local()',
    'gem::localremoteoptions#local?()',
    'rexml::functions::local_name()',
    'rexml::light::node#local_name()',
    'rexml::light::node#local_name=()',
    'vcs::local_path?()',
    'definedspecs::basic#local_variable_defined()',
    'definedspecs::basic#local_variable_defined_nil()',
    'win32ole::locale()',
    'win32ole::locale=()',
    'encoding::locale_charmap()',
    'methodspecs::sourcelocation::location()',
    'unboundmethodspecs::sourcelocation::location()',
    'gem::location_of_caller()',
    'kernelspecs::callerlocationstest::locations()',
    'kernelspecs::callertest::locations()',
    'threadbacktracelocationspecs::locations()',
    'net::http#lock()',
    'bigmath::log()',
    'cmath::log()',
    'math::log()',
    'socketspecs::spectcpserver#log()',
    'syslog::log()',
    'webrick::basiclog#log()',
    'webrick::log#log()',
    'cmath::log10()',
    'math::log10()',
    'cmath::log2()',
    'math::log2()',
    'net::pop3#logging()',
    'net::ftp#login()',
    'net::imap#login()',
    'rss::maker::channelbase#logo()',
    'rss::maker::channelbase#logo=()',
    'net::imap#logout()',
    'openssl::asn1::objectid#long_name()',
    'rdoc::parser::c#look_for_directives_in()',
    'rdoc::parser::ruby#look_for_directives_in()',
    'rdoc::ri::driver#lookup_method()',
    'rinda::ringfinger#lookup_ring()',
    'rinda::ringfinger#lookup_ring_any()',
    'webrick::httpserver#lookup_server()',
    'nextspecs::loop_next()',
    'nextspecs::loop_within_iter()',
    'breakspecs::block#looped_break_in_captured_block()',
    'win32::sspi::securityhandle#lower()',
    'net::ftp#ls()',
    'reflectspecs::l::ls_pro()',
    'reflectspecs::l::ls_pub()',
    'openssl::bn#lshift!()',
    'file::lstat()',
    'net::imap#lsub()',
    'file::lutime()',
    'blockspecs::yielder#m()',
    'classspecs::l::m()',
    'super::zsuperwithoptional::a#m()',
    'super::zsuperwithoptional::b#m()',
    'super::zsuperwithoptional::c#m()',
    'super::zsuperwithrest::a#m()',
    'super::zsuperwithrest::b#m()',
    'super::zsuperwithrestandothers::a#m()',
    'super::zsuperwithrestandothers::b#m()',
    'super::zsuperwithunderscores::a#m()',
    'super::zsuperwithunderscores::b#m()',
    'tracepointspec::classwithmethodalias#m()',
    'yieldspecs::yielder#m()',
    'tracepointspec::classwithmethodalias#m_alias()',
    'super::zsuperwithrest::a#m_modified()',
    'super::zsuperwithrest::b#m_modified()',
    'super::zsuperwithrestandothers::a#m_modified()',
    'super::zsuperwithrestandothers::b#m_modified()',
    'super::zsuperwithunderscores::a#m_modified()',
    'super::zsuperwithunderscores::b#m_modified()',
    'reflectspecs::m#m_pro()',
    'reflectspecs::m#m_pub()',
    'modulespecs::a#ma()',
    'net::popmail#mail()',
    'net::smtp#mailfrom()',
    'net::pop3#mails()',
    'irb::context#main()',
    'mspecscript::main()',
    'mkspec::main()',
    'rdoc::store#main()',
    'thread::main()',
    'rdoc::store#main=()',
    'irb::jobmanager#main_irb()',
    'irb::jobmanager#main_thread()',
    'threadspecs::main_thread1()',
    'threadspecs::main_thread2()',
    'net::httpheader#main_type()',
    'bug::typeddata::make()',
    'gem::ext::builder::make()',
    'rss::maker::make()',
    'rss::maker::rssbase::make()',
    'rss::maker::rssbase#make()',
    'openssl::pkey::ec::point#make_affine!()',
    'modulespecs::aliasing::make_alias()',
    'classspecs::c::make_class_instance_variable()',
    'classspecs::c::make_class_variable()',
    'classspecs::d#make_class_variable()',
    'filespecs::make_closer()',
    'gem::testcase::make_command()',
    'gem::testcase#make_command()',
    'weakrefspec::make_dead_weakref()',
    'gem::commands::setupcommand#make_destination_dirs()',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular#make_edge()',
    'gem::resolver::molinillo::dependencygraph::deleteedge#make_edge()',
    'rinda::tupleentry#make_expires()',
    'objectspacefixtures::make_finalizer()',
    'rdoc::parser::ruby#make_message()',
    'syslog::logger::make_methods()',
    'gem::requestset::lockfile::tokenizer#make_parser()',
    'webrick::httpauth::basicauth::make_passwd()',
    'webrick::httpauth::digestauth::make_passwd()',
    'webrick::httpauth::userdb#make_passwd()',
    'uri::rfc2396_parser#make_regexp()',
    'rinda::ringserver#make_socket()',
    'mspec::make_tag_dir()',
    'gem::indexer#make_temp_directories()',
    'debugger__::make_thread_list()',
    'rinda::tupleentry#make_tuple()',
    'rdoc::store#make_variable_map()',
    'weakrefspec::make_weakref()',
    'win32::registry::api#make_wstr()',
    'fileutils::makedirs()',
    'rss::atom::contentmodel#maker_target()',
    'rss::atom::feed::logo#maker_target()',
    'rss::atom::personconstruct#maker_target()',
    'rss::taxonomytopicmodel::taxonomytopic#maker_target()',
    'rss::taxonomytopicsmodel::taxonomytopics#maker_target()',
    'rss::maker::makers()',
    'fiddle::malloc()',
    'fiddle::cstructentity::malloc()',
    'fiddle::cunionentity::malloc()',
    'fiddle::pointer::malloc()',
    'gc::malloc_allocated_size()',
    'gc::malloc_allocations()',
    'gem::commands::ownercommand#manage_owners()',
    'enumerablespecs::mapreturnsenumerable#map()',
    'enumerator::lazy#map()',
    'psych::coder#map()',
    'psych::coder#map=()',
    'gem::indexer#map_gems_to_specs()',
    'psych::parser#mark()',
    'gem::specification#mark_version()',
    'rdoc::text#markup()',
    'rdoc::methodattr#markup_code()',
    'gem::version#marshal_dump()',
    'rdoc::anymethod#marshal_dump()',
    'rdoc::attr#marshal_dump()',
    'rdoc::constant#marshal_dump()',
    'rdoc::context::section#marshal_dump()',
    'rdoc::toplevel#marshal_dump()',
    'gem::version#marshal_load()',
    'rdoc::anymethod#marshal_load()',
    'rdoc::attr#marshal_load()',
    'rdoc::constant#marshal_load()',
    'rdoc::context::section#marshal_load()',
    'gem::marshal_version()',
    'syslog::mask()',
    'syslog::mask=()',
    'rdoc::markup::attributemanager#mask_protected_sequences()',
    'acl::aclentry#match()',
    'acl::acllist#match()',
    'gem::platform::match()',
    'optionparser::completinghash#match()',
    'rexml::iosource#match()',
    'rexml::quickpath::match()',
    'rexml::source#match()',
    'rexml::xpath::match()',
    'rexml::xpathparser#match()',
    'rinda::template#match()',
    'rinda::templateentry#match()',
    'tuplespace::template#match()',
    'gem::dependency#match?()',
    'gem::licenses::match?()',
    'gem::resolver::dependencyrequest#match?()',
    'gem::availableset#match_platform!()',
    'gem::nametuple#match_platform?()',
    'rexml::source#match_to()',
    'rexml::source#match_to_consume()',
    'rexml::entity::matches?()',
    'rexml::validation::choice#matches?()',
    'rexml::validation::event#matches?()',
    'rexml::validation::interleave#matches?()',
    'rexml::validation::oneormore#matches?()',
    'rexml::validation::optional#matches?()',
    'rexml::validation::sequence#matches?()',
    'gem::basicspecification#matches_for_glob()',
    'gem::dependency#matches_spec?()',
    'gem::resolver::dependencyrequest#matches_spec?()',
    'gem::dependency#matching_specs()',
    'net::imap::max_flag_count()',
    'net::imap::max_flag_count=()',
    'json::ext::generator::state#max_nesting()',
    'json::ext::generator::state#max_nesting=()',
    'net::http#max_retries=()',
    'openssl::ssl::sslcontext#max_version=()',
    'process::maxgroups()',
    'process::maxgroups=()',
    'modulespecs::b#mb()',
    'mdoc2man::mdoc2man()',
    'net::ftp#mdtm()',
    'netftpspecs::dummyftp#mdtm()',
    'benchmark::measure()',
    'net::imap::bodytypebasic#media_subtype()',
    'net::imap::bodytypemessage#media_subtype()',
    'net::imap::bodytypemultipart#media_subtype()',
    'net::imap::bodytypetext#media_subtype()',
    'openssl::mem_check_start()',
    'csv::row#member?()',
    'env::member?()',
    'objectspace::weakmap#member?()',
    'webrick::httpauth::htgroup#members()',
    'benchmark::tms#memberwise()',
    'objectspace::memsize_of()',
    'objectspace::memsize_of_all()',
    'actionmap::merge()',
    'gem::dependency#merge()',
    'json::ext::generator::state#merge()',
    'rdoc::classmodule#merge()',
    'rdoc::generator::pot::poentry#merge()',
    'rdoc::markup::document#merge()',
    'rdoc::markup::raw#merge()',
    'uri::generic#merge()',
    'uri::generic#merge!()',
    'actionmap::merge2()',
    'gem::command#merge_options()',
    'actionmap::merge_rects()',
    'rdoc::markup::document#merged?()',
    'exceptionspecs::unexceptional#message()',
    'gem::resolver::molinillo::nosuchdependencyerror#message()',
    'gem::runtimerequirementnotmeterror#message()',
    'net::smtp::response#message()',
    'object::message()',
    'optionparser::parseerror#message()',
    'squigglyheredocspecs::message()',
    'win32ole_event::message_loop()',
    'modulespecs::cvars::meta()',
    'modulespecs::cvars#meta()',
    'modulespecs::nesting::meta()',
    'webrick::httprequest#meta_vars()',
    'metaclassspecs::metaclass_of()',
    'classspecs::e#meth()',
    'classspecs::f#meth()',
    'breaktest::meth_with_block_call()',
    'breaktest::meth_with_yield()',
    'chainednexttest::meth_with_yield()',
    'breakspecs::block#method()',
    'nextspecs::block#method()',
    'returnspecs::methodwithblock#method1()',
    'returnspecs::methodwithblock#method2()',
    'object::method_added()',
    'shell::commandprocessor::method_added()',
    'definedspecs::super#method_args()',
    'definedspecs::superclass#method_args()',
    'definedspecs::super#method_block_args()',
    'definedspecs::superclass#method_block_args()',
    'definedspecs::super#method_block_no_args()',
    'definedspecs::superclass#method_block_no_args()',
    'methodspecs::toproc#method_called()',
    'methodspecs::toprocbeta#method_called()',
    'rdoc::ri::driver#method_document()',
    'rdoc::store#method_file()',
    'threadbacktracelocationspecs::method_location()',
    'blockspecs::overwriteblockvariable#method_missing()',
    'drb::drbobject#method_missing()',
    'delegatespecs::simple#method_missing()',
    'filestat::method_missing()',
    'kernelspecs::classmm::method_missing()',
    'kernelspecs::classmm#method_missing()',
    'kernelspecs::modulemm::method_missing()',
    'kernelspecs::respondviamissing#method_missing()',
    'langsendspecs::methodmissing#method_missing()',
    'methodspecs::methods#method_missing()',
    'rexml::quickpath::method_missing()',
    'super::mm_b#method_missing()',
    'definedspecs::intermediatemodule1#method_no_args()',
    'definedspecs::intermediatemodule2#method_no_args()',
    'definedspecs::super#method_no_args()',
    'definedspecs::superwithintermediatemodules#method_no_args()',
    'definedspecs::superclass#method_no_args()',
    'kernelspecs::classnomm::method_protected()',
    'kernelspecs::classnomm#method_protected()',
    'kernelspecs::modulemm::method_protected()',
    'kernelspecs::modulenomm::method_protected()',
    'kernelspecs::classnomm::method_public()',
    'kernelspecs::classnomm#method_public()',
    'kernelspecs::modulemm::method_public()',
    'kernelspecs::modulenomm::method_public()',
    'object::method_removed()',
    'modulespecs::first#method_to_remove()',
    'modulespecs::parent#method_to_remove()',
    'modulespecs::second#method_to_remove()',
    'modulespecs::ancestor#method_to_undef()',
    'modulespecs::parent#method_to_undef()',
    'rdoc::ri::driver#method_type()',
    'object::method_undefined()',
    'rdoc::context#methods_by_type()',
    'rdoc::context#methods_matching()',
    'rss::atom::feed::entry::content#mime_split()',
    'webrick::httputils::mime_type()',
    'openssl::ssl::sslcontext#min_version=()',
    'rss::itunesitemmodel::itunesduration#minute=()',
    'rss::maker::itunesitemmodel::itunesdurationbase#minute=()',
    'gem::specification#missing_extensions?()',
    'gem::bundlerversionfinder::missing_version_message()',
    'net::http#mkcol()',
    'netftpspecs::dummyftp#mkd()',
    'dir::mkdir()',
    'fileutils::mkdir()',
    'gem::package::tarwriter#mkdir()',
    'net::ftp#mkdir()',
    'shell::commandprocessor#mkdir()',
    'fileutils::mkdir_p()',
    'gem::package#mkdir_p_safe()',
    'file::mkfifo()',
    'fileutils::mkpath()',
    'time::mktime()',
    'dir::mktmpdir()',
    'net::ftp#mlsd()',
    'net::ftp#mlst()',
    'dirspecs::mock_dir()',
    'finddirspecs::mock_dir()',
    'dirspecs::mock_dir_files()',
    'finddirspecs::mock_dir_files()',
    'mock::mock_respond_to?()',
    'dirspecs::mock_rmdir()',
    'mock::mocks()',
    'openssl::bn#mod_add()',
    'openssl::bn#mod_exp()',
    'openssl::bn#mod_inverse()',
    'openssl::bn#mod_mul()',
    'openssl::bn#mod_sqr()',
    'openssl::bn#mod_sub()',
    'bigdecimal::mode()',
    'file::stat#mode()',
    'mspec::mode?()',
    'downloader::mode_for()',
    'rss::element::models()',
    'rdoc::mixin#module()',
    'rdoc::classmodule#module?()',
    'rdoc::normalmodule#module?()',
    'definedspecs::child::module_constant_defined()',
    'definedspecs::child::module_defined()',
    'rdoc::store#module_names()',
    'objectspace::module_refenreces()',
    'objectspace::module_refenreces_dot()',
    'objectspace::module_refenreces_image()',
    'rdoc::context#modules()',
    'rdoc::context#modules_hash()',
    'rdoc::store#modules_hash()',
    'webrick::httpserver#mount()',
    'webrick::httpserver#mount_proc()',
    'fileutils::move()',
    'net::http#move()',
    'net::imap#move()',
    'rinda::tuplespace#move()',
    'kernelspecs::lambda#mp()',
    'returnspecs::throughdefinemethod#mp()',
    'reflectspecs::m::ms_pro()',
    'reflectspecs::m::ms_pub()',
    'file::mtime()',
    'file::stat#mtime()',
    'net::ftp#mtime()',
    'zlib::gzipfile#mtime()',
    'zlib::gzipwriter#mtime=()',
    'gem::testcase#mu_pp()',
    'openssl::pkey::ec::point#mul()',
    'cgi::queryextension#multipart?()',
    'net::imap::bodytypeattachment#multipart?()',
    'net::imap::bodytypebasic#multipart?()',
    'net::imap::bodytypeextension#multipart?()',
    'net::imap::bodytypemessage#multipart?()',
    'net::imap::bodytypemultipart#multipart?()',
    'net::imap::bodytypetext#multipart?()',
    'cgi::htmlextension#multipart_form()',
    'stringscanner::must_c_version()',
    'rss::element::must_call_validators()',
    'fileutils::mv()',
    'procspecs::sourcelocation::my_detached_lambda()',
    'procspecs::sourcelocation::my_detached_proc()',
    'procspecs::sourcelocation::my_detached_proc_new()',
    'procspecs::sourcelocation::my_lambda()',
    'procspecs::sourcelocation::my_method()',
    'procspecs::sourcelocation::my_multiline_lambda()',
    'procspecs::sourcelocation::my_multiline_proc()',
    'procspecs::sourcelocation::my_multiline_proc_new()',
    'procspecs::sourcelocation::my_proc()',
    'procspecs::sourcelocation::my_proc_new()',
    'namemapspecs::n()',
    'net::pop3#n_bytes()',
    'irb::jobmanager#n_jobs()',
    'net::pop3#n_mails()',
    'reflectspecs::n#n_pro()',
    'reflectspecs::n#n_pub()',
    'gem::basicspecification#name()',
    'gem::resolver::activationrequest#name()',
    'gem::resolver::dependencyrequest#name()',
    'gem::resolver::molinillo::delegates::resolutionstate#name()',
    'gem::resolver::specspecification#name()',
    'gem::unsatisfiabledependencyerror#name()',
    'modulespecs::nameencoding#name()',
    'openssl::cipher#name()',
    'openssl::digest#name()',
    'openssl::engine#name()',
    'openssl::pkcs7::signerinfo#name()',
    'rdoc::anymethod#name()',
    'rdoc::ri::driver::notfounderror#name()',
    'rdoc::toplevel#name()',
    'rexml::document#name()',
    'rexml::functions::name()',
    'rexml::light::node#name()',
    'rexml::notationdecl#name()',
    'rexml::quickpath::name()',
    'socket::ifaddr#name()',
    'super::alias1#name()',
    'super::alias2#name()',
    'usermarshalwithclassname::name()',
    'win32::registry#name()',
    'rdoc::classmodule#name=()',
    'rexml::light::node#name=()',
    'rexml::namespace#name=()',
    'gem::resolver#name_for()',
    'gem::resolver::molinillo::delegates::specificationprovider#name_for()',
    'gem::resolver::molinillo::specificationprovider#name_for()',
    'gem::resolver::molinillo::delegates::specificationprovider#name_for_explicit_dependency_source()',
    'gem::resolver::molinillo::specificationprovider#name_for_explicit_dependency_source()',
    'gem::resolver::molinillo::delegates::specificationprovider#name_for_locking_dependency_source()',
    'gem::resolver::molinillo::specificationprovider#name_for_locking_dependency_source()',
    'rdoc::classmodule#name_for_path()',
    'rdoc::context#name_for_path()',
    'encoding::name_list()',
    'mock::name_or_inspect()',
    'gem::security::trustdir#name_path()',
    'rdoc::alias#name_prefix()',
    'rdoc::methodattr#name_prefix()',
    'rdoc::ri::driver#name_regexp()',
    'gem::specification#name_tuple()',
    'rexml::attribute#namespace()',
    'rexml::element#namespace()',
    'rexml::light::node#namespace()',
    'rexml::light::node#namespace=()',
    'rexml::functions::namespace_context()',
    'rexml::functions::namespace_context=()',
    'rexml::functions::namespace_uri()',
    'rexml::attributes#namespaces()',
    'rexml::element#namespaces()',
    'rexml::parsers::xpathparser#namespaces=()',
    'rexml::xpathparser#namespaces=()',
    'rss::atom::feed::entry::content#need_base64_encode?()',
    'rss::element#need_base64_encode?()',
    'rss::element::need_initialize_variables()',
    'rss::maker::base::need_initialize_variables()',
    'rss::atom::commonmodel::need_parent?()',
    'rss::element::need_parent?()',
    'gem::needs()',
    'unboundmethodspecs::methods#neg_four()',
    'unboundmethodspecs::methods#neg_one()',
    'unboundmethodspecs::methods#neg_three()',
    'unboundmethodspecs::methods#neg_two()',
    'openssl::bn#negative?()',
    'module::nesting()',
    'socket::ifaddr#netmask()',
    'acl::new()',
    'acl::aclentry::new()',
    'acl::acllist::new()',
    'action::new()',
    'actionfilter::new()',
    'actionmap::new()',
    'adder::new()',
    'addrinfo::new()',
    'array::new()',
    'arraycode::new()',
    'arrayspecs::arrayconvertable::new()',
    'arrayspecs::comparablewithfixnum::new()',
    'arrayspecs::mockforcompared::new()',
    'arrayspecs::myarray::new()',
    'arrayspecs::sexp::new()',
    'arrayspecs::subarray::new()',
    'arraysub::new()',
    'bar::new()',
    'basicobjectspecs::ivars::new()',
    'beaninstanceofmatcher::new()',
    'beancestorofmatcher::new()',
    'beclosematcher::new()',
    'beclosetomatrixmatcher::new()',
    'becomputedbymatcher::new()',
    'bekindofmatcher::new()',
    'benchmark::tms::new()',
    'benchmarkdriver::new()',
    'biff::new()',
    'bigdecimal::new()',
    'bindingspecs::demo::new()',
    'blockspecs::overwriteblockvariable::new()',
    'board::new()',
    'branch::new()',
    'breakspecs::driver::new()',
    'bug::integer::myinteger::new()',
    'bugguard::new()',
    'c::new()',
    'capiclassspecs::alloc::new()',
    'capiclassspecs::attr::new()',
    'capiobjectspecs::alloc::new()',
    'cgi::new()',
    'cgi::cookie::new()',
    'cgi::session::new()',
    'cgi::session::filestore::new()',
    'cgi::session::memorystore::new()',
    'cgi::session::nullstore::new()',
    'cgi::session::pstore::new()',
    'chashdir::new()',
    'csv::new()',
    'csv::row::new()',
    'csv::table::new()',
    'cal::new()',
    'casemapping::new()',
    'certstore::new()',
    'chatclient::new()',
    'chatentry::new()',
    'chatserver::new()',
    'checksum::new()',
    'class::new()',
    'clock::new()',
    'colorize::new()',
    'comparablespecs::comparecallingsuper::new()',
    'comparablespecs::withonlycomparedefined::new()',
    'complainmatcher::new()',
    'conditionvariable::new()',
    'contextstate::new()',
    'crlstore::new()',
    'customargumenterror::new()',
    'dbm::new()',
    'dqentry::new()',
    'drb::drbarray::new()',
    'drb::drbobject::new()',
    'drb::drbremoteerror::new()',
    'drb::drbsslsocket::new()',
    'drb::drbsslsocket::sslconfig::new()',
    'drb::drbserver::new()',
    'drb::drbunknown::new()',
    'drb::drbunknownerror::new()',
    'drb::extserv::new()',
    'drb::extservmanager::new()',
    'drb::gw::new()',
    'drb::http0::callback::new()',
    'drb::http0::clientside::new()',
    'drb::http0::server::new()',
    'drb::http0::serverside::new()',
    'drb::http0::strstream::new()',
    'drb::timeridconv::new()',
    'drbex::new()',
    'drbex2::new()',
    'drbex3::new()',
    'drbex4::new()',
    'drbnamedidconv::new()',
    'date::new()',
    'datetime::new()',
    'definitializespec::new()',
    'delegator::new()',
    'demoapplication::new()',
    'dhasen::new()',
    'digest::instance#new()',
    'digest::sha2::new()',
    'dir::new()',
    'dog::new()',
    'dottedformatter::new()',
    'erb::new()',
    'emojitable::new()',
    'encoding::converter::new()',
    'ensurespec::container::new()',
    'ensurespec::test::new()',
    'enumspecs::numerous::new()',
    'enumerablespecs::arrayconvertable::new()',
    'enumerablespecs::comparablewithfixnum::new()',
    'enumerablespecs::comparesbyvowelcount::new()',
    'enumerablespecs::eachcounter::new()',
    'enumerablespecs::eachdefiner::new()',
    'enumerablespecs::enumconvertable::new()',
    'enumerablespecs::equals::new()',
    'enumerablespecs::mapreturnsenumerable::enumerablemapping::new()',
    'enumerablespecs::numerous::new()',
    'enumerablespecs::pattern::new()',
    'enumerablespecs::reversecomparable::new()',
    'enumerablespecs::sortbydummy::new()',
    'enumerablespecs::undupable::new()',
    'enumerator::new()',
    'enumerator::lazy::new()',
    'eqlmatcher::new()',
    'equalelementmatcher::new()',
    'equalmatcher::new()',
    'examplestate::new()',
    'exception::new()',
    'exceptionspecs::constructorexception::new()',
    'exceptionstate::new()',
    'exports::new()',
    'extarray::new()',
    'fiddle::cstructentity::new()',
    'fiddle::closure::new()',
    'fiddle::closure::blockcaller::new()',
    'fiddle::compositehandler::new()',
    'fiddle::function::new()',
    'fiddle::handle::new()',
    'fiddle::pointer::new()',
    'file::new()',
    'file::stat::new()',
    'floatspecs::cancoerce::new()',
    'foo::new()',
    'foobar::new()',
    'front::new()',
    'gdbm::new()',
    'gem::availableset::new()',
    'gem::basicspecification::new()',
    'gem::command::new()',
    'gem::commandmanager::new()',
    'gem::commands::buildcommand::new()',
    'gem::commands::certcommand::new()',
    'gem::commands::checkcommand::new()',
    'gem::commands::cleanupcommand::new()',
    'gem::commands::contentscommand::new()',
    'gem::commands::dependencycommand::new()',
    'gem::commands::environmentcommand::new()',
    'gem::commands::fetchcommand::new()',
    'gem::commands::generateindexcommand::new()',
    'gem::commands::helpcommand::new()',
    'gem::commands::installcommand::new()',
    'gem::commands::listcommand::new()',
    'gem::commands::lockcommand::new()',
    'gem::commands::mirrorcommand::new()',
    'gem::commands::opencommand::new()',
    'gem::commands::outdatedcommand::new()',
    'gem::commands::ownercommand::new()',
    'gem::commands::pristinecommand::new()',
    'gem::commands::pushcommand::new()',
    'gem::commands::querycommand::new()',
    'gem::commands::rdoccommand::new()',
    'gem::commands::searchcommand::new()',
    'gem::commands::servercommand::new()',
    'gem::commands::setupcommand::new()',
    'gem::commands::signincommand::new()',
    'gem::commands::signoutcommand::new()',
    'gem::commands::sourcescommand::new()',
    'gem::commands::specificationcommand::new()',
    'gem::commands::stalecommand::new()',
    'gem::commands::uninstallcommand::new()',
    'gem::commands::unpackcommand::new()',
    'gem::commands::updatecommand::new()',
    'gem::commands::whichcommand::new()',
    'gem::commands::yankcommand::new()',
    'gem::configfile::new()',
    'gem::conflicterror::new()',
    'gem::consoleui::new()',
    'gem::dependency::new()',
    'gem::dependencyinstaller::new()',
    'gem::dependencylist::new()',
    'gem::dependencyresolutionerror::new()',
    'gem::doctor::new()',
    'gem::ext::builder::new()',
    'gem::fakefetcher::new()',
    'gem::filepermissionerror::new()',
    'gem::gemrunner::new()',
    'gem::impossibledependencieserror::new()',
    'gem::indexer::new()',
    'gem::installer::new()',
    'gem::installer::fakepackage::new()',
    'gem::list::new()',
    'gem::missingspecerror::new()',
    'gem::missingspecversionerror::new()',
    'gem::mockgemui::new()',
    'gem::mockgemui::inputeoferror::new()',
    'gem::mockgemui::termerror::new()',
    'gem::nametuple::new()',
    'gem::package::new()',
    'gem::package::digestio::new()',
    'gem::package::formaterror::new()',
    'gem::package::old::new()',
    'gem::package::patherror::new()',
    'gem::package::tarheader::new()',
    'gem::package::tarreader::new()',
    'gem::package::tarreader::entry::new()',
    'gem::package::tarwriter::new()',
    'gem::package::tarwriter::boundedstream::new()',
    'gem::package::tarwriter::restrictedstream::new()',
    'gem::packagetask::new()',
    'gem::pathsupport::new()',
    'gem::platform::new()',
    'gem::platformmismatch::new()',
    'gem::remotefetcher::new()',
    'gem::remotefetcher::fetcherror::new()',
    'gem::request::new()',
    'gem::requestset::new()',
    'gem::requestset::gemdependencyapi::new()',
    'gem::requestset::lockfile::new()',
    'gem::requestset::lockfile::parseerror::new()',
    'gem::requestset::lockfile::parser::new()',
    'gem::requestset::lockfile::tokenizer::new()',
    'gem::requirement::new()',
    'gem::resolver::new()',
    'gem::resolver::apiset::new()',
    'gem::resolver::apispecification::new()',
    'gem::resolver::activationrequest::new()',
    'gem::resolver::bestset::new()',
    'gem::resolver::composedset::new()',
    'gem::resolver::conflict::new()',
    'gem::resolver::dependencyrequest::new()',
    'gem::resolver::indexspecification::new()',
    'gem::resolver::installerset::new()',
    'gem::resolver::lockset::new()',
    'gem::resolver::lockspecification::new()',
    'gem::resolver::molinillo::circulardependencyerror::new()',
    'gem::resolver::molinillo::dependencygraph::new()',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular::new()',
    'gem::resolver::molinillo::dependencygraph::deleteedge::new()',
    'gem::resolver::molinillo::dependencygraph::detachvertexnamed::new()',
    'gem::resolver::molinillo::dependencygraph::log::new()',
    'gem::resolver::molinillo::dependencygraph::tag::new()',
    'gem::resolver::molinillo::dependencygraph::vertex::new()',
    'gem::resolver::molinillo::nosuchdependencyerror::new()',
    'gem::resolver::molinillo::resolver::new()',
    'gem::resolver::molinillo::resolver::resolution::new()',
    'gem::resolver::molinillo::versionconflict::new()',
    'gem::resolver::requirementlist::new()',
    'gem::resolver::sourceset::new()',
    'gem::resolver::specspecification::new()',
    'gem::resolver::specification::new()',
    'gem::resolver::stats::new()',
    'gem::security::policy::new()',
    'gem::security::signer::new()',
    'gem::security::trustdir::new()',
    'gem::server::new()',
    'gem::silentui::new()',
    'gem::source::new()',
    'gem::source::git::new()',
    'gem::source::lock::new()',
    'gem::source::specificfile::new()',
    'gem::source::vendor::new()',
    'gem::sourcefetchproblem::new()',
    'gem::sourcelist::new()',
    'gem::specfetcher::new()',
    'gem::specificgemnotfoundexception::new()',
    'gem::specification::new()',
    'gem::streamui::new()',
    'gem::streamui::silentdownloadreporter::new()',
    'gem::streamui::silentprogressreporter::new()',
    'gem::streamui::simpleprogressreporter::new()',
    'gem::streamui::verbosedownloadreporter::new()',
    'gem::streamui::verboseprogressreporter::new()',
    'gem::systemexitexception::new()',
    'gem::testcase::staticset::new()',
    'gem::uninstaller::new()',
    'gem::unsatisfiabledependencyerror::new()',
    'gem::uriformatter::new()',
    'gem::version::new()',
    'getoptlong::new()',
    'hash::new()',
    'hashspecs::byvaluekey::new()',
    'hashspecs::myinitializerhash::new()',
    'hashspecs::newhash::new()',
    'hi_exception::new()',
    'hoge::new()',
    'iehandler::new()',
    'io::new()',
    'iospecs::copystreamread::new()',
    'iospecs::copystreamreadpartial::new()',
    'iostub::new()',
    'ipaddr::new()',
    'irb::context::new()',
    'irb::fileinputmethod::new()',
    'irb::frame::new()',
    'irb::inputmethod::new()',
    'irb::inspector::new()',
    'irb::irb::new()',
    'irb::jobmanager::new()',
    'irb::locale::new()',
    'irb::notifier::abstractnotifier::new()',
    'irb::notifier::compositenotifier::new()',
    'irb::notifier::levelednotifier::new()',
    'irb::notifier::nomsgnotifier::new()',
    'irb::readlineinputmethod::new()',
    'irb::stdioinputmethod::new()',
    'irb::workspace::new()',
    'includematcher::new()',
    'infinitymatcher::new()',
    'inspector::new()',
    'isect::new()',
    'itertest::new()',
    'jisx0208::char::new()',
    'json::ext::generator::state::new()',
    'json::ext::parser::new()',
    'junitformatter::new()',
    'kernelspecs::binding::new()',
    'kernelspecs::c::new()',
    'kernelspecs::duplicate::new()',
    'kernelspecs::instancevariable::new()',
    'kernelspecs::kindaclass::new()',
    'langsendspecs::methodmissing::new()',
    'langsendspecs::toary::new()',
    'langsendspecs::toproc::new()',
    'leakchecker::new()',
    'lo_exception::new()',
    'logger::new()',
    'logger::formatter::new()',
    'logger::logdevice::new()',
    'mosconfig::new()',
    'mspecmain::new()',
    'mspecoption::new()',
    'mspecoptions::new()',
    'mspecrun::new()',
    'mspecscript::new()',
    'mspectag::new()',
    'mapitem::new()',
    'marshalspec::structwithuserinitialize::new()',
    'matchfilter::new()',
    'matchyamlmatcher::new()',
    'mathspecs::float::new()',
    'matrix::new()',
    'matrix::eigenvaluedecomposition::new()',
    'matrix::lupdecomposition::new()',
    'mdoc2man::new()',
    'methodformatter::new()',
    'methodmatcher::new()',
    'microsoft_freethreadedxmldom_1_0::new()',
    'microsoft_xmldom_1_0::new()',
    'microsoft_xmldso_1_0::new()',
    'microsoft_xmlhttp_1::new()',
    'mkspec::new()',
    'mockintobject::new()',
    'mockobject::new()',
    'mockproxy::new()',
    'module::new()',
    'modulespecs::cyclicbarrier::new()',
    'modulespecs::submodule::new()',
    'modulespecs::threadsafecounter::new()',
    'monitormixin::new()',
    'monitormixin::conditionvariable::new()',
    'msxml::new()',
    'multiformatter::new()',
    'mutex::new()',
    'myapp::new()',
    'myclass1forerb_::new()',
    'myclass4forerb::new()',
    'myelem::new()',
    'nameerror::new()',
    'namemap::new()',
    'net::ftp::new()',
    'net::ftp::mlsxentry::new()',
    'net::http::new()',
    'net::httpgenericrequest::new()',
    'net::httprequest::new()',
    'net::imap::new()',
    'net::imap::crammd5authenticator::new()',
    'net::imap::digestmd5authenticator::new()',
    'net::imap::loginauthenticator::new()',
    'net::imap::plainauthenticator::new()',
    'net::imap::responseerror::new()',
    'net::pop3::new()',
    'net::smtp::new()',
    'net::smtp::response::new()',
    'net::writeadapter::new()',
    'netftpspecs::dummyftp::new()',
    'nethttpheaderspecs::example::new()',
    'nomethoderror::new()',
    'notify::new()',
    'nthtoggle::new()',
    'numericmockobject::new()',
    'oleproperty::new()',
    'objectspacefixtures::objecttobefound::new()',
    'objectspacefixtures::objectwithinstancevariable::new()',
    'objectspecdup::new()',
    'objectspecdupinitcopy::new()',
    'objecttest::new()',
    'observercallbackspecs::new()',
    'openssl::asn1::asn1data::new()',
    'openssl::asn1::constructive::new()',
    'openssl::asn1::primitive::new()',
    'openssl::bn::new()',
    'openssl::buffering::new()',
    'openssl::cipher::new()',
    'openssl::config::new()',
    'openssl::digest::new()',
    'openssl::hmac::new()',
    'openssl::netscape::spki::new()',
    'openssl::ocsp::basicresponse::new()',
    'openssl::ocsp::certificateid::new()',
    'openssl::ocsp::request::new()',
    'openssl::ocsp::response::new()',
    'openssl::ocsp::singleresponse::new()',
    'openssl::pkcs12::new()',
    'openssl::pkcs7::new()',
    'openssl::pkcs7::recipientinfo::new()',
    'openssl::pkcs7::signerinfo::new()',
    'openssl::pkey::dh::new()',
    'openssl::pkey::dsa::new()',
    'openssl::pkey::ec::new()',
    'openssl::pkey::ec::group::new()',
    'openssl::pkey::ec::point::new()',
    'openssl::pkey::pkey::new()',
    'openssl::pkey::rsa::new()',
    'openssl::ssl::sslcontext::new()',
    'openssl::ssl::sslserver::new()',
    'openssl::ssl::sslsocket::new()',
    'openssl::ssl::session::new()',
    'openssl::x509::attribute::new()',
    'openssl::x509::crl::new()',
    'openssl::x509::certificate::new()',
    'openssl::x509::extension::new()',
    'openssl::x509::extensionfactory::new()',
    'openssl::x509::name::new()',
    'openssl::x509::request::new()',
    'openssl::x509::revoked::new()',
    'openssl::x509::store::new()',
    'openssl::x509::storecontext::new()',
    'openstruct::new()',
    'openuri::httperror::new()',
    'openuri::httpredirect::new()',
    'optionparser::new()',
    'optionparser::arguable::new()',
    'optionparser::list::new()',
    'optionparser::parseerror::new()',
    'optionparser::switch::new()',
    'outputmatcher::new()',
    'outputtofdmatcher::new()',
    'pstore::new()',
    'pathname::new()',
    'pidigitspigot::new()',
    'piece::new()',
    'plane::new()',
    'planet::new()',
    'platformguard::new()',
    'point::new()',
    'prettyprint::new()',
    'prettyprint::singleline::new()',
    'prime::eratosthenesgenerator::new()',
    'prime::eratosthenessieve::new()',
    'prime::generator23::new()',
    'prime::pseudoprimegenerator::new()',
    'prime::trialdivisiongenerator::new()',
    'proc::new()',
    'procspecs::myproc2::new()',
    'processspecs::daemon::new()',
    'processspecs::daemonizer::new()',
    'processspecs::signalizer::new()',
    'profilefilter::new()',
    'profileformatter::new()',
    'progress::new()',
    'psych::classloader::restricted::new()',
    'psych::coder::new()',
    'psych::disallowedclass::new()',
    'psych::emitter::new()',
    'psych::handler::dumperoptions::new()',
    'psych::handlers::recorder::new()',
    'psych::nodes::alias::new()',
    'psych::nodes::document::new()',
    'psych::nodes::mapping::new()',
    'psych::nodes::node::new()',
    'psych::nodes::scalar::new()',
    'psych::nodes::sequence::new()',
    'psych::nodes::stream::new()',
    'psych::parser::new()',
    'psych::scalarscanner::new()',
    'psych::streaming::classmethods#new()',
    'psych::syntaxerror::new()',
    'psych::treebuilder::new()',
    'psych::visitors::depthfirst::new()',
    'psych::visitors::emitter::new()',
    'psych::visitors::toruby::new()',
    'psych::visitors::yamltree::new()',
    'queue::new()',
    'rdoc::alias::new()',
    'rdoc::anymethod::new()',
    'rdoc::attr::new()',
    'rdoc::classmodule::new()',
    'rdoc::codeobject::new()',
    'rdoc::comment::new()',
    'rdoc::constant::new()',
    'rdoc::context::new()',
    'rdoc::context::section::new()',
    'rdoc::crossreference::new()',
    'rdoc::erbio::new()',
    'rdoc::generator::darkfish::new()',
    'rdoc::generator::jsonindex::new()',
    'rdoc::generator::pot::messageextractor::new()',
    'rdoc::generator::pot::po::new()',
    'rdoc::generator::pot::poentry::new()',
    'rdoc::i18n::locale::new()',
    'rdoc::i18n::text::new()',
    'rdoc::markdown::new()',
    'rdoc::markup::new()',
    'rdoc::markup::attrspan::new()',
    'rdoc::markup::attributemanager::new()',
    'rdoc::markup::attributes::new()',
    'rdoc::markup::blankline::new()',
    'rdoc::markup::document::new()',
    'rdoc::markup::formatter::new()',
    'rdoc::markup::hardbreak::new()',
    'rdoc::markup::include::new()',
    'rdoc::markup::indentedparagraph::new()',
    'rdoc::markup::list::new()',
    'rdoc::markup::listitem::new()',
    'rdoc::markup::parser::new()',
    'rdoc::markup::preprocess::new()',
    'rdoc::markup::raw::new()',
    'rdoc::markup::special::new()',
    'rdoc::markup::toansi::new()',
    'rdoc::markup::tobs::new()',
    'rdoc::markup::tohtml::new()',
    'rdoc::markup::tohtmlcrossref::new()',
    'rdoc::markup::tohtmlsnippet::new()',
    'rdoc::markup::tolabel::new()',
    'rdoc::markup::tomarkdown::new()',
    'rdoc::markup::tordoc::new()',
    'rdoc::markup::tottonly::new()',
    'rdoc::methodattr::new()',
    'rdoc::mixin::new()',
    'rdoc::parser::new()',
    'rdoc::parser::c::new()',
    'rdoc::parser::ruby::new()',
    'rdoc::parser::simple::new()',
    'rdoc::rd::blockparser::new()',
    'rdoc::rd::inline::new()',
    'rdoc::rd::inlineparser::new()',
    'rdoc::rdoc::new()',
    'rdoc::ri::driver::new()',
    'rdoc::ri::task::new()',
    'rdoc::require::new()',
    'rdoc::ripperstatelex::new()',
    'rdoc::ripperstatelex::innerstatelex::new()',
    'rdoc::rubygemshook::new()',
    'rdoc::servlet::new()',
    'rdoc::stats::new()',
    'rdoc::stats::quiet::new()',
    'rdoc::store::new()',
    'rdoc::store::missingfileerror::new()',
    'rdoc::task::new()',
    'rdoc::tomdoc::new()',
    'rdoc::toplevel::new()',
    'rexml::attlistdecl::new()',
    'rexml::attribute::new()',
    'rexml::attributes::new()',
    'rexml::cdata::new()',
    'rexml::child::new()',
    'rexml::comment::new()',
    'rexml::dtd::elementdecl::new()',
    'rexml::dtd::entitydecl::new()',
    'rexml::dtd::notationdecl::new()',
    'rexml::declaration::new()',
    'rexml::doctype::new()',
    'rexml::document::new()',
    'rexml::element::new()',
    'rexml::elementdecl::new()',
    'rexml::elements::new()',
    'rexml::entity::new()',
    'rexml::externalentity::new()',
    'rexml::formatters::default::new()',
    'rexml::formatters::pretty::new()',
    'rexml::formatters::transitive::new()',
    'rexml::iosource::new()',
    'rexml::instruction::new()',
    'rexml::light::node::new()',
    'rexml::notationdecl::new()',
    'rexml::output::new()',
    'rexml::parent::new()',
    'rexml::parseexception::new()',
    'rexml::parsers::baseparser::new()',
    'rexml::parsers::lightparser::new()',
    'rexml::parsers::pullevent::new()',
    'rexml::parsers::pullparser::new()',
    'rexml::parsers::sax2parser::new()',
    'rexml::parsers::streamparser::new()',
    'rexml::parsers::treeparser::new()',
    'rexml::parsers::ultralightparser::new()',
    'rexml::source::new()',
    'rexml::syncenumerator::new()',
    'rexml::text::new()',
    'rexml::undefinednamespaceexception::new()',
    'rexml::validation::choice::new()',
    'rexml::validation::event::new()',
    'rexml::validation::interleave::new()',
    'rexml::validation::oneormore::new()',
    'rexml::validation::ref::new()',
    'rexml::validation::relaxng::new()',
    'rexml::validation::state::new()',
    'rexml::validation::validationexception::new()',
    'rexml::xmldecl::new()',
    'rexml::xpathparser::new()',
    'rss::atom::entry::new()',
    'rss::atom::feed::new()',
    'rss::baseparser::new()',
    'rss::conversionerror::new()',
    'rss::converter::new()',
    'rss::element::new()',
    'rss::ituneschannelmodel::itunescategory::new()',
    'rss::ituneschannelmodel::itunesimage::new()',
    'rss::ituneschannelmodel::itunesowner::new()',
    'rss::itunesitemmodel::itunesduration::new()',
    'rss::imagefaviconmodel::imagefavicon::new()',
    'rss::imageitemmodel::imageitem::new()',
    'rss::listenermixin::new()',
    'rss::maker::atom::entry::new()',
    'rss::maker::atom::feed::new()',
    'rss::maker::base::new()',
    'rss::maker::itemsbase::new()',
    'rss::maker::rss09::new()',
    'rss::maker::rss091::new()',
    'rss::maker::rss092::new()',
    'rss::maker::rss10::new()',
    'rss::maker::rss20::new()',
    'rss::maker::rssbase::new()',
    'rss::missingattributeerror::new()',
    'rss::missingtagerror::new()',
    'rss::nserror::new()',
    'rss::notavailablevalueerror::new()',
    'rss::notexpectedtagerror::new()',
    'rss::notseterror::new()',
    'rss::notvalidxmlparser::new()',
    'rss::notwellformederror::new()',
    'rss::overlappedprefixerror::new()',
    'rss::parser::new()',
    'rss::rdf::new()',
    'rss::rdf::bag::new()',
    'rss::rdf::channel::new()',
    'rss::rdf::channel::image::new()',
    'rss::rdf::channel::items::new()',
    'rss::rdf::channel::textinput::new()',
    'rss::rdf::image::new()',
    'rss::rdf::item::new()',
    'rss::rdf::li::new()',
    'rss::rdf::seq::new()',
    'rss::rdf::textinput::new()',
    'rss::rootelementmixin::new()',
    'rss::rss::new()',
    'rss::rss::channel::cloud::new()',
    'rss::rss::channel::image::new()',
    'rss::rss::channel::item::category::new()',
    'rss::rss::channel::item::enclosure::new()',
    'rss::rss::channel::item::guid::new()',
    'rss::rss::channel::item::source::new()',
    'rss::rss::channel::skipdays::day::new()',
    'rss::rss::channel::skiphours::hour::new()',
    'rss::rss::channel::textinput::new()',
    'rss::taxonomytopicmodel::taxonomytopic::new()',
    'rss::taxonomytopicsmodel::taxonomytopics::new()',
    'rss::toomuchtagerror::new()',
    'rss::unknownconversionmethoderror::new()',
    'rss::unknowntagerror::new()',
    'rss::unsupportedmakerversionerror::new()',
    'rss::xml::element::new()',
    'rss::xmlparsernotfound::new()',
    'rss::xmlstylesheet::new()',
    'rss::xmlstylesheetmixin::new()',
    'raiseerrormatcher::new()',
    'random::new()',
    'range::new()',
    'rangespecs::custom::new()',
    'rangespecs::tenfoldsucc::new()',
    'rationalspecs::subnumeric::new()',
    'ray::new()',
    'rbinstall::unpackedinstaller::new()',
    'redblacktree::new()',
    'redblacktree::nilnode::new()',
    'regexp::new()',
    'regexpspecssubclass::new()',
    'resolv::new()',
    'resolv::dns::new()',
    'resolv::dns::resource::domainname::new()',
    'resolv::dns::resource::generic::new()',
    'resolv::dns::resource::hinfo::new()',
    'resolv::dns::resource::in::a::new()',
    'resolv::dns::resource::in::aaaa::new()',
    'resolv::dns::resource::in::srv::new()',
    'resolv::dns::resource::in::wks::new()',
    'resolv::dns::resource::loc::new()',
    'resolv::dns::resource::minfo::new()',
    'resolv::dns::resource::mx::new()',
    'resolv::dns::resource::soa::new()',
    'resolv::dns::resource::txt::new()',
    'resolv::hosts::new()',
    'resolv::loc::alt::new()',
    'resolv::loc::coord::new()',
    'resolv::loc::size::new()',
    'resolv::mdns::new()',
    'respondtomatcher::new()',
    'rinda::drbobjecttemplate::new()',
    'rinda::notifytemplateentry::new()',
    'rinda::ringfinger::new()',
    'rinda::ringprovider::new()',
    'rinda::ringserver::new()',
    'rinda::simplerenewer::new()',
    'rinda::tuple::new()',
    'rinda::tuplebag::tuplebin::new()',
    'rinda::tupleentry::new()',
    'rinda::tuplespace::new()',
    'rinda::tuplespaceproxy::new()',
    'rinda::waittemplateentry::new()',
    'ring::new()',
    'ringecho::new()',
    'ripper::filter::new()',
    'rotation::new()',
    'rubyimplementation::new()',
    'rubyvm::instruction::new()',
    'rubyvm::instructionsequence::new()',
    'rubyvm::instructionsequence::basicstorage::new()',
    'rubyvm::instructionsequence::dbmstorage::new()',
    'rubyvm::instructionsequence::fsstorage::new()',
    'rubyvm::instructionsloader::new()',
    'rubyvm::sourcecodegenerator::new()',
    's::new()',
    'sdbm::new()',
    'sockssocket::new()',
    'scene::new()',
    'seq::new()',
    'set::new()',
    'shell::new()',
    'shell::appendfile::new()',
    'shell::appendio::new()',
    'shell::cat::new()',
    'shell::commandprocessor::new()',
    'shell::concat::new()',
    'shell::echo::new()',
    'shell::filter::new()',
    'shell::glob::new()',
    'shell::processcontroller::new()',
    'shell::systemcommand::new()',
    'shell::tee::new()',
    'shell::void::new()',
    'shouldspecsmonitor::new()',
    'signalexception::new()',
    'signedzeromatcher::new()',
    'simpletuplespace::new()',
    'sizedqueue::new()',
    'socket::new()',
    'socket::ancillarydata::new()',
    'socket::option::new()',
    'socket::udpsource::new()',
    'socketspecs::spectcpserver::new()',
    'specevaluate::new()',
    'specguard::new()',
    'specnegativeoperatormatcher::new()',
    'specpositiveoperatormatcher::new()',
    'spectag::new()',
    'specversion::new()',
    'sphere::new()',
    'spinnerformatter::new()',
    'string::new()',
    'stringio::new()',
    'stringscanner::new()',
    'stringspecs::initializestring::new()',
    'stringspecs::stringwithraisingconstructor::new()',
    'stringspecs::substring::new()',
    'struct::new()',
    'structclasses::honda::new()',
    'structclasses::subclassx::new()',
    'subtracter::new()',
    'super::alias2::new()',
    'sync_m::new()',
    'syntaxerror::new()',
    'syslog::logger::new()',
    'systemcallerror::new()',
    'systemexit::new()',
    'tcpserver::new()',
    'tcpsocket::new()',
    'tagaction::new()',
    'tagfilter::new()',
    'taglistaction::new()',
    'tagpurgeaction::new()',
    'tally::new()',
    'tallyaction::new()',
    'tempio::new()',
    'tempfile::new()',
    'thread::new()',
    'threadspecs::status::new()',
    'threadspecs::subthread::new()',
    'threadswait::new()',
    'tick::new()',
    'time::new()',
    'toggle::new()',
    'tracepoint::new()',
    'tracepointspec::c::new()',
    'transformation::new()',
    'tuplespace::new()',
    'tuplespace::template::new()',
    'udpsocket::new()',
    'unixserver::new()',
    'unixsocket::new()',
    'uri::ftp::new()',
    'uri::generic::new()',
    'uri::ldap::new()',
    'uri::mailto::new()',
    'uri::rfc2396_parser::new()',
    'uncaughtthrowerror::new()',
    'unifdef::new()',
    'usercustomconstructorstring::new()',
    'userdefined::new()',
    'userdefinedwithivar::new()',
    'userhashinitparams::new()',
    'usermarshal::new()',
    'usermarshalwithivar::new()',
    'vcs::new()',
    'vcs::git::new()',
    'vpath::new()',
    'variablematcher::new()',
    'variablesspecs::arraylike::new()',
    'variablesspecs::parasgn::new()',
    'vec::new()',
    'vector::new()',
    'versionguard::new()',
    'webrick::basiclog::new()',
    'webrick::cgi::new()',
    'webrick::cookie::new()',
    'webrick::genericserver::new()',
    'webrick::httpauth::basicauth::new()',
    'webrick::httpauth::digestauth::new()',
    'webrick::httpauth::htdigest::new()',
    'webrick::httpauth::htgroup::new()',
    'webrick::httpauth::htpasswd::new()',
    'webrick::httpproxyserver::new()',
    'webrick::httprequest::new()',
    'webrick::httpresponse::new()',
    'webrick::httpserver::new()',
    'webrick::httpservlet::abstractservlet::new()',
    'webrick::httpservlet::cgihandler::new()',
    'webrick::httpservlet::defaultfilehandler::new()',
    'webrick::httpservlet::erbhandler::new()',
    'webrick::httpservlet::filehandler::new()',
    'webrick::httputils::formdata::new()',
    'webrick::httpversion::new()',
    'webrick::log::new()',
    'webrick::snirequest::new()',
    'webrick::utils::timeouthandler::new()',
    'win32comgen::new()',
    'win32ole::new()',
    'win32ole_event::new()',
    'win32ole_method::new()',
    'win32ole_param::new()',
    'win32ole_record::new()',
    'win32ole_type::new()',
    'win32ole_typelib::new()',
    'win32ole_variant::new()',
    'weakref::new()',
    'win32::registry::new()',
    'win32::registry::error::new()',
    'win32::registry::predefinedkey::new()',
    'win32::sspi::identity::new()',
    'win32::sspi::negotiateauth::new()',
    'win32::sspi::sspiresult::new()',
    'win32::sspi::securitybuffer::new()',
    'win32api::new()',
    'xmp::new()',
    'xmp::stringinputmethod::new()',
    'yaml::store::new()',
    'yamlformatter::new()',
    'zero::new()',
    'zlib::deflate::new()',
    'zlib::gzipreader::new()',
    'zlib::gzipwriter::new()',
    'zlib::inflate::new()',
    'irb::methodextender#new_alias_name()',
    'rdoc::parser::ruby#new_comment()',
    'capiclassspecs::cvars#new_cv()',
    'capiclassspecs::cvars#new_cvar()',
    'gem::testcase#new_default_spec()',
    'basicobjectspecs::singletonmethod::new_method_on_self()',
    'basicobjectspecs::singletonmethod::new_method_on_singleton()',
    'basicobjectspecs::singletonmethod::new_method_on_singleton_with_alias_method()',
    'basicobjectspecs::singletonmethod::new_method_on_singleton_with_syntax_alias()',
    'ipaddr::new_ntoh()',
    'win32olespecs::new_ole()',
    'procspecs::new_proc_from_amp()',
    'procspecs::new_proc_in_method()',
    'procspecs::new_proc_subclass_in_method()',
    'random::new_seed()',
    'drb::drbobject::new_with()',
    'drb::drbobject::new_with_uri()',
    'rss::utils#new_with_value_if_need()',
    'net::http::newobj()',
    'prime::eratosthenesgenerator#next()',
    'prime::generator23#next()',
    'prime::pseudoprimegenerator#next()',
    'prime::trialdivisiongenerator#next()',
    'rexml::validation::choice#next()',
    'rexml::validation::interleave#next()',
    'rexml::validation::oneormore#next()',
    'rexml::validation::optional#next()',
    'rexml::validation::state#next()',
    'rexml::validation::zeroormore#next()',
    'gem::resolver::requirementlist#next5()',
    'rexml::validation::interleave#next_current()',
    'rexml::element#next_element()',
    'logger::period#next_rotate_time()',
    'rexml::child#next_sibling=()',
    'rexml::node#next_sibling_node()',
    'gem::requestset::lockfile::tokenizer#next_token()',
    'rdoc::rd::inlineparser#next_token()',
    'racc::parser#next_token()',
    'openssl::ocsp::singleresponse#next_update()',
    'openssl::x509::crl#next_update()',
    'openssl::x509::crl#next_update=()',
    'rdoc::rd::inlineparser#next_words_on_error()',
    'kernelspecs::methods#ni()',
    'redblacktree::nilnode#nil?()',
    'nkf::nkf()',
    'file::stat#nlink()',
    'net::ftp#nlst()',
    'netftpspecs::dummyftp#nlst()',
    'exports::cygwin::nm()',
    'gem::testcase#nmake_found?()',
    'definedspecs::super#no_super_method_args()',
    'definedspecs::super#no_super_method_block_args()',
    'definedspecs::super#no_super_method_block_no_args()',
    'definedspecs::super#no_super_method_no_args()',
    'definedspecs::basic#no_yield_block()',
    'definedspecs::basic#no_yield_block_parameter()',
    'rexml::attlistdecl#node_type()',
    'rexml::attribute#node_type()',
    'rexml::comment#node_type()',
    'rexml::doctype#node_type()',
    'rexml::document#node_type()',
    'rexml::element#node_type()',
    'rexml::instruction#node_type()',
    'rexml::light::node#node_type()',
    'rexml::text#node_type()',
    'rexml::xmldecl#node_type()',
    'rdoc::stats::verbose#nodoc()',
    'gem::mockgemui::tty#noecho()',
    'rdoc::classmodule#non_aliases()',
    'languagespecs::non_alphanum_non_space()',
    'gem::specification::non_nil_attributes()',
    'languagespecs::non_paired_delimiters()',
    'gem::requirement#none?()',
    'dirspecs::nonexistent()',
    'net::ftp#noop()',
    'net::imap#noop()',
    'netftpspecs::dummyftp#noop()',
    'kernelspecs::methods::metaclassmethods#nopeeking()',
    'filespecs::normal_file()',
    'gem::specification#normalize()',
    'gem::uriformatter#normalize()',
    'rdoc::comment#normalize()',
    'rdoc::markup::verbatim#normalize()',
    'rexml::parsers::baseparser#normalize()',
    'rss::maker::itemsbase#normalize()',
    'uri::generic#normalize()',
    'uri::generic#normalize!()',
    'rdoc::text#normalize_comment()',
    'webrick::httputils::normalize_path()',
    'rexml::functions::normalize_space()',
    'gem::specification::normalize_yaml_input()',
    'rexml::entity#normalized()',
    'rdoc::rdoc#normalized_file_list()',
    'rexml::functions::not()',
    'openssl::x509::certificate#not_after()',
    'openssl::x509::certificate#not_after=()',
    'openssl::x509::certificate#not_before()',
    'openssl::x509::certificate#not_before=()',
    'rdoc::servlet#not_found()',
    'rss::maker::atom::entry::channel::generator::not_set_name()',
    'rss::maker::atom::feed::channel::categories::category::not_set_name()',
    'rss::maker::atom::feed::channel::generator::not_set_name()',
    'rss::maker::atom::feed::channel::links::link::not_set_name()',
    'rss::maker::atom::feed::items::item::categories::category::not_set_name()',
    'rss::maker::atom::feed::items::item::links::link::not_set_name()',
    'rss::maker::atom::feed::items::item::source::categories::category::not_set_name()',
    'rss::maker::atom::feed::items::item::source::generator::not_set_name()',
    'rss::maker::atom::feed::items::item::source::links::link::not_set_name()',
    'rss::maker::atom::feed::items::item::source::logo::not_set_name()',
    'rexml::doctype#notation()',
    'rexml::sax2listener#notationdecl()',
    'rexml::streamlistener#notationdecl()',
    'rexml::parsers::pullevent#notationdecl?()',
    'rexml::doctype#notations()',
    'breakspecs::driver#note()',
    'rdoc::markdown#note()',
    'rdoc::markdown#note_for()',
    'breakspecs::lambda#note_invoke_yield()',
    'rdoc::markdown#notes()',
    'rinda::notifytemplateentry#notify()',
    'rinda::tuplespace#notify()',
    'rinda::tuplespaceproxy#notify()',
    'shell::notify()',
    'shell::commandprocessor#notify()',
    'shell::systemcommand#notify()',
    'irb::notifier::abstractnotifier#notify?()',
    'irb::notifier::levelednotifier#notify?()',
    'irb::notifier::nomsgnotifier#notify?()',
    'drb::drbobservable#notify_observers()',
    'datetime::now()',
    'time::now()',
    'rexml::xmldecl#nowrite()',
    'openssl::ssl::sslsocket#npn_protocol()',
    'etc::nprocessors()',
    'reflectspecs::n::ns_pro()',
    'reflectspecs::n::ns_pub()',
    'ipaddr::ntop()',
    'gem::nametuple::null()',
    'fiddle::pointer#null?()',
    'openssl::bn#num_bits()',
    'openssl::bn#num_bytes()',
    'rexml::functions::number()',
    'reflectspecs::o()',
    'pp::ppmethods#object_address_group()',
    'rdoc::toplevel#object_class()',
    'pp::ppmethods#object_group()',
    'objectspace::object_id_of()',
    'json::ext::generator::state#object_nl()',
    'json::ext::generator::state#object_nl=()',
    'mock::objects()',
    'openssl::bn#odd?()',
    'reflectspecs::oe()',
    'reflectspecs::oed()',
    'reflectspecs::oee()',
    'reflectspecs::oei()',
    'rubyvm::instructionsequence::of()',
    'tracer::off()',
    'rdoc::markup::formatter#off_tags()',
    'rdoc::markup::tohtmlsnippet#off_tags()',
    'openssl::asn1::objectid#oid()',
    'openssl::x509::attribute#oid()',
    'openssl::x509::extension#oid()',
    'openssl::x509::attribute#oid=()',
    'openssl::x509::extension#oid=()',
    'gem::dependencylist#ok?()',
    'win32::sspi::sspiresult#ok?()',
    'gem::dependencylist#ok_to_remove?()',
    'rexml::xmldecl#old_enc=()',
    'win32ole_type::ole_classes()',
    'win32ole::ole_free()',
    'win32ole::ole_reference_count()',
    'win32ole::ole_show_help()',
    'tracer::on()',
    'rdoc::ripperstatelex::innerstatelex#on_char()',
    'rss::xmlscanlistener#on_attr_charref()',
    'rss::xmlscanlistener#on_attr_charref_hex()',
    'rss::xmlscanlistener#on_attr_entityref()',
    'rss::xmlscanlistener#on_attr_value()',
    'rss::xmlscanlistener#on_attribute()',
    'rdoc::ripperstatelex::innerstatelex#on_backref()',
    'rss::xmlscanlistener#on_charref()',
    'rss::xmlscanlistener#on_charref_hex()',
    'rdoc::ripperstatelex::innerstatelex#on_comma()',
    'rdoc::ripperstatelex::innerstatelex#on_comment()',
    'rdoc::ripperstatelex::innerstatelex#on_const()',
    'openssl::pkey::ec::point#on_curve?()',
    'rdoc::ripperstatelex::innerstatelex#on_cvar()',
    'rdoc::ripperstatelex::innerstatelex#on_default()',
    'rss::xmlscanlistener#on_entityref()',
    'rdoc::rd::blockparser#on_error()',
    'rdoc::rd::inlineparser#on_error()',
    'racc::parser#on_error()',
    'rss::xmlscanlistener#on_etag()',
    'rdoc::ripperstatelex::innerstatelex#on_float()',
    'rdoc::ripperstatelex::innerstatelex#on_gvar()',
    'rdoc::ripperstatelex::innerstatelex#on_heredoc_end()',
    'rdoc::ripperstatelex::innerstatelex#on_ident()',
    'rdoc::ripperstatelex::innerstatelex#on_ignored_nl()',
    'rdoc::ripperstatelex::innerstatelex#on_ignored_sp()',
    'rdoc::ripperstatelex::innerstatelex#on_imaginary()',
    'rdoc::ripperstatelex::innerstatelex#on_int()',
    'rdoc::ripperstatelex::innerstatelex#on_ivar()',
    'rdoc::ripperstatelex::innerstatelex#on_kw()',
    'rdoc::ripperstatelex::innerstatelex#on_lbrace()',
    'rdoc::ripperstatelex::innerstatelex#on_lbracket()',
    'rdoc::ripperstatelex::innerstatelex#on_lparen()',
    'rdoc::ripperstatelex::innerstatelex#on_nl()',
    'rdoc::ripperstatelex::innerstatelex#on_op()',
    'rdoc::ripperstatelex::innerstatelex#on_period()',
    'rdoc::ripperstatelex::innerstatelex#on_rational()',
    'rdoc::ripperstatelex::innerstatelex#on_rbrace()',
    'rdoc::ripperstatelex::innerstatelex#on_rbracket()',
    'rdoc::ripperstatelex::innerstatelex#on_rparen()',
    'rdoc::ripperstatelex::innerstatelex#on_sp()',
    'rss::xmlscanlistener#on_stag()',
    'rss::xmlscanlistener#on_stag_end()',
    'rss::xmlscanlistener#on_stag_end_empty()',
    'rdoc::ripperstatelex::innerstatelex#on_symbeg()',
    'rdoc::markup::formatter#on_tags()',
    'rdoc::markup::tohtmlsnippet#on_tags()',
    'rdoc::ripperstatelex::innerstatelex#on_tstring_beg()',
    'rdoc::ripperstatelex::innerstatelex#on_tstring_end()',
    'rss::xmlscanlistener#on_xmldecl_encoding()',
    'rss::xmlscanlistener#on_xmldecl_end()',
    'rss::xmlscanlistener#on_xmldecl_standalone()',
    'rss::xmlscanlistener#on_xmldecl_version()',
    'unboundmethodspecs::methods#one()',
    'openssl::bn#one?()',
    'methodspecs::methods#one_key()',
    'methodspecs::methods#one_keyreq()',
    'methodspecs::methods#one_keyrest()',
    'methodspecs::methods#one_opt()',
    'methodspecs::methods#one_opt_with_block()',
    'methodspecs::methods#one_opt_with_stabby()',
    'methodspecs::methods#one_req()',
    'methodspecs::methods#one_req_one_opt()',
    'methodspecs::methods#one_req_one_opt_with_block()',
    'methodspecs::methods#one_req_one_opt_with_splat()',
    'methodspecs::methods#one_req_one_opt_with_splat_and_block()',
    'methodspecs::methods#one_req_two_opt()',
    'methodspecs::methods#one_req_two_opt_with_block()',
    'methodspecs::methods#one_req_two_opt_with_splat()',
    'methodspecs::methods#one_req_two_opt_with_splat_and_block()',
    'methodspecs::methods#one_req_with_block()',
    'methodspecs::methods#one_req_with_splat()',
    'methodspecs::methods#one_req_with_splat_and_block()',
    'methodspecs::methods#one_splat_one_block()',
    'methodspecs::methods#one_splat_one_req()',
    'methodspecs::methods#one_splat_one_req_with_block()',
    'methodspecs::methods#one_splat_two_req()',
    'methodspecs::methods#one_unnamed_splat()',
    'rdoc::context#ongoing_visibility=()',
    'uri::generic#opaque=()',
    'csv::open()',
    'dbm::open()',
    'drb::drbprotocol::open()',
    'drb::drbsslsocket::open()',
    'drb::http0::open()',
    'dir::open()',
    'file::open()',
    'gdbm::open()',
    'io::open()',
    'kernel::open()',
    'net::ftp::open()',
    'openuri::openread#open()',
    'pty::open()',
    'resolv::dns::open()',
    'sdbm::open()',
    'shell::commandprocessor#open()',
    'stringio::open()',
    'syslog::open()',
    'tempfile::open()',
    'win32::registry::open()',
    'win32::registry#open()',
    'zlib::gzipreader::open()',
    'zlib::gzipwriter::open()',
    'syslog::open!()',
    'win32::registry#open?()',
    'gem::commands::opencommand#open_editor()',
    'gem::commands::opencommand#open_gem()',
    'net::smtp#open_message_stream()',
    'drb::drbprotocol::open_server()',
    'drb::drbsslsocket::open_server()',
    'drb::http0::open_server()',
    'gem::fakefetcher#open_uri_or_path()',
    'syslog::opened?()',
    'bug::scanargs::opt()',
    'bug::scanargs::opt_hash()',
    'bug::scanargs::opt_trail()',
    'bug::scanargs::opt_trail_hash()',
    'bug::scanargs::opt_var()',
    'bug::scanargs::opt_var_hash()',
    'bug::scanargs::opt_var_trail()',
    'bug::scanargs::opt_var_trail_hash()',
    'rdoc::task#option_list()',
    'net::http#options()',
    'openssl::ssl::sslcontext#options()',
    'optionparser::arguable#options()',
    'rdoc::codeobject#options()',
    'syslog::options()',
    'openssl::ssl::sslcontext#options=()',
    'optionparser::arguable#options=()',
    'socket::option#optname()',
    'openssl::pkey::ec::group#order()',
    'optionparser::arguable#order!()',
    'date::ordinal()',
    'datetime::ordinal()',
    'openssl::x509::store#orig_add_file()',
    'file::orig_directory?()',
    'rdoc::markdown#orig_initialize()',
    'zlib::gzipfile#orig_name()',
    'zlib::gzipwriter#orig_name=()',
    'methodspecs::sourcelocation#original()',
    'unboundmethodspecs::sourcelocation#original()',
    'unboundmethodspecs::methods#original_body()',
    'reflectspecs::os()',
    'platformguard::os?()',
    'zlib::gzipfile#os_code()',
    'rss::maker::base::other_elements()',
    'gem::resolver::activationrequest#others_possible?()',
    'shell::commandprocessor#out()',
    'rss::atom::feed::entry::content#out_of_line?()',
    'rss::maker::itemsbase::itembase::contentbase#out_of_line?()',
    'gem::specification::outdated()',
    'gem::specification::outdated_and_latest_version()',
    'kernelspecs::lambda#outer()',
    'returnspecs::definemethod#outer()',
    'returnspecs::savedinnerblock#outer()',
    'returnspecs::throughdefinemethod#outer()',
    'exports::output()',
    'gem::mockgemui#output()',
    'gem::resolver#output()',
    'gem::resolver::molinillo::ui#output()',
    'object::output=()',
    'readline::output=()',
    'rss::rootelementmixin#output_encoding=()',
    'rdoc::rdoc#output_flag_file()',
    'rdoc::methodattr#output_name()',
    'rubyvm::sourcecodegenerator#output_path()',
    'methodspecs::a#overridden()',
    'methodspecs::b#overridden()',
    'methodspecs::betweenbandc#overridden()',
    'methodspecs::c#overridden()',
    'methodspecs::overrideagain#overridden()',
    'unboundmethodspecs::a#overridden()',
    'unboundmethodspecs::b#overridden()',
    'unboundmethodspecs::c#overridden()',
    'classspecs::g#override()',
    'file::owned?()',
    'file::stat#owned?()',
    'matrix::lupdecomposition#p()',
    'socket::pack_sockaddr_in()',
    'socket::pack_sockaddr_un()',
    'win32::registry::api#packdw()',
    'win32::registry::api#packhandle()',
    'win32::registry::api#packqw()',
    'openssl::cipher#padding=()',
    'rdoc::ri::driver#page()',
    'rdoc::store#page()',
    'rdoc::store#page_file()',
    'rdoc::toplevel#page_name()',
    'rdoc::ri::driver#paging?()',
    'socket::pair()',
    'unixsocket::pair()',
    'languagespecs::paired_delimiters()',
    'rdoc::testcase#para()',
    'rdoc::markdown#paragraph()',
    'rdoc::rd::blockparser#paragraph()',
    'iospecs::paragraphs()',
    'rdoc::anymethod#param_list()',
    'rdoc::anymethod#param_seq()',
    'openssl::pkey::dh#params()',
    'openssl::pkey::dsa#params()',
    'openssl::pkey::rsa#params()',
    'zlib::deflate#params()',
    'cgi::queryextension#params=()',
    'openssl::pkey::dh#params_ok?()',
    'gem::indexer#paranoid()',
    'gem::resolver::activationrequest#parent()',
    'rdoc::codeobject#parent()',
    'rexml::light::node#parent()',
    'rexml::child#parent=()',
    'rexml::light::node#parent=()',
    'rexml::text#parent=()',
    'rexml::node#parent?()',
    'rexml::parent#parent?()',
    'kernelspecs::parent::parent_class_method()',
    'definedspecs::child::parent_constant_defined()',
    'rdoc::codeobject#parent_file_name()',
    'kernelspecs::parent#parent_method()',
    'modulespecs::parent#parent_method()',
    'kernelspecs::parentmixin#parent_mixin_method()',
    'rdoc::codeobject#parent_name()',
    'rdoc::methodattr#parent_name()',
    'actionmap::parse()',
    'cgi::parse()',
    'cgi::cookie::parse()',
    'csv::parse()',
    'date::parse()',
    'datetime::parse()',
    'gem::requestset::lockfile::parser#parse()',
    'gem::requirement::parse()',
    'json::ext::parser#parse()',
    'net::smtp::response::parse()',
    'openssl::config::parse()',
    'openssl::x509::name::parse()',
    'optionparser::switch::noargument#parse()',
    'optionparser::switch::optionalargument#parse()',
    'optionparser::switch::placedargument#parse()',
    'optionparser::switch::requiredargument#parse()',
    'psych::parse()',
    'psych::parser#parse()',
    'rdoc::classmodule#parse()',
    'rdoc::comment#parse()',
    'rdoc::context::section#parse()',
    'rdoc::markdown::parse()',
    'rdoc::markdown#parse()',
    'rdoc::markup::parse()',
    'rdoc::markup::parser::parse()',
    'rdoc::markup::parser#parse()',
    'rdoc::options#parse()',
    'rdoc::rd::parse()',
    'rdoc::rd::blockparser#parse()',
    'rdoc::rd::inlineparser#parse()',
    'rdoc::ripperstatelex::parse()',
    'rdoc::text#parse()',
    'rdoc::tomdoc::parse()',
    'rexml::dtd::parser::parse()',
    'rexml::parsers::lightparser#parse()',
    'rexml::parsers::sax2parser#parse()',
    'rexml::parsers::streamparser#parse()',
    'rexml::parsers::treeparser#parse()',
    'rexml::parsers::ultralightparser#parse()',
    'rexml::parsers::xpathparser#parse()',
    'rexml::xpathparser#parse()',
    'rss::baseparser#parse()',
    'rss::itunesitemmodel::itunesduration::parse()',
    'rss::parser::parse()',
    'rss::utils::csv#parse()',
    'rss::utils::explicitcleanother#parse()',
    'rss::utils::yesother#parse()',
    'ripper::parse()',
    'ripper::filter#parse()',
    'time::parse()',
    'uri::parse()',
    'uri::rfc2396_parser#parse()',
    'webrick::cookie::parse()',
    'webrick::httprequest#parse()',
    'optionparser::arguable#parse!()',
    'rdoc::parser::ruby#parse_alias()',
    'rexml::quickpath::parse_args()',
    'rdoc::parser::ruby#parse_attr()',
    'rdoc::parser::ruby#parse_attr_accessor()',
    'rdoc::parser::ruby#parse_call_parameters()',
    'rdoc::parser::ruby#parse_class()',
    'rdoc::parser::ruby#parse_comment()',
    'rdoc::parser::ruby#parse_comment_tomdoc()',
    'openssl::config::parse_config()',
    'rdoc::parser::ruby#parse_constant()',
    'rdoc::parser::ruby#parse_constant_visibility()',
    'fiddle::cparser#parse_ctype()',
    'rdoc::rdoc#parse_dot_doc_file()',
    'rdoc::parser::changelog#parse_entries()',
    'psych::parse_file()',
    'rdoc::rdoc#parse_file()',
    'rdoc::rdoc#parse_files()',
    'rdoc::parser::parse_files_matching()',
    'webrick::httputils::parse_form_data()',
    'webrick::httputils::parse_header()',
    'rexml::dtd::parser::parse_helper()',
    'psych::scalarscanner#parse_int()',
    'csv::parse_line()',
    'gem::testcase#parse_make_command_line()',
    'rdoc::parser::ruby#parse_meta_attr()',
    'rdoc::parser::ruby#parse_meta_method()',
    'rdoc::parser::ruby#parse_method()',
    'rdoc::parser::ruby#parse_method_dummy()',
    'rdoc::parser::ruby#parse_method_or_yield_parameters()',
    'rdoc::parser::ruby#parse_method_parameters()',
    'rdoc::parser::ruby#parse_method_params_and_body()',
    'rdoc::parser::ruby#parse_module()',
    'rdoc::ri::driver#parse_name()',
    'openssl::x509::name::parse_openssl()',
    'irb::outputmethod#parse_printf_format()',
    'webrick::httputils::parse_query()',
    'webrick::httputils::parse_qvalues()',
    'webrick::httputils::parse_range_header()',
    'rdoc::parser::ruby#parse_require()',
    'rdoc::parser::ruby#parse_rescue()',
    'openssl::x509::name::parse_rfc2253()',
    'webrick::cookie::parse_set_cookie()',
    'webrick::cookie::parse_set_cookies()',
    'fiddle::cparser#parse_signature()',
    'rexml::dtd::entitydecl::parse_source()',
    'rexml::dtd::notationdecl::parse_source()',
    'rdoc::parser::ruby#parse_statements()',
    'psych::parse_stream()',
    'rexml::document::parse_stream()',
    'fiddle::cparser#parse_struct_signature()',
    'rdoc::parser::ruby#parse_symbol_arg()',
    'rdoc::parser::ruby#parse_symbol_in_arg()',
    'psych::scalarscanner#parse_time()',
    'actionmap::parse_to_rects()',
    'rdoc::parser::ruby#parse_top_level_statements()',
    'rdoc::markup::formatter#parse_url()',
    'rdoc::parser::ruby#parse_visibility()',
    'rdoc::parser::ruby#parse_yield()',
    'rdoc::markup::tohtml#parseable?()',
    'psych::parser()',
    'uri::generic#parser()',
    'netftpspecs::dummyftp#pass()',
    'thread::pass()',
    'progress::rotator#passed_string()',
    'etc::passwd()',
    'uri::generic#password()',
    'uri::generic#password=()',
    'cgi::htmlextension#password_field()',
    'net::http#patch()',
    'file::path()',
    'gem::path()',
    'rdoc::classmodule#path()',
    'rdoc::constant#path()',
    'rdoc::methodattr#path()',
    'rdoc::ri::paths::path()',
    'rdoc::toplevel#path()',
    'rubyvm::instructionsequence#path()',
    'thread::backtrace::location#path()',
    'uri::ftp#path()',
    'uri::generic#path=()',
    'gem::uninstaller#path_ok?()',
    'gem::path_separator()',
    'gem::resolver::molinillo::dependencygraph::vertex#path_to?()',
    'gem::paths()',
    'gem::paths=()',
    'optionparser::switch::pattern()',
    'optionparser::switch::noargument::pattern()',
    'openssl::kdf::pbkdf2_hmac()',
    'openssl::pkcs5#pbkdf2_hmac()',
    'openssl::pkcs5#pbkdf2_hmac_sha1()',
    'gem::requestset::lockfile::tokenizer#peek()',
    'rexml::parsers::baseparser#peek()',
    'rexml::parsers::pullparser#peek()',
    'rdoc::parser::rubytools#peek_read()',
    'coverage::peek_result()',
    'rdoc::parser::rubytools#peek_tk()',
    'rdoc::markup::parser#peek_token()',
    'kernelspecs::methods::metaclassmethods#peekaboo()',
    'net::http#peer_cert()',
    'openssl::ssl::sslsocket#peer_cert()',
    'openssl::ssl::sslsocket#peer_cert_chain()',
    'openssl::ssl::socketforwarder#peeraddr()',
    'rdoc::markdown#peg_parse()',
    'gem::commands::setupcommand#pem_files_in()',
    'openssl::ssl::sslsocket#pending()',
    'thread::pending_interrupt?()',
    'rdoc::stats#percent_doc()',
    'rss::maker::itemsbase::itembase::guidbase#permanent_link=()',
    'rss::maker::itemsbase::itembase::guidbase#permanent_link?()',
    'optionparser::arguable#permute!()',
    'gem::availableset#pick_best!()',
    'process::pid()',
    'process::status#pid()',
    'process::waiter#pid()',
    'processspecs::daemon#pid()',
    'bug::symbol::pinneddown?()',
    'io::pipe()',
    'file::pipe?()',
    'file::stat#pipe?()',
    'iospecs::pipe_fixture()',
    'open3::pipeline()',
    'open3::pipeline_r()',
    'open3::pipeline_rw()',
    'open3::pipeline_start()',
    'open3::pipeline_w()',
    'openssl::cipher#pkcs5_keyivgen()',
    'rdoc::context::section#plain_html()',
    'gem::basicspecification#platform()',
    'gem::requestset::gemdependencyapi#platform()',
    'gem::resolver::specspecification#platform()',
    'gem::specification#platform()',
    'gem::specification#platform=()',
    'gem::platform_defaults()',
    'gem::platforms()',
    'gem::requestset::gemdependencyapi#platforms()',
    'gem::platforms=()',
    'rss::element::plural_forms()',
    'readline::point()',
    'readline::point=()',
    'openssl::pkey::ec::group#point_conversion_form()',
    'openssl::pkey::ec::group#point_conversion_form=()',
    'complex::polar()',
    'net::popmail#pop()',
    'rinda::notifytemplateentry#pop()',
    'gem::resolver::molinillo::dependencygraph::log#pop!()',
    'pp::ppmethods#pop_inspect_key()',
    'gem::resolver::molinillo::dependencystate#pop_possibility_state()',
    'rdoc::tokenstream#pop_token()',
    'irb::context#pop_workspace()',
    'gem::util::popen()',
    'io::popen()',
    'open3::popen2()',
    'open3::popen2e()',
    'open3::popen3()',
    'cgi::htmlextension#popup_menu()',
    'net::pop3#port()',
    'netftpspecs::dummyftp#port()',
    'nethttpspecs::port()',
    'webrick::httprequest#port()',
    'uri::generic#port=()',
    'gem::package::tarreader::entry#pos()',
    'zlib::gzipreader#pos()',
    'zlib::gzipwriter#pos()',
    'rexml::functions::position()',
    'rexml::iosource#position()',
    'rexml::parseexception#position()',
    'rexml::parsers::baseparser#position()',
    'rexml::source#position()',
    'gem::resolver::molinillo::delegates::resolutionstate#possibilities()',
    'drb::http0::clientside#post()',
    'net::http::post()',
    'net::http#post()',
    'net::http#post2()',
    'gem::post_build()',
    'openssl::ssl::sslsocket#post_connection_check()',
    'net::http::post_form()',
    'gem::post_install()',
    'rdoc::markup::preprocess::post_process()',
    'rdoc::markup::preprocess::post_processors()',
    'gem::post_reset()',
    'gem::post_uninstall()',
    'bug::postponed_job_call_direct()',
    'bug::postponed_job_register()',
    'bug::postponed_job_register_one()',
    'irb::notifier::abstractnotifier#pp()',
    'irb::outputmethod#pp()',
    'kernel::pp()',
    'pp::pp()',
    'pp::ppmethods#pp()',
    'pp::ppmethods#pp_hash()',
    'pp::ppmethods#pp_object()',
    'process::ppid()',
    'irb::notifier::abstractnotifier#ppx()',
    'irb::outputmethod#ppx()',
    'readline::pre_input_hook()',
    'readline::pre_input_hook=()',
    'gem::pre_install()',
    'gem::installer#pre_install_checks()',
    'gem::pre_reset()',
    'gem::pre_uninstall()',
    'io::pread()',
    'gem::resolver::molinillo::dependencygraph::vertex#predecessors()',
    'rexml::parsers::xpathparser#predicate()',
    'rexml::quickpath::predicate()',
    'rexml::xpathparser#predicate()',
    'rexml::parsers::xpathparser#predicate_to_string()',
    'gem::availableset#prefetch()',
    'gem::resolver::apiset#prefetch()',
    'gem::resolver::composedset#prefetch()',
    'gem::resolver::gitset#prefetch()',
    'gem::resolver::installerset#prefetch()',
    'gem::resolver::set#prefetch()',
    'gem::prefix()',
    'rexml::attribute#prefix()',
    'rexml::light::node#prefix()',
    'rexml::attributes#prefixes()',
    'rexml::element#prefixes()',
    'gem::list#prepend()',
    'gem::list::prepend()',
    'optionparser::list#prepend()',
    'object::prepend_features()',
    'object::prepended()',
    'gem::resolver::composedset#prerelease=()',
    'gem::resolver::installerset#prerelease=()',
    'gem::dependency#prerelease?()',
    'gem::nametuple#prerelease?()',
    'gem::requirement#prerelease?()',
    'gem::version#prerelease?()',
    'gem::server#prerelease_specs()',
    'cgi::util#pretty()',
    'rdoc::alias#pretty_name()',
    'rdoc::methodattr#pretty_name()',
    'rdoc::alias#pretty_new_name()',
    'rdoc::alias#pretty_old_name()',
    'openssl::bn#pretty_print()',
    'openssl::x509::certificate#pretty_print()',
    'openssl::x509::name#pretty_print()',
    'rdoc::rd::inlineparser#prev_words_on_error()',
    'rexml::validation::state#previous=()',
    'rexml::element#previous_element()',
    'logger::period#previous_period_end()',
    'rexml::child#previous_sibling=()',
    'rexml::node#previous_sibling_node()',
    'rinda::ringfinger::primary()',
    'openssl::bn#prime?()',
    'openssl::bn#prime_fasttest?()',
    'prime::trialdivision#primes()',
    'prime::trialdivision#primes_so_far()',
    'encoding::converter#primitive_convert()',
    'encoding::converter#primitive_errinfo()',
    'io::generic_writable#print()',
    'irb::locale#print()',
    'irb::notifier::abstractnotifier#print()',
    'irb::outputmethod#print()',
    'irb::stdiooutputmethod#print()',
    'net::writeadapter#print()',
    'nethttpspecs::nullwriter#print()',
    'openssl::buffering#print()',
    'zlib::gzipwriter#print()',
    'rdoc::stats::quiet#print_alias()',
    'rdoc::stats::quiet#print_attribute()',
    'rdoc::stats::quiet#print_class()',
    'rdoc::stats::quiet#print_constant()',
    'rdoc::stats::normal#print_file()',
    'rdoc::stats::quiet#print_file()',
    'openssl::print_mem_leaks()',
    'rdoc::stats::quiet#print_method()',
    'rdoc::stats::quiet#print_module()',
    'casefolding::util#print_table()',
    'casefolding::util#print_table_1()',
    'irb::print_usage()',
    'io::generic_writable#printf()',
    'irb::locale#printf()',
    'irb::notifier::abstractnotifier#printf()',
    'irb::outputmethod#printf()',
    'net::writeadapter#printf()',
    'nethttpspecs::nullwriter#printf()',
    'openssl::buffering#printf()',
    'zlib::gzipwriter#printf()',
    'irb::notifier::abstractnotifier#printn()',
    'irb::outputmethod#printn()',
    'openssl::pkey::dh#private?()',
    'openssl::pkey::dsa#private?()',
    'openssl::pkey::ec#private?()',
    'openssl::pkey::rsa#private?()',
    'constantvisibility::privconstmodulechild#private_constant_from_include()',
    'constantvisibility::privconstclass::nested::private_constant_from_scope()',
    'constantvisibility::privconstmodule::nested::private_constant_from_scope()',
    'constantvisibility::privconstclass::private_constant_from_self()',
    'constantvisibility::privconstmodule::private_constant_from_self()',
    'constantvisibility::privconstclasschild#private_constant_from_subclass()',
    'openssl::pkey::rsa#private_decrypt()',
    'openssl::pkey::rsa#private_encrypt()',
    'openssl::pkey::ec#private_key()',
    'openssl::pkey::ec#private_key=()',
    'openssl::pkey::ec#private_key?()',
    'modulespecs::parent::private_method_1()',
    'modulespecs::parent::private_method_2()',
    'definedspecs::basic#private_method_defined()',
    'modulespecs::parentprivatemethodredef#private_method_redefined()',
    'definedspecs::basic#private_predicate_defined()',
    'reflectspecs::a::pro()',
    'reflectspecs::b::pro()',
    'reflectspecs::c::pro()',
    'reflectspecs::d#pro()',
    'reflectspecs::e#pro()',
    'reflectspecs::m#pro()',
    'procspecs::proc_for_1()',
    'mspec::process()',
    'net::imap::crammd5authenticator#process()',
    'net::imap::digestmd5authenticator#process()',
    'net::imap::loginauthenticator#process()',
    'net::imap::plainauthenticator#process()',
    'gem::commandmanager#process_args()',
    'rdoc::ri::driver::process_args()',
    'gem::testcase::process_based_port()',
    'gem::testcase#process_based_port()',
    'processspecs::daemon#process_group()',
    'rss::rexmllikexmlparser#processinginstruction()',
    'rexml::functions::processing_instruction()',
    'rexml::sax2listener#processing_instruction()',
    'win32ole_type::progids()',
    'rexml::sax2listener#progress()',
    'gem::resolver::molinillo::ui#progress_rate()',
    'gem::streamui#progress_reporter()',
    'irb::context#prompt_mode=()',
    'irb::context#prompting?()',
    'net::http#propfind()',
    'net::http#proppatch()',
    'delegatespecs::simple#prot()',
    'mspec::protect()',
    'modulespecs::countschild#protected_1()',
    'modulespecs::countsparent#protected_2()',
    'modulespecs::countsmixin#protected_3()',
    'modulespecs::child#protected_child()',
    'definedspecs::basic#protected_method()',
    'kernelspecs::a#protected_method()',
    'weakrefspecs::protected_method()',
    'modulespecs::parent::protected_method_1()',
    'modulespecs::basic#protected_module()',
    'modulespecs::aliasing#protected_one()',
    'modulespecs::parent#protected_parent()',
    'hpimmspecs::subclass#protected_sub_method()',
    'modulespecs::super#protected_super_module()',
    'rinda::ringprovider#provide()',
    'net::http#proxy?()',
    'net::http#proxy_address()',
    'win32::sspi::negotiateauth::proxy_auth_get()',
    'net::httpheader#proxy_basic_auth()',
    'webrick::httpauth#proxy_basic_auth()',
    'net::http::proxy_class?()',
    'net::http#proxy_from_env?()',
    'net::http#proxy_pass()',
    'net::http#proxy_port()',
    'gem::request#proxy_uri()',
    'net::http#proxy_user()',
    'net::http#proxyaddr()',
    'net::http#proxyport()',
    'find::prune()',
    'openssl::random::pseudo_bytes()',
    'fiddle::pointer#ptr()',
    'delegatespecs::simple#pub()',
    'reflectspecs::a::pub()',
    'reflectspecs::b::pub()',
    'reflectspecs::c::pub()',
    'reflectspecs::d#pub()',
    'reflectspecs::e#pub()',
    'reflectspecs::m#pub()',
    'rss::maker::channelbase#pubdate()',
    'rss::maker::itemsbase::itembase#pubdate()',
    'rss::maker::channelbase#pubdate=()',
    'rss::maker::itemsbase::itembase#pubdate=()',
    'kernelspecs::a#pub_method()',
    'rexml::doctype#public()',
    'openssl::pkey::dh#public?()',
    'openssl::pkey::dsa#public?()',
    'openssl::pkey::ec#public?()',
    'openssl::pkey::rsa#public?()',
    'modulespecs::countschild#public_1()',
    'modulespecs::countsparent#public_2()',
    'modulespecs::countsmixin#public_3()',
    'modulespecs::child#public_child()',
    'openssl::pkey::rsa#public_decrypt()',
    'openssl::pkey::rsa#public_encrypt()',
    'kernelspecs::publicsub#public_in_sub()',
    'openssl::netscape::spki#public_key()',
    'openssl::pkey::dh#public_key()',
    'openssl::pkey::dsa#public_key()',
    'openssl::pkey::ec#public_key()',
    'openssl::pkey::rsa#public_key()',
    'openssl::x509::certificate#public_key()',
    'openssl::x509::request#public_key()',
    'openssl::netscape::spki#public_key=()',
    'openssl::pkey::ec#public_key=()',
    'openssl::x509::certificate#public_key=()',
    'openssl::x509::request#public_key=()',
    'openssl::pkey::ec#public_key?()',
    'modulespecs::parent::public_method()',
    'modulespecs::basic#public_module()',
    'modulespecs::aliasing#public_one()',
    'modulespecs::parent#public_parent()',
    'hpimmspecs::subclass#public_sub_method()',
    'modulespecs::super#public_super_module()',
    'modulespecs::aliasing#public_two()',
    'modulespecs::alias#publish()',
    'rexml::parsers::baseparser#pull()',
    'rexml::parsers::pullparser#pull()',
    'languagespecs::punctuations()',
    'net::ftp::mlsxentry#purgeable?()',
    'openssl::x509::store#purpose=()',
    'openssl::x509::storecontext#purpose=()',
    'csv::row#push()',
    'csv::table#push()',
    'drb::http0::server#push()',
    'psych::visitors::yamltree#push()',
    'rdoc::markup::document#push()',
    'rdoc::markup::list#push()',
    'rdoc::markup::listitem#push()',
    'rdoc::markup::raw#push()',
    'rexml::parent#push()',
    'rinda::tuplebag#push()',
    'pp::ppmethods#push_inspect_key()',
    'irb::context#push_workspace()',
    'net::ftp#put()',
    'encoding::converter#putback()',
    'net::ftp#putbinaryfile()',
    'zlib::gzipwriter#putc()',
    'kernelspecs::putc_function()',
    'kernelspecs::putc_method()',
    'io::generic_writable#puts()',
    'irb::locale#puts()',
    'irb::notifier::abstractnotifier#puts()',
    'irb::outputmethod#puts()',
    'net::writeadapter#puts()',
    'nethttpspecs::nullwriter#puts()',
    'openssl::buffering#puts()',
    'xmp::stringinputmethod#puts()',
    'zlib::gzipwriter#puts()',
    'net::ftp#puttextfile()',
    'dir::pwd()',
    'fileutils::pwd()',
    'net::ftp#pwd()',
    'netftpspecs::dummyftp#pwd()',
    'pathname::pwd()',
    'webrick::httprequest#query()',
    'uri::generic#query=()',
    'gem::server#quick()',
    'gem::testcase#quick_gem()',
    'rdoc::options#quiet()',
    'rdoc::options#quiet=()',
    'net::ftp#quit()',
    'net::smtp#quit()',
    'regexp::quote()',
    'webrick::httputils::quote()',
    'readline::quoting_detection_proc()',
    'readline::quoting_detection_proc=()',
    'blockspecs::yielder#r()',
    'modulespecs::autoload::r()',
    'yieldspecs::yielder#r()',
    'racc::parser#racc_accept()',
    'racc::parser#racc_e_pop()',
    'racc::parser#racc_next_state()',
    'racc::parser#racc_print_stacks()',
    'racc::parser#racc_print_states()',
    'racc::parser#racc_read_token()',
    'racc::parser#racc_reduce()',
    'racc::parser#racc_shift()',
    'racc::parser#racc_token2str()',
    'cgi::htmlextension#radio_button()',
    'cgi::htmlextension#radio_group()',
    'ensurespec::container#raise_and_rescue_in_method_with_ensure()',
    'rss::baselistener::raise_for_undefined_entity?()',
    'rss::baseparser::raise_for_undefined_entity?()',
    'rss::rexmllistener::raise_for_undefined_entity?()',
    'ensurespec::container#raise_in_method_with_ensure()',
    'random::rand()',
    'random::formatter#rand()',
    'openssl::random::random_add()',
    'openssl::random::random_bytes()',
    'random::formatter#random_bytes()',
    'marshalspec::random_data()',
    'openssl::cipher#random_iv()',
    'openssl::cipher#random_key()',
    'random::formatter#random_number()',
    'webrick::utils::random_string()',
    'mspec::randomize()',
    'mspec::randomize?()',
    'net::httpheader#range()',
    'net::httpheader#range=()',
    'net::httpheader#range_length()',
    'env::rassoc()',
    'rdoc::testcase#raw()',
    'rexml::element#raw()',
    'cgi::queryextension#raw_cookie()',
    'cgi::queryextension#raw_cookie2()',
    'gc::profiler::raw_data()',
    'rdoc::ri::paths::raw_path()',
    'gem::commands::setupcommand#rb_files_in()',
    'rdoc::parser::c#rb_scan_args()',
    'capiclassspecs::cvars#rbdcv_cvar()',
    'net::smtp#rcptto()',
    'net::smtp#rcptto_list()',
    'file::stat#rdev()',
    'file::stat#rdev_major()',
    'file::stat#rdev_minor()',
    'gem::server#rdoc()',
    'rdoc::rubygemshook#rdoc_installed?()',
    'gem::specification#rdoc_options()',
    'gem::specification#rdoc_options=()',
    'rdoc::task#rdoc_task_description()',
    'process::gid::re_exchange()',
    'process::uid::re_exchange()',
    'process::gid::re_exchangeable?()',
    'process::uid::re_exchangeable?()',
    'gem::security::re_sign()',
    'capiobjectspecs::extend#reach()',
    'objectspace::reachable_objects_from()',
    'objectspace::reachable_objects_from_root()',
    'csv::read()',
    'drb::http0::strstream#read()',
    'gem::package::tarreader::entry#read()',
    'io::read()',
    'iospecs::copystreamread#read()',
    'openssl::buffering#read()',
    'openssl::pkey::read()',
    'openuri::openread#read()',
    'rexml::iosource#read()',
    'rexml::source#read()',
    'rinda::tuplespace#read()',
    'rinda::tuplespaceproxy#read()',
    'rinda::waittemplateentry#read()',
    'win32::registry#read()',
    'zlib::gzipreader#read()',
    'rinda::tuplespace#read_all()',
    'rinda::tuplespaceproxy#read_all()',
    'win32::registry#read_bin()',
    'gem::read_binary()',
    'gem::testcase#read_binary()',
    'net::httpresponse#read_body()',
    'gem::testcase#read_cache()',
    'gem::package#read_checksums()',
    'rdoc::parser::ruby#read_directive()',
    'rdoc::parser::ruby#read_documentation_modifiers()',
    'rdoc::encoding::read_file()',
    'win32::registry#read_i()',
    'io::generic_readable#read_nonblock()',
    'openssl::buffering#read_nonblock()',
    'resolv::sz#read_s()',
    'win32::registry#read_s()',
    'win32::registry#read_s_expand()',
    'openssl::pkcs7::read_smime()',
    'mspec::read_tags()',
    'net::ftp#read_timeout=()',
    'net::http#read_timeout=()',
    'net::pop3#read_timeout=()',
    'net::smtp#read_timeout=()',
    'file::readable?()',
    'file::stat#readable?()',
    'net::ftp::mlsxentry#readable?()',
    'irb::inputmethod#readable_after_eof?()',
    'irb::readlineinputmethod#readable_after_eof?()',
    'irb::stdioinputmethod#readable_after_eof?()',
    'file::readable_real?()',
    'file::stat#readable_real?()',
    'encoding::invalidbytesequenceerror#readagain_bytes()',
    'io::generic_readable#readbyte()',
    'zlib::gzipreader#readbyte()',
    'io::generic_readable#readchar()',
    'openssl::buffering#readchar()',
    'zlib::gzipreader#readchar()',
    'io::generic_readable#readline()',
    'irb::locale#readline()',
    'openssl::buffering#readline()',
    'readline::readline()',
    'zlib::gzipreader#readline()',
    'csv::readlines()',
    'io::readlines()',
    'openssl::buffering#readlines()',
    'zlib::gzipreader#readlines()',
    'file::readlink()',
    'gem::package::tarreader::entry#readpartial()',
    'io::generic_readable#readpartial()',
    'iospecs::copystreamreadpartial#readpartial()',
    'openssl::buffering#readpartial()',
    'zlib::gzipreader#readpartial()',
    'net::smtp#ready()',
    'file::realdirpath()',
    'fiddle::realloc()',
    'gem::configfile#really_verbose()',
    'file::realpath()',
    'gem::package#realpath()',
    'benchmark::realtime()',
    'optionparser::parseerror#reason()',
    'webrick::httpstatus::reason_phrase()',
    'webrick::httpstatus::status#reason_phrase()',
    'rexml::validation::relaxng#receive()',
    'openssl::pkcs7#recipients()',
    'scratchpad::record()',
    'gem::resolver::stats#record_depth()',
    'rexml::document#record_entity_expansion()',
    'rdoc::codeobject#record_location()',
    'rdoc::context#record_location()',
    'gem::resolver::stats#record_requirements()',
    'scratchpad::recorded()',
    'optionparser::parseerror#recover()',
    'complex::rect()',
    'complex::rectangular()',
    'arrayspecs::recursive_array()',
    'gem::resolver::molinillo::dependencygraph::vertex#recursive_predecessors()',
    'gem::resolver::molinillo::dependencygraph::vertex#recursive_successors()',
    'drb::http0::clientside#recv_reply()',
    'drb::http0::serverside#recv_request()',
    'redblacktree::node#red?()',
    'methodspecs::sourcelocation::redefined()',
    'unboundmethodspecs::sourcelocation::redefined()',
    'webrick::httpstatus::redirect?()',
    'gem::ext::builder::redirector()',
    'readline::redisplay()',
    'fiddle::pointer#ref()',
    'rdoc::markdown#reference()',
    'gem::refresh()',
    'readline::refresh_line()',
    'rdoc::testcase#refute_file()',
    'gem::testcase#refute_path_exists()',
    'gem::commands::setupcommand#regenerate_binstubs()',
    'optionparser::completion::regexp()',
    'uri::regexp()',
    'drb::extservmanager#regist()',
    'drb::regist_server()',
    'gem::noaliasyamltree#register()',
    'mspec::register()',
    'openssl::asn1::objectid::register()',
    'rdoc::markup::preprocess::register()',
    'vcs::register()',
    'webrick::utils::timeouthandler::register()',
    'bug::vm::register_at_exit()',
    'gem::commandmanager#register_command()',
    'mspec::register_current()',
    'gem::register_default_spec()',
    'mspec::register_exit()',
    'mspec::register_files()',
    'mspec::register_mode()',
    'mspec::register_shared()',
    'mspec::register_tags_patterns()',
    'rss::baselistener::register_uri()',
    'rdoc::markup::preprocess::registered()',
    'uri::generic#registry=()',
    'env::rehash()',
    'shell::commandprocessor#rehash()',
    'env::reject()',
    'enumerator::lazy#reject()',
    'optionparser::reject()',
    'optionparser::list#reject()',
    'yaml::dbm#reject()',
    'env::reject!()',
    'uri::generic#relative?()',
    'gem::version#release()',
    'drb::drbunknown#reload()',
    'webrick::httpauth::htdigest#reload()',
    'webrick::httpauth::htgroup#reload()',
    'webrick::httpauth::htpasswd#reload()',
    'gem::resolver::composedset#remote=()',
    'gem::localremoteoptions#remote?()',
    'webrick::httprequest#remote_ip()',
    'fileutils::remove()',
    'gem::resolver::requirementlist#remove()',
    'gem::uninstaller#remove()',
    'rdoc::rubygemshook#remove()',
    'rexml::attribute#remove()',
    'rexml::child#remove()',
    'gem::uninstaller#remove_all()',
    'gem::dependencylist#remove_by_name()',
    'rdoc::parser::simple#remove_coding_comment()',
    'rdoc::context::section#remove_comment()',
    'rdoc::parser::c#remove_commented_out_lines()',
    'fileutils::remove_dir()',
    'fileutils::remove_entry()',
    'fileutils::remove_entry_secure()',
    'gem::uninstaller#remove_executables()',
    'fileutils::remove_file()',
    'rdoc::context#remove_from_documentation?()',
    'rdoc::encoding::remove_frozen_string_literal()',
    'webrick::httpservlet::filehandler::remove_handler()',
    'gem::availableset#remove_installed!()',
    'rdoc::context#remove_invisible()',
    'rdoc::parser::remove_modeline()',
    'rdoc::store#remove_nodoc()',
    'rdoc::classmodule#remove_nodoc_children()',
    'gem::commands::setupcommand#remove_old_bin_files()',
    'gem::commands::setupcommand#remove_old_lib_files()',
    'gem::command#remove_option()',
    'gem::commands::ownercommand#remove_owners()',
    'rdoc::comment#remove_private()',
    'rdoc::parser::simple#remove_private_comment()',
    'net::imap#remove_response_handler()',
    'drb::remove_server()',
    'rdoc::rdoc#remove_siginfo_handler()',
    'gem::specification::remove_spec()',
    'gem::dependencylist#remove_specs_unsatisfied_by()',
    'gc::remove_stress_to_class()',
    'rdoc::parser::rubytools#remove_token_listener()',
    'rdoc::rdoc#remove_unparseable()',
    'gem::remove_unresolved_default_spec()',
    'net::ftp::mlsxentry#renamable?()',
    'file::rename()',
    'net::ftp#rename()',
    'net::imap#rename()',
    'rdoc::generator::darkfish#render()',
    'rdoc::generator::darkfish#render_template()',
    'rinda::simplerenewer#renew()',
    'rinda::tupleentry#renew()',
    'logger::logdevice#reopen()',
    'syslog::reopen()',
    'mspec::repeat()',
    'mspec::repeat=()',
    'env::replace()',
    'gem::sourcelist#replace()',
    'yaml::dbm#replace()',
    'rexml::parent#replace_child()',
    'rexml::child#replace_with()',
    'mock::replaced?()',
    'mock::replaced_key()',
    'mock::replaced_name()',
    'encoding::converter#replacement()',
    'encoding::converter#replacement=()',
    'drb::http0::callback#reply()',
    'nethttpspecs::requestbasicauthservlet#reply()',
    'nethttpspecs::requestbodyservlet#reply()',
    'nethttpspecs::requestheaderservlet#reply()',
    'nethttpspecs::requestservlet#reply()',
    'socket::udpsource#reply()',
    'rinda::ringserver#reply_service()',
    'gc::profiler::report()',
    'modulespecs::alias#report()',
    'rdoc::stats#report()',
    'specguard::report()',
    'rdoc::stats#report_attributes()',
    'rdoc::stats#report_class_module()',
    'rdoc::stats#report_constants()',
    'rdoc::stats#report_methods()',
    'thread::report_on_exception()',
    'thread::report_on_exception=()',
    'kernelspecs::duplicatem#repr()',
    'stringspecs::stringmodule#repr()',
    'psych::coder#represent_map()',
    'psych::coder#represent_object()',
    'psych::coder#represent_scalar()',
    'psych::coder#represent_seq()',
    'gem::testcase#req()',
    'drb::http0::callback#req_body()',
    'gem::fakefetcher#request()',
    'gem::remotefetcher#request()',
    'net::http#request()',
    'net::httpgenericrequest#request_body_permitted?()',
    'gem::resolver::dependencyrequest#request_context()',
    'net::http#request_get()',
    'net::http#request_head()',
    'gem::resolver::conflict#request_path()',
    'net::http#request_post()',
    'uri::http#request_uri()',
    'gem::resolver::conflict#requester()',
    'codeloadingspecs::method#require()',
    'irb::locale#require()',
    'gem::streamui#require_io_console()',
    'gem::specification#require_path()',
    'gem::specification#require_path=()',
    'gem::basicspecification#require_paths()',
    'gem::specification#require_paths=()',
    'gem::specification::required_attribute?()',
    'gem::specification::required_attributes()',
    'rss::element::required_prefix()',
    'rss::ituneschannelmodel::itunescategory::required_prefix()',
    'rss::ituneschannelmodel::itunesimage::required_prefix()',
    'rss::ituneschannelmodel::itunesowner::required_prefix()',
    'rss::itunesitemmodel::itunesduration::required_prefix()',
    'rss::imagefaviconmodel::imagefavicon::required_prefix()',
    'rss::imageitemmodel::imageitem::required_prefix()',
    'rss::taxonomytopicmodel::taxonomytopic::required_prefix()',
    'rss::taxonomytopicsmodel::taxonomytopics::required_prefix()',
    'gem::specification#required_ruby_version=()',
    'gem::specification#required_rubygems_version=()',
    'rss::atom::commonmodel::required_uri()',
    'rss::element::required_uri()',
    'rss::ituneschannelmodel::itunescategory::required_uri()',
    'rss::ituneschannelmodel::itunesimage::required_uri()',
    'rss::ituneschannelmodel::itunesowner::required_uri()',
    'rss::itunesitemmodel::itunesduration::required_uri()',
    'rss::imagefaviconmodel::imagefavicon::required_uri()',
    'rss::imageitemmodel::imageitem::required_uri()',
    'rss::rdf::required_uri()',
    'rss::rdf::bag::required_uri()',
    'rss::rdf::channel::required_uri()',
    'rss::rdf::channel::image::required_uri()',
    'rss::rdf::channel::items::required_uri()',
    'rss::rdf::channel::textinput::required_uri()',
    'rss::rdf::image::required_uri()',
    'rss::rdf::item::required_uri()',
    'rss::rdf::li::required_uri()',
    'rss::rdf::seq::required_uri()',
    'rss::rdf::textinput::required_uri()',
    'rss::taxonomytopicmodel::taxonomytopic::required_uri()',
    'rss::taxonomytopicsmodel::taxonomytopics::required_uri()',
    'gem::dependency#requirement()',
    'gem::resolver::dependencyrequest#requirement()',
    'gem::resolver::molinillo::delegates::resolutionstate#requirement()',
    'gem::resolver::stats#requirement!()',
    'gem::resolver#requirement_satisfied_by?()',
    'gem::resolver::molinillo::delegates::specificationprovider#requirement_satisfied_by?()',
    'gem::resolver::molinillo::specificationprovider#requirement_satisfied_by?()',
    'gem::resolver::molinillo::delegates::resolutionstate#requirements()',
    'gem::resolver::molinillo::dependencygraph::vertex#requirements()',
    'gem::specification#requirements()',
    'gem::specification#requirements=()',
    'gem::dependency#requirements_list()',
    'rdoc::task#rerdoc_task_description()',
    'socketspecs::reserved_unused_port()',
    'cgi::htmlextension#reset()',
    'digest::base#reset()',
    'digest::instance#reset()',
    'digest::sha2#reset()',
    'gem::commandmanager::reset()',
    'gem::request#reset()',
    'gem::security::reset()',
    'gem::specification::reset()',
    'mock::reset()',
    'net::pop3#reset()',
    'openssl::cipher#reset()',
    'openssl::digest#reset()',
    'openssl::hmac#reset()',
    'rdoc::markup::preprocess::reset()',
    'rdoc::parser::rubytools#reset()',
    'rdoc::ripperstatelex::innerstatelex#reset()',
    'rexml::validation::choice#reset()',
    'rexml::validation::interleave#reset()',
    'rexml::validation::oneormore#reset()',
    'rexml::validation::state#reset()',
    'rexml::validation::validator#reset()',
    'zlib::zstream#reset()',
    'gem::specification#reset_nil_attributes_to_default()',
    'constantvisibility::reset_private_constants()',
    'marshalspec::reset_swapped_class()',
    'gem::requestset#resolve()',
    'gem::resolver#resolve()',
    'gem::resolver::molinillo::resolver#resolve()',
    'gem::resolver::molinillo::resolver::resolution#resolve()',
    'rdoc::crossreference#resolve()',
    'rdoc::context#resolve_aliases()',
    'gem::requestset#resolve_current()',
    'rss::rdf::channel::items#resources()',
    'rss::taxonomytopicsmodel::taxonomytopics#resources()',
    'drb::drbobject#respond_to?()',
    'marshalspec::basicobjectsubwithrespondtofalse#respond_to?()',
    'delegatespecs::simple#respond_to_missing?()',
    'enumerablespecs::enumconvertable#respond_to_missing?()',
    'kernelspecs::respondviamissing#respond_to_missing?()',
    'methodspecs::methods#respond_to_missing?()',
    'netftpspecs::dummyftp#response()',
    'net::httpgenericrequest#response_body_permitted?()',
    'openssl::ocsp::basicresponse#responses()',
    'netftpspecs::dummyftp#rest()',
    'cgi::session::filestore#restore()',
    'cgi::session::memorystore#restore()',
    'cgi::session::nullstore#restore()',
    'cgi::session::pstore#restore()',
    'json::restore()',
    'marshal::restore()',
    'coverage::result()',
    'gc::profiler::result()',
    'processspecs::signalizer#result()',
    'debugger__::resume()',
    'netftpspecs::dummyftp#retr()',
    'net::ftp#retrbinary()',
    'mspec::retrieve()',
    'mspec::retrieve_shared()',
    'net::ftp#retrlines()',
    'processspecs::daemon#return_value()',
    'gem::resolver::molinillo::dependencygraph::log#reverse_each()',
    'variablesspecs::reverse_foo()',
    'openssl::ocsp::singleresponse#revocation_reason()',
    'openssl::ocsp::singleresponse#revocation_time()',
    'openssl::x509::crl#revoked()',
    'openssl::x509::crl#revoked=()',
    'gem::package::tarreader#rewind()',
    'gem::package::tarreader::entry#rewind()',
    'prime::eratosthenesgenerator#rewind()',
    'prime::generator23#rewind()',
    'prime::pseudoprimegenerator#rewind()',
    'prime::trialdivisiongenerator#rewind()',
    'rexml::parsers::lightparser#rewind()',
    'rexml::parsers::ultralightparser#rewind()',
    'zlib::gzipreader#rewind()',
    'gem::resolver::molinillo::dependencygraph#rewind_to()',
    'gem::resolver::molinillo::dependencygraph::log#rewind_to()',
    'cgi::util#rfc1123_date()',
    'date::rfc2822()',
    'datetime::rfc2822()',
    'time::rfc2822()',
    'date::rfc3339()',
    'datetime::rfc3339()',
    'date::rfc822()',
    'datetime::rfc822()',
    'time::rfc822()',
    'gem::specification#ri_dir()',
    'rdoc::rubygemshook#ri_installed?()',
    'rdoc::servlet#ri_paths()',
    'process::gid::rid()',
    'process::uid::rid()',
    'fileutils::rm()',
    'fileutils::rm_f()',
    'fileutils::rm_r()',
    'fileutils::rm_rf()',
    'socketspecs::rm_socket()',
    'netftpspecs::dummyftp#rmd()',
    'dir::rmdir()',
    'fileutils::rmdir()',
    'net::ftp#rmdir()',
    'shell::commandprocessor#rmdir()',
    'dirspecs::rmdir_dirs()',
    'fileutils::rmtree()',
    'netftpspecs::dummyftp#rnfr()',
    'netftpspecs::dummyftp#rnto()',
    'gem::server#root()',
    'psych::nodes::document#root()',
    'rdoc::servlet#root()',
    'rexml::document#root()',
    'rexml::element#root()',
    'rexml::light::node#root()',
    'rexml::element#root_node()',
    'rdoc::servlet#root_search()',
    'gem::resolver::molinillo::dependencygraph#root_vertex_named()',
    'rexml::functions::round()',
    'uri::generic#route_from()',
    'uri::generic#route_to()',
    'jisx0208::char#row()',
    'matrix::row_vector()',
    'matrix::rows()',
    'yieldspecs::yielder#rs()',
    'net::smtp#rset()',
    'openssl::bn#rshift!()',
    'rss::baseparser#rss()',
    'gem::ruby()',
    'gem::requestset::gemdependencyapi#ruby()',
    'gem::ruby=()',
    'rdoc::markup::verbatim#ruby?()',
    'gem::ruby_api_version()',
    'gem::ruby_engine()',
    'gem::ruby_version()',
    'specguard::ruby_version()',
    'gem::testcase::rubybin()',
    'gem::configfile#rubygems_api_key()',
    'gem::configfile#rubygems_api_key=()',
    'gem::gemcutterutilities#rubygems_api_request()',
    'gem::commands::updatecommand#rubygems_target_version()',
    'gem::rubygems_version()',
    'rdoc::testcase#rule()',
    'gods::ruler1()',
    'gods::ruler2()',
    'extlibs::run()',
    'gem::commandmanager#run()',
    'gem::ext::builder::run()',
    'gem::gemrunner#run()',
    'gem::server::run()',
    'gem::server#run()',
    'irb::irb#run()',
    'processspecs::daemon#run()',
    'rdoc::ri::driver::run()',
    'rdoc::ri::driver#run()',
    'webrick::genericserver#run()',
    'webrick::httpserver#run()',
    'shell::commandprocessor::run_config()',
    'kernelspecs::run_with_dash_n()',
    'coverage::running?()',
    'threadspecs::running_thread()',
    'gem::dependency#runtime?()',
    'gem::specification#runtime_dependencies()',
    'blockspecs::yielder#s()',
    'enumerablespecs::sortbydummy#s()',
    'yieldspecs::yielder#s()',
    'gem::remotefetcher#s3_expiration()',
    'gem::safeyaml::safe_load()',
    'psych::safe_load()',
    'fileutils::safe_unlink()',
    'methodspecs::methods#same_as_foo()',
    'rbinstall::unpackedinstaller#same_bin_script?()',
    'methodspecs::eql#same_body()',
    'methodspecs::eql2#same_body()',
    'methodspecs::eql#same_body_alias()',
    'methodspecs::eql#same_body_two()',
    'methodspecs::eql#same_body_with_args()',
    'kernelspecs::methods::san()',
    'gem::specification#sanitize()',
    'rdoc::options#sanitize_path()',
    'gem::specification#sanitize_string()',
    'gem::requirement#satisfied_by?()',
    'gem::specification#satisfies_requirement?()',
    'rdoc::store#save()',
    'downloader::save_cache()',
    'rdoc::store#save_cache()',
    'rdoc::store#save_class()',
    'bigdecimal::save_exception_mode()',
    'gem::testcase#save_gemspec()',
    'irb::context#save_history()',
    'irb::context#save_history=()',
    'bigdecimal::save_limit()',
    'gem::testcase#save_loaded_features()',
    'rdoc::store#save_method()',
    'rdoc::store#save_page()',
    'bigdecimal::save_rounding_mode()',
    'gem::streamui#say()',
    'gem::userinteraction#say()',
    'matrix::scalar()',
    'psych::coder#scalar()',
    'psych::emitter#scalar()',
    'psych::handler#scalar()',
    'psych::treebuilder#scalar()',
    'psych::coder#scalar=()',
    'openssl::x509::name::rfc2253dn#scan()',
    'rdoc::parser::c#scan()',
    'rdoc::parser::changelog#scan()',
    'rdoc::parser::markdown#scan()',
    'rdoc::parser::rd#scan()',
    'rdoc::parser::ruby#scan()',
    'rdoc::parser::simple#scan()',
    'rexml::iosource#scan()',
    'rexml::source#scan()',
    'gem::testcase#scan_make_command_lines()',
    'uri::generic#scheme=()',
    'uri::scheme_list()',
    'classspecs::sclass_with_block()',
    'classspecs::sclass_with_return()',
    'uri::ldap#scope()',
    'uri::ldap#scope=()',
    'objectspacefixtures::scoped()',
    'cgi::htmlextension#scrolling_list()',
    'openssl::kdf::scrypt()',
    'irb::jobmanager#search()',
    'net::imap#search()',
    'optionparser::list#search()',
    'optionparser::search_const()',
    'encoding::converter::search_convpath()',
    'gem::resolver#search_for()',
    'gem::resolver::molinillo::delegates::specificationprovider#search_for()',
    'gem::resolver::molinillo::specificationprovider#search_for()',
    'gem::specfetcher#search_for_dependency()',
    'rdoc::classmodule#search_record()',
    'rdoc::methodattr#search_record()',
    'rdoc::toplevel#search_record()',
    'vcs::svn::search_root()',
    'webrick::httpserver#search_servlet()',
    'rdoc::generator::jsonindex#search_string()',
    'gem::searcher=()',
    'rss::itunesitemmodel::itunesduration#second=()',
    'rss::maker::itunesitemmodel::itunesdurationbase#second=()',
    'rdoc::codeobject#section()',
    'rdoc::context#section_contents()',
    'openssl::config#sections()',
    'rdoc::context#sections()',
    'cgi::cookie#secure=()',
    'openssl::ssl::sslcontext#security_level()',
    'openssl::ssl::sslcontext#security_level=()',
    'rdoc::methodattr#see()',
    'openssl::pkey::ec::group#seed()',
    'openssl::random::seed()',
    'openssl::pkey::ec::group#seed=()',
    'gem::package::tarreader#seek()',
    'env::select()',
    'enumerator::lazy#select()',
    'io::select()',
    'net::imap#select()',
    'uri::generic#select()',
    'yaml::dbm#select()',
    'env::select!()',
    'iospecs::copystreamread#send()',
    'iospecs::copystreamreadpartial#send()',
    'rexml::functions::send()',
    'gem::commands::pushcommand#send_gem()',
    'net::smtp#send_mail()',
    'net::smtp#send_message()',
    'drb::http0::serverside#send_reply()',
    'drb::http0::clientside#send_request()',
    'net::http#send_request()',
    'net::ftp#sendcmd()',
    'irb::frame::sender()',
    'net::smtp#sendmail()',
    'pp::ppmethods#seplist()',
    'psych::coder#seq=()',
    'rdoc::context::section#sequence()',
    'openssl::ocsp::certificateid#serial()',
    'openssl::pkcs7::recipientinfo#serial()',
    'openssl::pkcs7::signerinfo#serial()',
    'openssl::x509::certificate#serial()',
    'openssl::x509::revoked#serial()',
    'openssl::x509::certificate#serial=()',
    'openssl::x509::revoked#serial=()',
    'netftpspecs::dummyftp#serve_once()',
    'webrick::httpstatus::server_error?()',
    'webrick::httprequest#server_name()',
    'drb::extservmanager#service()',
    'socketspecs::spectcpserver#service()',
    'webrick::cgi#service()',
    'webrick::httpserver#service()',
    'webrick::httpservlet::abstractservlet#service()',
    'openssl::ssl::sslsocket#session()',
    'openssl::ssl::sslsocket#session=()',
    'openssl::ssl::sslcontext#session_add()',
    'openssl::ssl::sslcontext#session_cache_mode()',
    'openssl::ssl::sslcontext#session_cache_mode=()',
    'openssl::ssl::sslcontext#session_cache_size()',
    'openssl::ssl::sslcontext#session_cache_size=()',
    'openssl::ssl::sslcontext#session_cache_stats()',
    'openssl::ssl::sslcontext#session_remove()',
    'openssl::ssl::sslsocket#session_reused?()',
    'mspecscript::set()',
    'gem::configfile#set_api_key()',
    'gem::gemcutterutilities#set_api_key()',
    'uri::ldap#set_attributes()',
    'rdoc::markup::attrspan#set_attrs()',
    'optionparser::parseerror#set_backtrace()',
    'openssl::bn#set_bit!()',
    'webrick::utils::set_close_on_exec()',
    'rdoc::context#set_constant_visibility_for()',
    'net::httpheader#set_content_type()',
    'openssl::pkey::rsa#set_crt_params()',
    'fiddle::cstructentity#set_ctypes()',
    'fiddle::cunionentity#set_ctypes()',
    'rdoc::context#set_current_section()',
    'net::http#set_debug_output()',
    'net::pop3#set_debug_output()',
    'net::smtp#set_debug_output()',
    'openssl::engine#set_default()',
    'openssl::x509::store#set_default_paths()',
    'zlib::deflate#set_dictionary()',
    'zlib::inflate#set_dictionary()',
    'uri::ldap#set_dn()',
    'rdoc::encoding::set_encoding()',
    'rdoc::erbio#set_eoutvar()',
    'rdoc::erbpartial#set_eoutvar()',
    'webrick::httpresponse#set_error()',
    'uri::ldap#set_extensions()',
    'openssl::pkey::rsa#set_factors()',
    'uri::ldap#set_filter()',
    'net::httpheader#set_form()',
    'net::httpheader#set_form_data()',
    'openssl::pkey::ec::group#set_generator()',
    'tracer::set_get_line_procs()',
    'uri::mailto#set_headers()',
    'uri::generic#set_host()',
    'openssl::pkey::dh#set_key()',
    'openssl::pkey::dsa#set_key()',
    'openssl::pkey::rsa#set_key()',
    'debugger__::set_last_thread()',
    'irb::context#set_last_value()',
    'rss::element#set_next_element()',
    'webrick::utils::set_non_blocking()',
    'uri::generic#set_opaque()',
    'optionparser::parseerror#set_option()',
    'openssl::ssl::sslcontext#set_params()',
    'webrick::httpauth::htdigest#set_passwd()',
    'webrick::httpauth::htpasswd#set_passwd()',
    'webrick::httpauth::userdb#set_passwd()',
    'uri::generic#set_password()',
    'uri::ftp#set_path()',
    'uri::generic#set_path()',
    'gem::resolver::molinillo::dependencygraph#set_payload()',
    'gem::resolver::molinillo::dependencygraph::log#set_payload()',
    'uri::generic#set_port()',
    'openssl::pkey::dh#set_pqg()',
    'openssl::pkey::dsa#set_pqg()',
    'net::httpheader#set_range()',
    'webrick::httpresponse#set_redirect()',
    'rubyvm::instruction#set_sc()',
    'uri::generic#set_scheme()',
    'uri::ldap#set_scope()',
    'readline::set_screen_size()',
    'rss::imagefaviconmodel::imagefavicon#set_size()',
    'net::ftp#set_socket()',
    'marshalspec::set_swapped_class()',
    'uri::mailto#set_to()',
    'openssl::pkey::ec::point#set_to_infinity!()',
    'debugger__::set_trace()',
    'uri::ftp#set_typecode()',
    'uri::generic#set_user()',
    'uri::generic#set_userinfo()',
    'rdoc::context#set_visibility_for()',
    'net::imap#setacl()',
    'process::sys::setegid()',
    'process::sys::seteuid()',
    'process::sys::setgid()',
    'file::setgid?()',
    'file::stat#setgid?()',
    'etc::setgrent()',
    'process::setpgid()',
    'process::setpgrp()',
    'process::setpriority()',
    'process::setproctitle()',
    'etc::setpwent()',
    'net::imap#setquota()',
    'process::sys::setregid()',
    'process::sys::setresgid()',
    'process::sys::setresuid()',
    'process::sys::setreuid()',
    'process::sys::setrgid()',
    'process::setrlimit()',
    'process::sys::setruid()',
    'process::setsid()',
    'openssl::ssl::socketforwarder#setsockopt()',
    'rss::baselistener::setter()',
    'process::sys::setuid()',
    'file::setuid?()',
    'file::stat#setuid?()',
    'gem::installertestcase#setup()',
    'gem::testcase#setup()',
    'openssl::ssl::sslcontext#setup()',
    'rdoc::generator::darkfish#setup()',
    'rdoc::markup::formattertestcase#setup()',
    'rdoc::rubygemshook#setup()',
    'rdoc::testcase#setup()',
    'drb::drbsslsocket::sslconfig#setup_certificate()',
    'mspec::setup_env()',
    'rdoc::options#setup_generator()',
    'rss::atom::entry#setup_maker()',
    'rss::rdf::bag#setup_maker()',
    'rss::rdf::seq#setup_maker()',
    'rss::rootelementmixin#setup_maker()',
    'rss::setupmaker#setup_maker()',
    'rss::xmlstylesheet#setup_maker()',
    'rss::rss#setup_maker_elements()',
    'rdoc::rdoc#setup_output_dir()',
    'rdoc::ri::driver#setup_pager()',
    'webrick::accesslog#setup_params()',
    'rdoc::markup::parser#setup_scanner()',
    'gem::package#setup_signer()',
    'drb::drbsslsocket::sslconfig#setup_ssl_context()',
    'drb::http0::server#setup_webrick()',
    'ripper::sexp()',
    'ripper::sexp_raw()',
    'shell::processcontroller#sfork()',
    'gem::resolver::molinillo::dependencygraph::vertex#shallow_eql?()',
    'gem::installer#shebang()',
    'rbinstall::unpackedinstaller#shebang()',
    'shellwords::shellescape()',
    'shellwords::shelljoin()',
    'shellwords::shellsplit()',
    'shellwords::shellwords()',
    'argv::shift()',
    'env::shift()',
    'gem::requestset::lockfile::tokenizer#shift()',
    'yaml::dbm#shift()',
    'openssl::asn1::objectid#short_name()',
    'netftpspecs::dummyftp#should_receive()',
    'rdoc::servlet#show_documentation()',
    'gem::commands::contentscommand#show_files()',
    'gem::command#show_help()',
    'gem::command#show_lookup_failure()',
    'gem::commands::ownercommand#show_owners()',
    'gem::server#show_rdoc_for_pattern()',
    'gem::commands::setupcommand#show_release_notes()',
    'optionparser::show_version()',
    'mspec::shuffle()',
    'openssl::ssl::sslserver#shutdown()',
    'rinda::ringserver#shutdown()',
    'socketspecs::spectcpserver#shutdown()',
    'webrick::genericserver#shutdown()',
    'process::gid::sid_available?()',
    'process::uid::sid_available?()',
    'definedspecs::side_effects()',
    'gem::commands::certcommand#sign()',
    'gem::security::sign()',
    'gem::security::signer#sign()',
    'openssl::netscape::spki#sign()',
    'openssl::ocsp::basicresponse#sign()',
    'openssl::ocsp::request#sign()',
    'openssl::pkcs7::sign()',
    'openssl::pkey::pkey#sign()',
    'openssl::x509::crl#sign()',
    'openssl::x509::certificate#sign()',
    'openssl::x509::request#sign()',
    'gem::gemcutterutilities#sign_in()',
    'openssl::pkey::rsa#sign_pss()',
    'gem::remotefetcher#sign_s3_url()',
    'monitormixin::conditionvariable#signal()',
    'rinda::waittemplateentry#signal()',
    'irb::irb#signal_handle()',
    'irb::irb#signal_status()',
    'process::status#signaled?()',
    'signal::signame()',
    'rdoc::tomdoc::signature()',
    'openssl::x509::crl#signature_algorithm()',
    'openssl::x509::certificate#signature_algorithm()',
    'openssl::x509::request#signature_algorithm()',
    'openssl::ocsp::request#signed?()',
    'openssl::pkcs7::signerinfo#signed_time()',
    'openssl::pkcs7#signers()',
    'gem::util::silent_system()',
    'cmath::sin()',
    'math::sin()',
    'rexml::validation::event#single?()',
    'prettyprint::singleline_format()',
    'pp::singleline_pp()',
    'squigglyheredocspecs::singlequoted()',
    'hsmmspecs::singleton_method()',
    'basicobjectspecs::singletonmethod::singleton_method_added()',
    'numericspecs::subclass#singleton_method_added()',
    'object::singleton_method_added()',
    'rexml::functions::singleton_method_added()',
    'basicobjectspecs::singletonmethod::singleton_method_to_alias()',
    'matrix::lupdecomposition#singular?()',
    'cmath::sinh()',
    'math::sinh()',
    'net::ftp#site()',
    'netftpspecs::dummyftp#site()',
    'rdoc::ri::paths::site_dir()',
    'digest::instance#size()',
    'env::size()',
    'enumerablespecs::emptywithsize#size()',
    'enumerablespecs::numerouswithsize#size()',
    'fiddle::cstructentity::size()',
    'fiddle::cunionentity::size()',
    'fiddle::pointer#size()',
    'file::size()',
    'file::stat#size()',
    'gem::availableset#size()',
    'gem::resolver::requirementlist#size()',
    'net::ftp#size()',
    'netftpspecs::dummyftp#size()',
    'objectspace::weakmap#size()',
    'prime::pseudoprimegenerator#size()',
    'rexml::attributes#size()',
    'rexml::elements#size()',
    'rexml::light::node#size()',
    'rexml::parent#size()',
    'rexml::syncenumerator#size()',
    'rinda::tuple#size()',
    'rinda::tupleentry#size()',
    'rubyvm::instructionsloader#size()',
    'fiddle::pointer#size=()',
    'rss::imagefaviconmodel::imagefavicon#size=()',
    'file::size?()',
    'file::stat#size?()',
    'fiddle::importer#sizeof()',
    'gem::requestset::lockfile::tokenizer#skip()',
    'rdoc::markup::parser#skip()',
    'gem::deprecate::skip_during()',
    'rdoc::parser::ruby#skip_for_variable()',
    'rdoc::parser::ruby#skip_method()',
    'rdoc::parser::ruby#skip_optional_do_after_expression()',
    'rdoc::parser::rubytools#skip_tkspace()',
    'rdoc::parser::ruby#skip_tkspace_comment()',
    'threadspecs::sleeping_thread()',
    'ripper::slice()',
    'enumerator::lazy#slice_after()',
    'enumerator::lazy#slice_before()',
    'enumerator::lazy#slice_when()',
    'classspecs::e::smeth()',
    'classspecs::o::smeth()',
    'openssl::asn1::objectid#sn()',
    'rdoc::text#snippet()',
    'socket::sockaddr_in()',
    'socketspecs::sockaddr_in()',
    'socket::sockaddr_un()',
    'filespecs::socket()',
    'file::socket?()',
    'file::stat#socket?()',
    'socketspecs::socket_path()',
    'socket::socketpair()',
    'unixsocket::socketpair()',
    'matrix::lupdecomposition#solve()',
    'net::imap#sort()',
    'gem::resolver#sort_dependencies()',
    'gem::resolver::molinillo::delegates::specificationprovider#sort_dependencies()',
    'gem::resolver::molinillo::specificationprovider#sort_dependencies()',
    'gem::specification#sort_obj()',
    'rdoc::context#sort_sections()',
    'gem::availableset#sorted()',
    'gem::requestset#sorted_requests()',
    'gem::requestset::gemdependencyapi#source()',
    'gem::resolver::installedspecification#source()',
    'json::ext::parser#source()',
    'rdoc::store#source()',
    'rexml::parsers::sax2parser#source()',
    'encoding::converter#source_encoding()',
    'encoding::invalidbytesequenceerror#source_encoding()',
    'encoding::undefinedconversionerror#source_encoding()',
    'stringspecs::iso88599encoding#source_encoding()',
    'stringspecs::utf8encoding::source_encoding()',
    'encoding::invalidbytesequenceerror#source_encoding_name()',
    'encoding::undefinedconversionerror#source_encoding_name()',
    'irb::irbloader#source_file()',
    'gem::availableset#source_for()',
    'gem::basicspecification#source_paths()',
    'gem::sources()',
    'gem::sources=()',
    'rubyvm::instruction#sp_increase_c_expr()',
    'json::ext::generator::state#space()',
    'json::ext::generator::state#space=()',
    'json::ext::generator::state#space_before()',
    'json::ext::generator::state#space_before=()',
    'pty::spawn()',
    'process::spawn()',
    'gem::installer#spec()',
    'gem::package#spec()',
    'gem::package::old#spec()',
    'gem::resolver::lockspecification#spec()',
    'gem::testcase#spec()',
    'gem::testcase::specfetchersetup#spec()',
    'gem::spec_cache_dir()',
    'codeloadingspecs::spec_cleanup()',
    'gem::specification#spec_dir()',
    'gem::testcase#spec_fetcher()',
    'gem::installer#spec_file()',
    'gem::specification#spec_file()',
    'gem::commands::contentscommand#spec_for()',
    'gem::commands::opencommand#spec_for()',
    'gem::specfetcher#spec_for_dependency()',
    'gem::requestset::lockfile#spec_groups()',
    'gem::nametuple#spec_name()',
    'gem::specification#spec_name()',
    'gem::commands::lockcommand#spec_path()',
    'gem::dependencylist#spec_predecessors()',
    'codeloadingspecs::spec_setup()',
    'readline::special_prefixes()',
    'readline::special_prefixes=()',
    'gem::dependency#specific?()',
    'gem::requirement#specific?()',
    'gem::command::specific_extra_args()',
    'gem::command::specific_extra_args_hash()',
    'gem::requestset#specs()',
    'gem::server#specs()',
    'gem::source::git#specs()',
    'gem::requestset#specs_in()',
    'threadspecs::spin_until_sleeping()',
    'blockspecs::yield#splat()',
    'cgispecs::split()',
    'file::split()',
    'shellwords::split()',
    'uri::split()',
    'uri::rfc2396_parser#split()',
    'webrick::httputils::split_header_value()',
    'rdoc::markup::attributemanager#split_into_flow()',
    'openssl::bn#sqr()',
    'cmath::sqrt()',
    'integer::sqrt()',
    'math::sqrt()',
    'bindingspecs::demo#square()',
    'kernelspecs::binding#square()',
    'random::srand()',
    'net::smtp#ssl?()',
    'webrick::httprequest#ssl?()',
    'net::pop3::ssl_params()',
    'webrick::genericserver#ssl_servername_callback()',
    'webrick::httpserver#ssl_servername_callback()',
    'openssl::ssl::sslsocket#ssl_version()',
    'openssl::ssl::sslcontext#ssl_version=()',
    'vcs::git#stable()',
    'rexml::document#stand_alone?()',
    'platformguard::standard?()',
    'bug::start()',
    'coverage::start()',
    'gc::start()',
    'irb::start()',
    'net::http::start()',
    'net::http#start()',
    'net::pop3::start()',
    'net::pop3#start()',
    'net::smtp::start()',
    'net::smtp#start()',
    'psych::streaming#start()',
    'psych::visitors::yamltree#start()',
    'returnspecs::savedinnerblock#start()',
    'shell::systemcommand#start()',
    'thread::start()',
    'webrick::cgi#start()',
    'webrick::daemon::start()',
    'webrick::genericserver#start()',
    'webrick::simpleserver::start()',
    'rss::rexmllikexmlparser#startelement()',
    'rdoc::markup::toansi#start_accepting()',
    'rdoc::markup::tohtml#start_accepting()',
    'rdoc::markup::tohtmlsnippet#start_accepting()',
    'rdoc::markup::tordoc#start_accepting()',
    'rdoc::markup::totableofcontents#start_accepting()',
    'rdoc::markup::tottonly#start_accepting()',
    'rdoc::tokenstream#start_collecting_tokens()',
    'rdoc::codeobject#start_doc()',
    'psych::emitter#start_document()',
    'psych::handler#start_document()',
    'psych::treebuilder#start_document()',
    'rexml::sax2listener#start_document()',
    'rexml::sax2listener#start_element()',
    'rexml::parsers::pullevent#start_element?()',
    'shell::systemcommand#start_export()',
    'shell::systemcommand#start_import()',
    'shell::processcontroller#start_job()',
    'psych::emitter#start_mapping()',
    'psych::handler#start_mapping()',
    'rexml::sax2listener#start_prefix_mapping()',
    'psych::emitter#start_sequence()',
    'psych::handler#start_sequence()',
    'nethttpspecs::start_server()',
    'rdoc::ri::driver#start_server()',
    'drb::start_service()',
    'psych::emitter#start_stream()',
    'psych::handler#start_stream()',
    'psych::treebuilder#start_stream()',
    'net::http#started?()',
    'net::pop3#started?()',
    'net::smtp#started?()',
    'rexml::functions::starts_with()',
    'net::imap#starttls()',
    'net::smtp#starttls()',
    'net::smtp#starttls?()',
    'net::smtp#starttls_always?()',
    'net::smtp#starttls_auto?()',
    'file::stat()',
    'gc::stat()',
    'netftpspecs::dummyftp#stat()',
    'rubyvm::stat()',
    'tracepoint::stat()',
    'openssl::ssl::sslsocket#state()',
    'ripper::filter#state()',
    'net::ftp#status()',
    'net::imap#status()',
    'openssl::ocsp::basicresponse#status()',
    'openssl::ocsp::response#status()',
    'pty::childexited#status()',
    'webrick::httpresponse#status=()',
    'openssl::random::status?()',
    'webrick::httpresponse#status_line()',
    'threadspecs::status_of_blocked_thread()',
    'threadspecs::status_of_completed_thread()',
    'threadspecs::status_of_current_thread()',
    'threadspecs::status_of_dying_running_thread()',
    'threadspecs::status_of_dying_sleeping_thread()',
    'threadspecs::status_of_dying_thread_after_sleep()',
    'threadspecs::status_of_killed_thread()',
    'threadspecs::status_of_running_thread()',
    'threadspecs::status_of_sleeping_thread()',
    'threadspecs::status_of_thread_with_uncaught_exception()',
    'openssl::ocsp::response#status_string()',
    'net::smtp::response#status_type_char()',
    'processspecs::daemon#stay_in_dir()',
    'debugger__::stdout()',
    'debugger__::stdout=()',
    'file::sticky?()',
    'file::stat#sticky?()',
    'netftpspecs::dummyftp#stop()',
    'thread::stop()',
    'webrick::genericserver#stop()',
    'threadspecs::status#stop?()',
    'rdoc::codeobject#stop_doc()',
    'nethttpspecs::stop_server()',
    'drb::stop_service()',
    'drb::drbserver#stop_service()',
    'drb::extserv#stop_service()',
    'process::status#stopped?()',
    'process::status#stopsig()',
    'netftpspecs::dummyftp#stor()',
    'net::ftp#storbinary()',
    'env::store()',
    'mspec::store()',
    'net::imap#store()',
    'yaml::dbm#store()',
    'rdoc::anymethod#store=()',
    'rdoc::classmodule#store=()',
    'rdoc::codeobject#store=()',
    'rdoc::constant#store=()',
    'rdoc::methodattr#store=()',
    'rdoc::mixin#store=()',
    'rdoc::rdoc#store=()',
    'rdoc::servlet#store_for()',
    'net::ftp#storlines()',
    'rexml::parsers::baseparser#stream=()',
    'zlib::zstream#stream_end?()',
    'psych::handler#streaming?()',
    'gc::stress()',
    'gc::stress=()',
    'gem::package::tarheader::strict_oct()',
    'rdoc::markdown#strike()',
    'rexml::functions::string()',
    'classspecs::string_class_variables()',
    'classspecs::string_instance_variables()',
    'rexml::functions::string_length()',
    'codingus_ascii::string_literal()',
    'codingutf_8::string_literal()',
    'rexml::functions::string_value()',
    'commentstripper::strip()',
    'loggerspecs::strip_date()',
    'rdoc::text#strip_hashes()',
    'rdoc::text#strip_newlines()',
    'rdoc::text#strip_stars()',
    'rdoc::markdown#strong()',
    'tsort::strongly_connected_components()',
    'date::strptime()',
    'datetime::strptime()',
    'time::strptime()',
    'fiddle::importer#struct()',
    'gem::basicspecification#stubbed?()',
    'gem::specification#stubbed?()',
    'gem::specification::stubs()',
    'mock::stubs()',
    'gem::specification::stubs_for()',
    'webrick::utils::su()',
    'precedencespecs::nonunaryoptest#sub_num()',
    'net::httpheader#sub_type()',
    'object::subclass=()',
    'resolv::dns::name#subdomain_of?()',
    'openssl::x509::certificate#subject()',
    'openssl::x509::request#subject()',
    'openssl::x509::certificate#subject=()',
    'openssl::x509::request#subject=()',
    'openssl::x509::extensionfactory#subject_certificate=()',
    'openssl::x509::extensionfactory#subject_request=()',
    'cgi::htmlextension#submit()',
    'net::imap#subscribe()',
    'rexml::functions::substring()',
    'rexml::functions::substring_after()',
    'rexml::functions::substring_before()',
    'jisx0208::char#succ()',
    'prime::eratosthenesgenerator#succ()',
    'prime::generator23#succ()',
    'prime::pseudoprimegenerator#succ()',
    'prime::trialdivisiongenerator#succ()',
    'rangespecs::tenfoldsucc#succ()',
    'rangespecs::xs#succ()',
    'rangespecs::ys#succ()',
    'net::smtp::response#success?()',
    'process::status#success?()',
    'webrick::httpstatus::success?()',
    'gem::resolver::molinillo::dependencygraph::vertex#successors()',
    'gem::suffix_pattern()',
    'gem::suffixes()',
    'gem::specfetcher#suggest_gems_from_name()',
    'gem::licenses::suggestions()',
    'rexml::functions::sum()',
    'optionparser::list#summarize()',
    'optionparser::switch#summarize()',
    'rdoc::stats#summary()',
    'gem::specification#summary=()',
    'modulespecs::aliasingsuper::child#super_call()',
    'modulespecs::aliasingsuper::parent#super_call()',
    'modulespecs::aliasingsuper::redefineafteralias#super_call()',
    'shell::systemcommand#super_each()',
    'rdoc::classmodule#superclass()',
    'rdoc::normalmodule#superclass()',
    'rdoc::classmodule#superclass=()',
    'rdoc::anymethod#superclass_method()',
    'rss::maker::supported?()',
    'rdoc::codeobject#suppress()',
    'rdoc::codeobject#suppressed?()',
    'rdoc::markup::totableofcontents#suppressed?()',
    'debugger__::suspend()',
    'irb::irb#suspend_context()',
    'irb::irb#suspend_input_method()',
    'irb::irb#suspend_name()',
    'irb::irb#suspend_workspace()',
    'irb::jobmanager#switch()',
    'process::gid::switch()',
    'process::uid::switch()',
    'optionparser::switch#switch_name()',
    'fiddle::compositehandler#sym()',
    'fiddle::handle::sym()',
    'fiddle::handle#sym()',
    'psych::classloader::restricted#symbolize()',
    'file::symlink()',
    'filespecs::symlink()',
    'fileutils::symlink()',
    'file::symlink?()',
    'file::stat#symlink?()',
    'gem::package::tarreader::entry#symlink?()',
    'zlib::gzipfile#sync()',
    'zlib::inflate#sync()',
    'zlib::gzipfile#sync=()',
    'zlib::inflate#sync_point?()',
    'openssl::ssl::sslsocket#sysclose()',
    'etc::sysconf()',
    'etc::sysconfdir()',
    'syslog::logger::syslog()',
    'syslog::logger::syslog=()',
    'io::sysopen()',
    'io::generic_readable#sysread()',
    'openssl::ssl::sslsocket#sysread()',
    'openssl::pkey::dsa#syssign()',
    'netftpspecs::dummyftp#syst()',
    'net::ftp#system()',
    'rexml::doctype#system()',
    'shell::commandprocessor#system()',
    'rdoc::ri::paths::system_dir()',
    'etc::systmpdir()',
    'openssl::pkey::dsa#sysverify()',
    'openssl::ssl::sslsocket#syswrite()',
    'csv::table()',
    'rdoc::markup::document#table_of_contents()',
    'gem::resolver::molinillo::dependencygraph#tag()',
    'gem::resolver::molinillo::dependencygraph::log#tag()',
    'vcs::git#tag()',
    'vcs::svn#tag()',
    'rexml::streamlistener#tag_end()',
    'rss::listenermixin#tag_end()',
    'rss::element::tag_name()',
    'rss::element#tag_name()',
    'rexml::streamlistener#tag_start()',
    'rss::listenermixin#tag_start()',
    'mspec::tags_file()',
    'enumerator::lazy#take()',
    'rinda::tuplespace#take()',
    'rinda::tuplespaceproxy#take()',
    'enumerator::lazy#take_while()',
    'cmath::tan()',
    'math::tan()',
    'cmath::tanh()',
    'math::tanh()',
    'gem::package::tartestcase#tar_dir_header()',
    'gem::package::tartestcase#tar_file_header()',
    'gem::package::tartestcase#tar_symlink_header()',
    'addrinfo::tcp()',
    'socket::tcp()',
    'socket::tcp_server_loop()',
    'socket::tcp_server_sockets()',
    'gem::testcase#teardown()',
    'shell::commandprocessor#tee()',
    'zlib::gzipreader#tell()',
    'zlib::gzipwriter#tell()',
    'rdoc::testcase#temp_dir()',
    'rubyvm::sourcecodegenerator#template()',
    'rdoc::options#template_dir_for()',
    'gem::commands::setupcommand#template_files()',
    'gem::commands::setupcommand#template_files_in()',
    'rdoc::generator::darkfish#template_for()',
    'rdoc::generator::darkfish#template_result()',
    'optionparser::terminate()',
    'shell::systemcommand#terminate()',
    'webrick::utils::timeouthandler::terminate()',
    'gem::mockgemui#terminate_interaction()',
    'gem::streamui#terminate_interaction()',
    'gem::userinteraction#terminate_interaction()',
    'shell::processcontroller#terminate_job()',
    'gem::mockgemui#terminated?()',
    'process::status#termsig()',
    'definedspecs::classwithmethod#test()',
    'definedspecs::classwithoutmethod#test()',
    'mixin::test()',
    'shell::commandprocessor#test()',
    'tracepointspec::test()',
    'rdoc::markup::formattertestcase#test_accept_blank_line()',
    'rdoc::markup::formattertestcase#test_accept_block_quote()',
    'rdoc::markup::formattertestcase#test_accept_document()',
    'rdoc::markup::formattertestcase#test_accept_heading()',
    'rdoc::markup::formattertestcase#test_accept_heading_1()',
    'rdoc::markup::formattertestcase#test_accept_heading_2()',
    'rdoc::markup::formattertestcase#test_accept_heading_3()',
    'rdoc::markup::formattertestcase#test_accept_heading_4()',
    'rdoc::markup::formattertestcase#test_accept_heading_b()',
    'rdoc::markup::textformattertestcase#test_accept_heading_indent()',
    'rdoc::markup::formattertestcase#test_accept_heading_suppressed_crossref()',
    'rdoc::markup::formattertestcase#test_accept_list_end_bullet()',
    'rdoc::markup::formattertestcase#test_accept_list_end_label()',
    'rdoc::markup::formattertestcase#test_accept_list_end_lalpha()',
    'rdoc::markup::formattertestcase#test_accept_list_end_note()',
    'rdoc::markup::formattertestcase#test_accept_list_end_number()',
    'rdoc::markup::formattertestcase#test_accept_list_end_ualpha()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_bullet()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_label()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_lalpha()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_note()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_number()',
    'rdoc::markup::formattertestcase#test_accept_list_item_end_ualpha()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_bullet()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_label()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_lalpha()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_note()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_note_2()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_note_multi_description()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_note_multi_label()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_number()',
    'rdoc::markup::formattertestcase#test_accept_list_item_start_ualpha()',
    'rdoc::markup::formattertestcase#test_accept_list_start_bullet()',
    'rdoc::markup::formattertestcase#test_accept_list_start_label()',
    'rdoc::markup::formattertestcase#test_accept_list_start_lalpha()',
    'rdoc::markup::formattertestcase#test_accept_list_start_note()',
    'rdoc::markup::formattertestcase#test_accept_list_start_number()',
    'rdoc::markup::formattertestcase#test_accept_list_start_ualpha()',
    'rdoc::markup::formattertestcase#test_accept_paragraph()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_b()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_br()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_break()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_i()',
    'rdoc::markup::textformattertestcase#test_accept_paragraph_indent()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_plus()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_star()',
    'rdoc::markup::formattertestcase#test_accept_paragraph_underscore()',
    'rdoc::markup::textformattertestcase#test_accept_paragraph_wrap()',
    'rdoc::markup::formattertestcase#test_accept_raw()',
    'rdoc::markup::formattertestcase#test_accept_rule()',
    'rdoc::markup::textformattertestcase#test_accept_rule_indent()',
    'rdoc::markup::formattertestcase#test_accept_verbatim()',
    'rdoc::markup::textformattertestcase#test_accept_verbatim_big_indent()',
    'rdoc::markup::textformattertestcase#test_accept_verbatim_indent()',
    'rdoc::markup::textformattertestcase#test_attributes()',
    'rdoc::markup::formattertestcase#test_end_accepting()',
    'rdoc::markup::formattertestcase#test_list_nested()',
    'rdoc::markup::formattertestcase#test_list_verbatim()',
    'modulespecs::extendobject#test_method()',
    'rdoc::markup::formattertestcase#test_start_accepting()',
    'integer::test_unpack()',
    'prettyprint::singleline#text()',
    'rdoc::markup::indentedparagraph#text()',
    'rdoc::markup::paragraph#text()',
    'rdoc::markup::raw#text()',
    'rdoc::markup::verbatim#text()',
    'rexml::element#text()',
    'rexml::functions::text()',
    'rexml::streamlistener#text()',
    'rss::listenermixin#text()',
    'rdoc::comment#text=()',
    'rexml::element#text=()',
    'rexml::light::node#text=()',
    'rdoc::toplevel#text?()',
    'rexml::parsers::pullevent#text?()',
    'cgi::htmlextension#text_field()',
    'cgi::htmlextension#textarea()',
    'rss::rss#textinput()',
    'rexml::element#texts()',
    'gem::basicspecification#this()',
    'openssl::ocsp::singleresponse#this_update()',
    'drb::thread()',
    'irb::jobmanager#thread()',
    'net::imap#thread()',
    'io::thread_fd_close()',
    'debugger__::thread_list()',
    'debugger__::thread_list_all()',
    'unboundmethodspecs::methods#three()',
    'ensurespec::container#throw_in_method_with_ensure()',
    'catchspecs::throwing_method()',
    'gem::time()',
    'openssl::ssl::session#time()',
    'openssl::x509::revoked#time()',
    'win32::registry::time2wtime()',
    'openssl::ssl::session#time=()',
    'openssl::x509::revoked#time=()',
    'openssl::x509::store#time=()',
    'openssl::x509::storecontext#time=()',
    'rdoc::generator::darkfish#time_delta_string()',
    'openssl::ssl::session#timeout()',
    'timeout::timeout()',
    'webrick::utils::timeout()',
    'openssl::ssl::session#timeout=()',
    'resolv::dns#timeouts=()',
    'process::times()',
    'socket::ancillarydata#timestamp()',
    'rdoc::store#title()',
    'rdoc::store#title=()',
    'rdoc::parser::ruby#tk_nl?()',
    'rdoc::parser::rubytools#tk_nl?()',
    'net::smtp#tls?()',
    'openssl::ssl::sslsocket#tmp_key()',
    'dir::tmpdir()',
    'uri::mailto#to=()',
    'arrayspecs::arrayconvertable#to_a()',
    'benchmark::tms#to_a()',
    'csv::table#to_a()',
    'env::to_a()',
    'enumerablespecs::arrayconvertable#to_a()',
    'enumerablespecs::freezy#to_a()',
    'gem::list#to_a()',
    'gem::nametuple#to_a()',
    'gem::platform#to_a()',
    'gem::requestset::lockfile::tokenizer#to_a()',
    'gem::sourcelist#to_a()',
    'matrix::eigenvaluedecomposition#to_a()',
    'matrix::lupdecomposition#to_a()',
    'openssl::x509::extension#to_a()',
    'openssl::x509::name#to_a()',
    'rexml::attributes#to_a()',
    'rexml::elements#to_a()',
    'rexml::parent#to_a()',
    'rinda::ringfinger::to_a()',
    'rinda::ringfinger#to_a()',
    'rubyvm::instructionsequence#to_a()',
    'shell::filter#to_a()',
    'variablesspecs::arraylike#to_a()',
    'yaml::dbm#to_a()',
    'capiobjectspecs::subarray#to_array()',
    'arrayspecs::arrayconvertable#to_ary()',
    'arrayspecs::toaryarray#to_ary()',
    'enumerablespecs::arrayconvertable#to_ary()',
    'gem::sourcelist#to_ary()',
    'langsendspecs::toary#to_ary()',
    'matrix::eigenvaluedecomposition#to_ary()',
    'matrix::lupdecomposition#to_ary()',
    'procspecs::toaryasnil#to_ary()',
    'variablesspecs::parasgn#to_ary()',
    'variablesspecs::toarynil#to_ary()',
    'webrick::httputils::formdata#to_ary()',
    'rss::rootelementmixin#to_atom()',
    'gem::nametuple::to_basic()',
    'objectspacefixtures::to_be_found_symbols()',
    'rubyvm::instructionsequence#to_binary()',
    'openssl::bn#to_bn()',
    'openssl::pkey::ec::point#to_bn()',
    'rss::utils#to_class_name()',
    'csv::row#to_csv()',
    'csv::table#to_csv()',
    'openssl::asn1::asn1data#to_der()',
    'openssl::asn1::constructive#to_der()',
    'openssl::asn1::primitive#to_der()',
    'openssl::netscape::spki#to_der()',
    'openssl::ocsp::basicresponse#to_der()',
    'openssl::ocsp::certificateid#to_der()',
    'openssl::ocsp::request#to_der()',
    'openssl::ocsp::response#to_der()',
    'openssl::ocsp::singleresponse#to_der()',
    'openssl::pkcs12#to_der()',
    'openssl::pkcs7#to_der()',
    'openssl::pkey::dh#to_der()',
    'openssl::pkey::dsa#to_der()',
    'openssl::pkey::ec#to_der()',
    'openssl::pkey::ec::group#to_der()',
    'openssl::pkey::rsa#to_der()',
    'openssl::ssl::session#to_der()',
    'openssl::x509::attribute#to_der()',
    'openssl::x509::crl#to_der()',
    'openssl::x509::certificate#to_der()',
    'openssl::x509::extension#to_der()',
    'openssl::x509::name#to_der()',
    'openssl::x509::request#to_der()',
    'openssl::x509::revoked#to_der()',
    'gem::resolver::molinillo::dependencygraph#to_dot()',
    'rss::element::to_element_methods()',
    'enumerablespecs::enumconvertable#to_enum()',
    'enumerator::lazy#to_enum()',
    'mathspecs::float#to_f()',
    'rss::maker::atom::entry::items#to_feed()',
    'rss::maker::atom::entry::items::item#to_feed()',
    'rss::maker::atom::feed::channel#to_feed()',
    'rss::maker::atom::feed::channel::cloud#to_feed()',
    'rss::maker::atom::feed::channel::skipdays#to_feed()',
    'rss::maker::atom::feed::channel::skiphours#to_feed()',
    'rss::maker::atom::feed::image#to_feed()',
    'rss::maker::atom::feed::items#to_feed()',
    'rss::maker::atom::feed::items::item#to_feed()',
    'rss::maker::atom::feed::items::item::content#to_feed()',
    'rss::maker::atom::feed::items::item::enclosure#to_feed()',
    'rss::maker::atom::feed::items::item::guid#to_feed()',
    'rss::maker::atom::feed::items::item::source#to_feed()',
    'rss::maker::atom::feed::items::item::source::icon#to_feed()',
    'rss::maker::atomcategory#to_feed()',
    'rss::maker::atomgenerator#to_feed()',
    'rss::maker::atomlink#to_feed()',
    'rss::maker::atomlogo#to_feed()',
    'rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed()',
    'rss::maker::ituneschannelmodel::itunesimagebase#to_feed()',
    'rss::maker::ituneschannelmodel::itunesownerbase#to_feed()',
    'rss::maker::itunesitemmodel::itunesdurationbase#to_feed()',
    'rss::maker::imagefaviconmodel::imagefaviconbase#to_feed()',
    'rss::maker::imageitemmodel::imageitembase#to_feed()',
    'rss::maker::rss09::channel#to_feed()',
    'rss::maker::rss09::channel::authors#to_feed()',
    'rss::maker::rss09::channel::authors::author#to_feed()',
    'rss::maker::rss09::channel::categories#to_feed()',
    'rss::maker::rss09::channel::cloud#to_feed()',
    'rss::maker::rss09::channel::contributors#to_feed()',
    'rss::maker::rss09::channel::copyright#to_feed()',
    'rss::maker::rss09::channel::description#to_feed()',
    'rss::maker::rss09::channel::generator#to_feed()',
    'rss::maker::rss09::channel::links#to_feed()',
    'rss::maker::rss09::channel::links::link#to_feed()',
    'rss::maker::rss09::channel::skipdays#to_feed()',
    'rss::maker::rss09::channel::skipdays::day#to_feed()',
    'rss::maker::rss09::channel::skiphours#to_feed()',
    'rss::maker::rss09::channel::skiphours::hour#to_feed()',
    'rss::maker::rss09::channel::title#to_feed()',
    'rss::maker::rss09::image#to_feed()',
    'rss::maker::rss09::items#to_feed()',
    'rss::maker::rss09::items::item#to_feed()',
    'rss::maker::rss09::items::item::authors#to_feed()',
    'rss::maker::rss09::items::item::categories#to_feed()',
    'rss::maker::rss09::items::item::content#to_feed()',
    'rss::maker::rss09::items::item::contributors#to_feed()',
    'rss::maker::rss09::items::item::description#to_feed()',
    'rss::maker::rss09::items::item::enclosure#to_feed()',
    'rss::maker::rss09::items::item::guid#to_feed()',
    'rss::maker::rss09::items::item::links#to_feed()',
    'rss::maker::rss09::items::item::links::link#to_feed()',
    'rss::maker::rss09::items::item::rights#to_feed()',
    'rss::maker::rss09::items::item::source#to_feed()',
    'rss::maker::rss09::items::item::source::authors#to_feed()',
    'rss::maker::rss09::items::item::source::categories#to_feed()',
    'rss::maker::rss09::items::item::source::contributors#to_feed()',
    'rss::maker::rss09::items::item::source::generator#to_feed()',
    'rss::maker::rss09::items::item::source::icon#to_feed()',
    'rss::maker::rss09::items::item::source::links#to_feed()',
    'rss::maker::rss09::items::item::source::logo#to_feed()',
    'rss::maker::rss09::items::item::source::rights#to_feed()',
    'rss::maker::rss09::items::item::source::subtitle#to_feed()',
    'rss::maker::rss09::items::item::source::title#to_feed()',
    'rss::maker::rss09::items::item::title#to_feed()',
    'rss::maker::rss09::textinput#to_feed()',
    'rss::maker::rss10::channel#to_feed()',
    'rss::maker::rss10::channel::authors#to_feed()',
    'rss::maker::rss10::channel::authors::author#to_feed()',
    'rss::maker::rss10::channel::categories#to_feed()',
    'rss::maker::rss10::channel::cloud#to_feed()',
    'rss::maker::rss10::channel::contributors#to_feed()',
    'rss::maker::rss10::channel::copyright#to_feed()',
    'rss::maker::rss10::channel::description#to_feed()',
    'rss::maker::rss10::channel::generator#to_feed()',
    'rss::maker::rss10::channel::links#to_feed()',
    'rss::maker::rss10::channel::links::link#to_feed()',
    'rss::maker::rss10::channel::skipdays#to_feed()',
    'rss::maker::rss10::channel::skiphours#to_feed()',
    'rss::maker::rss10::channel::title#to_feed()',
    'rss::maker::rss10::image#to_feed()',
    'rss::maker::rss10::items#to_feed()',
    'rss::maker::rss10::items::item#to_feed()',
    'rss::maker::rss10::items::item::authors#to_feed()',
    'rss::maker::rss10::items::item::categories#to_feed()',
    'rss::maker::rss10::items::item::content#to_feed()',
    'rss::maker::rss10::items::item::contributors#to_feed()',
    'rss::maker::rss10::items::item::description#to_feed()',
    'rss::maker::rss10::items::item::enclosure#to_feed()',
    'rss::maker::rss10::items::item::guid#to_feed()',
    'rss::maker::rss10::items::item::links#to_feed()',
    'rss::maker::rss10::items::item::rights#to_feed()',
    'rss::maker::rss10::items::item::source#to_feed()',
    'rss::maker::rss10::items::item::source::authors#to_feed()',
    'rss::maker::rss10::items::item::source::categories#to_feed()',
    'rss::maker::rss10::items::item::source::contributors#to_feed()',
    'rss::maker::rss10::items::item::source::generator#to_feed()',
    'rss::maker::rss10::items::item::source::icon#to_feed()',
    'rss::maker::rss10::items::item::source::links#to_feed()',
    'rss::maker::rss10::items::item::source::logo#to_feed()',
    'rss::maker::rss10::items::item::source::rights#to_feed()',
    'rss::maker::rss10::items::item::source::subtitle#to_feed()',
    'rss::maker::rss10::items::item::source::title#to_feed()',
    'rss::maker::rss10::items::item::title#to_feed()',
    'rss::maker::rss10::textinput#to_feed()',
    'rss::maker::rss20::channel::categories#to_feed()',
    'rss::maker::rss20::channel::categories::category#to_feed()',
    'rss::maker::rss20::channel::cloud#to_feed()',
    'rss::maker::rss20::channel::generator#to_feed()',
    'rss::maker::rss20::items::item::authors#to_feed()',
    'rss::maker::rss20::items::item::authors::author#to_feed()',
    'rss::maker::rss20::items::item::categories#to_feed()',
    'rss::maker::rss20::items::item::categories::category#to_feed()',
    'rss::maker::rss20::items::item::enclosure#to_feed()',
    'rss::maker::rss20::items::item::guid#to_feed()',
    'rss::maker::rss20::items::item::source#to_feed()',
    'rss::maker::rss20::items::item::source::links#to_feed()',
    'rss::maker::rss20::items::item::source::links::link#to_feed()',
    'rss::maker::rssbase#to_feed()',
    'rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#to_feed()',
    'rss::maker::xmlstylesheets::xmlstylesheet#to_feed()',
    'rss::rootelementmixin#to_feed()',
    'rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed_for_categories()',
    'gem::basicspecification#to_fullpath()',
    'env::to_h()',
    'json::ext::generator::state#to_h()',
    'openssl::x509::extension#to_h()',
    'csv::row#to_hash()',
    'env::to_hash()',
    'hashspecs::tohashhash#to_hash()',
    'json::ext::generator::state#to_hash()',
    'json::genericobject#to_hash()',
    'net::httpheader#to_hash()',
    'yaml::dbm#to_hash()',
    'rdoc::markup::tohtml#to_html()',
    'rdoc::text#to_html()',
    'rdoc::tokenstream::to_html()',
    'fiddle::closure#to_i()',
    'fiddle::function#to_i()',
    'fiddle::handle#to_i()',
    'fiddle::pointer#to_i()',
    'openssl::bn#to_i()',
    'process::status#to_i()',
    'webrick::httpstatus::status#to_i()',
    'drb::to_id()',
    'drb::drbidconv#to_id()',
    'drb::drbserver#to_id()',
    'fiddle::pointer#to_int()',
    'jisx0208::char#to_int()',
    'mathspecs::integer#to_int()',
    'openssl::bn#to_int()',
    'openssl::ssl::sslserver#to_io()',
    'zlib::gzipfile#to_io()',
    'json::ext::generator::generatormethods::array#to_json()',
    'json::ext::generator::generatormethods::bignum#to_json()',
    'json::ext::generator::generatormethods::falseclass#to_json()',
    'json::ext::generator::generatormethods::fixnum#to_json()',
    'json::ext::generator::generatormethods::float#to_json()',
    'json::ext::generator::generatormethods::hash#to_json()',
    'json::ext::generator::generatormethods::integer#to_json()',
    'json::ext::generator::generatormethods::nilclass#to_json()',
    'json::ext::generator::generatormethods::object#to_json()',
    'json::ext::generator::generatormethods::string#to_json()',
    'json::ext::generator::generatormethods::trueclass#to_json()',
    'json::genericobject#to_json()',
    'psych::to_json()',
    'json::ext::generator::generatormethods::string#to_json_raw()',
    'json::ext::generator::generatormethods::string#to_json_raw_object()',
    'uri::mailto#to_mailtext()',
    'resolv::ipv4#to_name()',
    'resolv::ipv6#to_name()',
    'drb::to_obj()',
    'drb::drbidconv#to_obj()',
    'drb::drbserver#to_obj()',
    'gem::package::tartestcase#to_oct()',
    'openssl::pkey::ec::point#to_octet_string()',
    'win32::sspi::identity#to_p()',
    'win32::sspi::securitybuffer#to_p()',
    'win32::sspi::securityhandle#to_p()',
    'win32::sspi::timestamp#to_p()',
    'openssl::netscape::spki#to_pem()',
    'openssl::pkcs7#to_pem()',
    'openssl::pkey::dh#to_pem()',
    'openssl::pkey::dsa#to_pem()',
    'openssl::pkey::ec#to_pem()',
    'openssl::pkey::ec::group#to_pem()',
    'openssl::pkey::rsa#to_pem()',
    'openssl::ssl::session#to_pem()',
    'openssl::x509::crl#to_pem()',
    'openssl::x509::certificate#to_pem()',
    'openssl::x509::request#to_pem()',
    'langsendspecs::toproc#to_proc()',
    'methodspecs::toproc#to_proc()',
    'methodspecs::toprocbeta#to_proc()',
    'fiddle::pointer::to_ptr()',
    'rationalspecs::subnumeric#to_r()',
    'gem::availableset#to_request_set()',
    'uri::mailto#to_rfc822text()',
    'rss::rootelementmixin#to_rss()',
    'gem::specification#to_ruby()',
    'psych::nodes::node#to_ruby()',
    'gem::specification#to_ruby_for_cache()',
    'benchmark::tms#to_s()',
    'cgi::cookie#to_s()',
    'csv::row#to_s()',
    'csv::table#to_s()',
    'digest::instance#to_s()',
    'env::to_s()',
    'exceptionspecs::emptytos#to_s()',
    'exceptionspecs::overridetos#to_s()',
    'fiddle::pointer#to_s()',
    'gem::platform#to_s()',
    'gem::requestset::lockfile#to_s()',
    'gem::resolver::activationrequest#to_s()',
    'gem::version#to_s()',
    'openssl::bn#to_s()',
    'openssl::config#to_s()',
    'openssl::hmac#to_s()',
    'openssl::netscape::spki#to_s()',
    'openssl::pkcs7#to_s()',
    'openssl::pkey::dh#to_s()',
    'openssl::pkey::dsa#to_s()',
    'openssl::pkey::rsa#to_s()',
    'openssl::x509::crl#to_s()',
    'openssl::x509::certificate#to_s()',
    'openssl::x509::extension#to_s()',
    'openssl::x509::name#to_s()',
    'openssl::x509::request#to_s()',
    'optionparser::parseerror#to_s()',
    'process::status#to_s()',
    'rdoc::generator::pot::po#to_s()',
    'rdoc::generator::pot::poentry#to_s()',
    'rexml::attribute#to_s()',
    'rexml::cdata#to_s()',
    'rexml::dtd::entitydecl#to_s()',
    'rexml::dtd::notationdecl#to_s()',
    'rexml::declaration#to_s()',
    'rexml::entity#to_s()',
    'rexml::externalentity#to_s()',
    'rexml::light::node#to_s()',
    'rexml::node#to_s()',
    'rexml::notationdecl#to_s()',
    'rexml::output#to_s()',
    'rexml::parseexception#to_s()',
    'rexml::text#to_s()',
    'rexml::validation::event#to_s()',
    'rexml::validation::ref#to_s()',
    'rexml::validation::state#to_s()',
    'rss::element#to_s()',
    'rss::xml::element#to_s()',
    'rss::xmlstylesheet#to_s()',
    'resolv::dns::name#to_s()',
    'shell::filter#to_s()',
    'socket::option#to_s()',
    'thread::backtrace::location#to_s()',
    'uri::ftp#to_s()',
    'uri::generic#to_s()',
    'uri::mailto#to_s()',
    'webrick::cookie#to_s()',
    'webrick::httputils::formdata#to_s()',
    'webrick::httpversion#to_s()',
    'win32::sspi::sspiresult#to_s()',
    'jisx0208::char#to_sjis()',
    'gem::basicspecification#to_spec()',
    'gem::dependency#to_spec()',
    'gem::specification#to_spec()',
    'gem::dependency#to_specs()',
    'evalspecs::coercedobject#to_str()',
    'fiddle::pointer#to_str()',
    'kernelspecs::b#to_str()',
    'kernelspecs::c#to_str()',
    'rexml::attribute#to_string()',
    'openssl::netscape::spki#to_text()',
    'openssl::pkey::dh#to_text()',
    'openssl::pkey::dsa#to_text()',
    'openssl::pkey::ec#to_text()',
    'openssl::pkey::ec::group#to_text()',
    'openssl::pkey::rsa#to_text()',
    'openssl::ssl::session#to_text()',
    'openssl::x509::crl#to_text()',
    'openssl::x509::certificate#to_text()',
    'openssl::x509::request#to_text()',
    'rdoc::markup::totableofcontents::to_toc()',
    'exception::to_tty?()',
    'openssl::x509::name#to_utf8()',
    'fiddle::pointer#to_value()',
    'rss::rootelementmixin#to_xml()',
    'psych::nodes::node#to_yaml()',
    'date::today()',
    'kconv::toeuc()',
    'kconv::tojis()',
    'win32::sspi::securitybuffer#token()',
    'rdoc::parser::rubytools#token_listener()',
    'rdoc::markup::parser#token_pos()',
    'rdoc::tokenstream#token_stream()',
    'racc::parser#token_to_str()',
    'psych::scalarscanner#tokenize()',
    'rdoc::markup::parser::tokenize()',
    'rdoc::markup::parser#tokenize()',
    'rdoc::tomdoc#tokenize()',
    'ripper::tokenize()',
    'rdoc::tokenstream#tokens_to_s()',
    'kconv::tolocale()',
    'rdoc::comment#tomdoc?()',
    'irb::frame#top()',
    'irb::frame::top()',
    'net::popmail#top()',
    'optionparser::top()',
    'rdoc::context#top_level()',
    'rdoc::require#top_level()',
    'shell::commandprocessor#top_level_test()',
    'irb::locale#toplevel_load()',
    'kconv::tosjis()',
    'zlib::zstream#total_in()',
    'zlib::zstream#total_out()',
    'gc::profiler::total_time()',
    'fileutils::touch()',
    'kconv::toutf16()',
    'kconv::toutf32()',
    'kconv::toutf8()',
    'net::http#trace()',
    'tracepoint::trace()',
    'irb::frame#trace_func()',
    'objectspace::trace_object_allocations()',
    'objectspace::trace_object_allocations_clear()',
    'objectspace::trace_object_allocations_debug_start()',
    'objectspace::trace_object_allocations_start()',
    'objectspace::trace_object_allocations_stop()',
    'rubyvm::instructionsequence#trace_points()',
    'bug::tracepoint_specify_normal_and_internal_events()',
    'bug::tracepoint_track_objspace_events()',
    'classspecs::h::track_inherited()',
    'modulespecs::autoload::ex1::trample1()',
    'modulespecs::autoload::ex1::trample2()',
    'shell::commandprocessor#transact()',
    'psych::nodes::node#transform()',
    'rdoc::i18n::locale#translate()',
    'rdoc::i18n::text#translate()',
    'rexml::functions::translate()',
    'signal::trap()',
    'gem::specification#traverse()',
    'openssl::asn1::traverse()',
    'gem::util::traverse_parents()',
    'psych::visitors::yamltree#tree()',
    'rexml::functions::true()',
    'file::truncate()',
    'rdoc::markup::tohtmlsnippet#truncate()',
    'gem::text#truncate_text()',
    'vcs::git#trunk()',
    'vcs::svn#trunk()',
    'openssl::x509::store#trust=()',
    'openssl::x509::storecontext#trust=()',
    'gem::security::trustdir#trust_cert()',
    'gem::security::trust_dir()',
    'gem::security::trusted_certificates()',
    'gem::try_activate()',
    'array::try_convert()',
    'hash::try_convert()',
    'io::try_convert()',
    'regexp::try_convert()',
    'string::try_convert()',
    'gem::resolver::molinillo::dependencygraph::tsort()',
    'tsort::tsort()',
    'tsort::tsort_each()',
    'gem::dependencylist#tsort_each_child()',
    'gem::resolver::molinillo::dependencygraph#tsort_each_child()',
    'gem::dependencylist#tsort_each_node()',
    'gem::resolver::molinillo::dependencygraph#tsort_each_node()',
    'rdoc::markup::formatter#tt?()',
    'rdoc::markup::tottonly#tt_sections()',
    'gem::mockgemui::tty#tty?()',
    'gem::streamui#tty?()',
    'unboundmethodspecs::methods#two()',
    'blockspecs::yield#two_arg_array()',
    'blockspecs::yield#two_args()',
    'methodspecs::methods#two_req()',
    'methodspecs::methods#two_req_one_opt()',
    'methodspecs::methods#two_req_one_opt_with_block()',
    'methodspecs::methods#two_req_one_opt_with_splat()',
    'methodspecs::methods#two_req_one_opt_with_splat_and_block()',
    'methodspecs::methods#two_req_with_block()',
    'methodspecs::methods#two_req_with_splat()',
    'methodspecs::methods#two_req_with_splat_and_block()',
    'langsendspecs::twos()',
    'gem::dependency#type()',
    'gem::resolver::dependencyrequest#type()',
    'netftpspecs::dummyftp#type()',
    'objectspace::internalobjectwrapper#type()',
    'openssl::pkcs7#type()',
    'rdoc::classmodule#type()',
    'rdoc::methodattr#type()',
    'socket::ancillarydata#type()',
    'win32::registry::type2name()',
    'openssl::pkcs7#type=()',
    'net::httpheader#type_params()',
    'fiddle::importer#typealias()',
    'uri::ftp#typecode=()',
    'win32ole_type::typelibs()',
    'win32ole_typelib::typelibs()',
    'erb::util::u()',
    'matrix::lupdecomposition#u()',
    'openssl::bn#ucmp()',
    'addrinfo::udp()',
    'socket::udp_server_loop()',
    'socket::udp_server_loop_on()',
    'socket::udp_server_recv()',
    'socket::udp_server_sockets()',
    'gem::ui()',
    'gem::defaultuserinteraction::ui()',
    'gem::defaultuserinteraction#ui()',
    'gem::defaultuserinteraction::ui=()',
    'gem::defaultuserinteraction#ui=()',
    'file::stat#uid()',
    'process::uid()',
    'process::uid=()',
    'net::imap#uid_copy()',
    'net::imap#uid_fetch()',
    'net::imap#uid_move()',
    'net::imap#uid_search()',
    'net::imap#uid_sort()',
    'net::imap#uid_store()',
    'net::imap#uid_thread()',
    'net::popmail#uidl()',
    'file::umask()',
    'webrick::httpserver#umount()',
    'shell::unalias_command()',
    'shell::commandprocessor::unalias_command()',
    'actionmap::unambiguous_action()',
    'etc::uname()',
    'shell::undef_system_command()',
    'shell::commandprocessor::undef_system_command()',
    'modulespecs::child#undefed_child()',
    'kernelspecs::a#undefed_method()',
    'modulespecs::parent#undefed_method()',
    'objectspace::undefine_finalizer()',
    'downloader::under()',
    'super::s6#under()',
    'rdoc::stats#undoc_params()',
    'cgi::escape#unescape()',
    'cgi::util#unescape()',
    'gem::uriformatter#unescape()',
    'uri::escape#unescape()',
    'uri::rfc2396_parser#unescape()',
    'webrick::httputils#unescape()',
    'cgi::util#unescapeelement()',
    'cgi::escape#unescapehtml()',
    'cgi::util#unescapehtml()',
    'cgi::util#unescape_element()',
    'webrick::httputils#unescape_form()',
    'cgi::util#unescape_html()',
    'rdoc::markup::parser#unget()',
    'rdoc::parser::rubytools#unget_tk()',
    'zlib::gzipreader#ungetbyte()',
    'openssl::buffering#ungetc()',
    'zlib::gzipreader#ungetc()',
    'mspec::unguard()',
    'gem::uninstaller#uninstall()',
    'gem::commands::uninstallcommand#uninstall_all()',
    'gem::commands::cleanupcommand#uninstall_dep()',
    'gem::testcase#uninstall_gem()',
    'gem::uninstaller#uninstall_gem()',
    'gem::commands::setupcommand#uninstall_old_gemcutter()',
    'gem::commands::uninstallcommand#uninstall_specific()',
    'fiddle::importer#union()',
    'regexp::union()',
    'enumerator::lazy#uniq()',
    'rdoc::store#unique_classes()',
    'rdoc::store#unique_classes_and_modules()',
    'net::popmail#unique_id()',
    'rdoc::store#unique_modules()',
    'matrix::unit()',
    'arrayspecs::universal_pack_object()',
    'addrinfo::unix()',
    'socket::unix()',
    'socket::ancillarydata::unix_rights()',
    'socket::ancillarydata#unix_rights()',
    'socket::unix_server_loop()',
    'socket::unix_server_socket()',
    'syslog::logger#unknown()',
    'dir::unlink()',
    'file::unlink()',
    'shell::commandprocessor#unlink()',
    'rubyvm::instructionsequence::unlink_compiled_iseq()',
    'rubyvm::instructionsequence::dbmstorage#unlink_compiled_iseq()',
    'rubyvm::instructionsequence::fsstorage#unlink_compiled_iseq()',
    'rubyvm::instructionsequence::nullstorage#unlink_compiled_iseq()',
    'net::http#unlock()',
    'rdoc::markup::attributemanager#unmask_protected_sequences()',
    'webrick::httpserver#unmount()',
    'rexml::parsers::baseparser#unnormalize()',
    'rexml::entity#unnormalized()',
    'bug::unp_st_foreach()',
    'bug::unp_st_foreach_check()',
    'gem::unpack()',
    'gem::installer#unpack()',
    'socket::option#unpack()',
    'arrayspec::splat#unpack_3args()',
    'arrayspec::splat#unpack_4args()',
    'socket::unpack_sockaddr_in()',
    'socket::unpack_sockaddr_un()',
    'win32::registry::api#unpackdw()',
    'win32::registry::api#unpackhandle()',
    'win32::registry::api#unpackqw()',
    'squigglyheredocspecs::unquoted()',
    'drb::extservmanager#unregist()',
    'mspec::unregister()',
    'gem::commandmanager#unregister_command()',
    'gem::specification::unresolved_deps()',
    'gem::testcase#unresolved_names()',
    'gem::configfile#unset_api_key!()',
    'gem::requestset::lockfile::tokenizer#unshift()',
    'rexml::parent#unshift()',
    'rexml::parsers::baseparser#unshift()',
    'rexml::parsers::pullparser#unshift()',
    'net::imap#unsubscribe()',
    'nextspecs::until_next()',
    'nextspecs::until_within_iter()',
    'zlib::gzipreader#unused()',
    'gem::resolver::molinillo::dependencygraph::action#up()',
    'gem::resolver::molinillo::dependencygraph::addedgenocircular#up()',
    'gem::resolver::molinillo::dependencygraph::deleteedge#up()',
    'gem::resolver::molinillo::dependencygraph::detachvertexnamed#up()',
    'gem::resolver::molinillo::dependencygraph::tag#up()',
    'cgi::session#update()',
    'cgi::session::filestore#update()',
    'cgi::session::memorystore#update()',
    'cgi::session::nullstore#update()',
    'cgi::session::pstore#update()',
    'checksum::update()',
    'digest::base#update()',
    'digest::instance#update()',
    'digest::sha2#update()',
    'env::update()',
    'gem::streamui::silentdownloadreporter#update()',
    'gem::streamui::verbosedownloadreporter#update()',
    'openssl::cipher#update()',
    'openssl::digest#update()',
    'openssl::hmac#update()',
    'yaml::dbm#update()',
    'rdoc::classmodule#update_aliases()',
    'gem::source#update_cache?()',
    'gem::package::tarheader#update_checksum()',
    'rdoc::classmodule#update_extends()',
    'gem::commands::updatecommand#update_gem()',
    'gem::commands::updatecommand#update_gems()',
    'rdoc::classmodule#update_includes()',
    'gem::indexer#update_index()',
    'rdoc::rdoc#update_output_dir()',
    'gem::commands::updatecommand#update_rubygems()',
    'gem::indexer#update_specs_index()',
    'gem::streamui::silentprogressreporter#updated()',
    'gem::streamui::simpleprogressreporter#updated()',
    'gem::streamui::verboseprogressreporter#updated()',
    'rss::maker::channelbase#updated()',
    'rss::maker::itemsbase::itembase#updated()',
    'rss::maker::itemsbase::itembase::sourcebase#updated()',
    'rss::maker::channelbase#updated=()',
    'rss::maker::itemsbase::itembase#updated=()',
    'rss::maker::itemsbase::itembase::sourcebase#updated=()',
    'rdoc::context#upgrade_to_class()',
    'win32::sspi::securityhandle#upper()',
    'prime::pseudoprimegenerator#upper_bound()',
    'prime::pseudoprimegenerator#upper_bound=()',
    'fileutils::uptodate?()',
    'random::urandom()',
    'drb::uri()',
    'gem::server#uri_encode()',
    'drb::drbprotocol::uri_option()',
    'drb::http0::uri_option()',
    'rss::baselistener::uri_registered?()',
    'vcs::svn#url()',
    'erb::util::url_encode()',
    'random::formatter#urlsafe_base64()',
    'gem::command#usage()',
    'rubyvm::sourcecodegenerator#use_const?()',
    'modulespecs::autoload::use_ex1()',
    'gem::use_gemdeps()',
    'irb::context#use_loader()',
    'irb::context#use_loader=()',
    'irb::context#use_loader?()',
    'rdoc::parser::use_markup()',
    'gem::use_paths()',
    'rdoc::markup::tordoc#use_prefix()',
    'irb::context#use_readline=()',
    'net::http#use_ssl=()',
    'net::http#use_ssl?()',
    'net::pop3::use_ssl?()',
    'net::pop3#use_ssl?()',
    'processspecs::use_system_ruby()',
    'irb::context#use_tracer=()',
    'gem::defaultuserinteraction::use_ui()',
    'gem::defaultuserinteraction#use_ui()',
    'module::used_modules()',
    'netftpspecs::dummyftp#user()',
    'uri::generic#user()',
    'uri::generic#user=()',
    'gem::request#user_agent()',
    'gem::user_dir()',
    'gem::user_home()',
    'uri::generic#userinfo()',
    'uri::generic#userinfo=()',
    'time::utc()',
    'gem::testcase#util_build_gem()',
    'gem::testcase#util_clear_gems()',
    'gem::package::tartestcase#util_dir_entry()',
    'gem::package::tartestcase#util_entry()',
    'gem::testcase#util_gem()',
    'gem::testcase#util_gzip()',
    'gem::installertestcase#util_inst_bindir()',
    'gem::installertestcase#util_installer()',
    'gem::installertestcase#util_make_exec()',
    'gem::testcase#util_make_gems()',
    'gem::testcase#util_remove_gem()',
    'gem::testcase#util_restore_ruby_version()',
    'gem::testcase#util_set_ruby_version()',
    'gem::testcase#util_set_arch()',
    'gem::testcase#util_setup_fake_fetcher()',
    'gem::installertestcase#util_setup_gem()',
    'gem::testcase#util_setup_spec_fetcher()',
    'gem::testcase#util_spec()',
    'gem::package::tartestcase#util_symlink_entry()',
    'gem::testcase#util_zip()',
    'file::utime()',
    'random::formatter#uuid()',
    'gem::testcase#v()',
    'matrix::eigenvaluedecomposition#v()',
    'matrix::eigenvaluedecomposition#v_inv()',
    'rss::element#valid?()',
    'date::valid_civil?()',
    'date::valid_commercial?()',
    'date::valid_date?()',
    'date::valid_jd?()',
    'net::imap::numvalidator::valid_mod_sequence_value?()',
    'net::imap::numvalidator::valid_number?()',
    'net::imap::numvalidator::valid_nz_number?()',
    'date::valid_ordinal?()',
    'gem::specification#validate()',
    'rexml::validation::validator#validate()',
    'rss::element#validate()',
    'rss::atom::duplicatelinkchecker#validate_duplicate_links()',
    'rss::element#validate_for_stream()',
    'gem::specification#validate_metadata()',
    'rss::imagemodelutils#validate_one_tag_name()',
    'gem::specification#validate_permissions()',
    'cgi::cookie#value()',
    'fiddle::importer#value()',
    'net::httpresponse#value()',
    'openssl::x509::attribute#value()',
    'openssl::x509::extension#value()',
    'rexml::attribute#value()',
    'rexml::cdata#value()',
    'rexml::entity#value()',
    'rexml::text#value()',
    'rinda::tuple#value()',
    'rinda::tupleentry#value()',
    'cgi::cookie#value=()',
    'openssl::x509::attribute#value=()',
    'openssl::x509::extension#value=()',
    'rexml::text#value=()',
    'rss::itunesitemmodel::itunesduration#value=()',
    'env::value?()',
    'env::values()',
    'objectspace::weakmap#values()',
    'win32::registry#values()',
    'yaml::dbm#values()',
    'csv::row#values_at()',
    'csv::table#values_at()',
    'env::values_at()',
    'yaml::dbm#values_at()',
    'bug::scanargs::var()',
    'bug::scanargs::var_hash()',
    'bug::scanargs::var_trail()',
    'bug::scanargs::var_trail_hash()',
    'rss::maker::base#variable_is_set?()',
    'rexml::functions::variables()',
    'rexml::functions::variables=()',
    'rexml::xpathparser#variables=()',
    'gem::testcase::vc_windows?()',
    'gem::testcase#vc_windows?()',
    'gem::testcase#vendor_gem()',
    'bigdecimal::ver()',
    'rdoc::testcase#verb()',
    'drb::drbserver::verbose()',
    'drb::drbserver#verbose()',
    'gem::userinteraction#verbose()',
    'drb::drbserver::verbose=()',
    'drb::drbserver#verbose=()',
    'irb::context#verbose?()',
    'rubyvm::sourcecodegenerator#verbose?()',
    'rdoc::testcase#verbose_capture_io()',
    'gem::package#verify()',
    'gem::package::old#verify()',
    'gem::security::policy#verify()',
    'gem::security::trustdir#verify()',
    'net::pop3::verify()',
    'openssl::netscape::spki#verify()',
    'openssl::ocsp::basicresponse#verify()',
    'openssl::ocsp::request#verify()',
    'openssl::pkcs7#verify()',
    'openssl::pkey::pkey#verify()',
    'openssl::x509::crl#verify()',
    'openssl::x509::certificate#verify()',
    'openssl::x509::request#verify()',
    'openssl::x509::store#verify()',
    'openssl::x509::storecontext#verify()',
    'gem::gemcutterutilities#verify_api_key()',
    'mock::verify_call()',
    'openssl::x509::store#verify_callback=()',
    'gem::request::verify_certificate()',
    'openssl::ssl::verify_certificate_identity()',
    'gem::request::verify_certificate_message()',
    'mock::verify_count()',
    'gem::package#verify_entry()',
    'gem::package#verify_files()',
    'gem::validator#verify_gem()',
    'gem::validator#verify_gem_file()',
    'gc::verify_internal_consistency()',
    'openssl::pkey::rsa#verify_pss()',
    'openssl::ssl::sslsocket#verify_result()',
    'gem::security::policy#verify_signatures()',
    'gem::installer#verify_spec_name()',
    'erb::version()',
    'gem::basicspecification#version()',
    'gem::resolver::activationrequest#version()',
    'gem::resolver::specspecification#version()',
    'gem::unsatisfiabledependencyerror#version()',
    'gem::version#version()',
    'irb::version()',
    'openssl::x509::crl#version()',
    'openssl::x509::certificate#version()',
    'openssl::x509::request#version()',
    'rexml::document#version()',
    'gem::specification#version=()',
    'openssl::x509::crl#version=()',
    'openssl::x509::certificate#version=()',
    'openssl::x509::request#version=()',
    'net::http::version_1_2()',
    'net::http::version_1_2?()',
    'rss::maker::versions()',
    'gem::resolver::molinillo::dependencygraph#vertex_named()',
    'socket::ifaddr#vhid()',
    'readline::vi_editing_mode()',
    'readline::vi_editing_mode?()',
    'webrick::httpserver#virtual_host()',
    'rdoc::options#visibility=()',
    'psych::visitors::yamltree#visit_array()',
    'psych::visitors::yamltree#visit_basicobject()',
    'psych::visitors::yamltree#visit_bigdecimal()',
    'psych::visitors::yamltree#visit_class()',
    'psych::visitors::yamltree#visit_complex()',
    'psych::visitors::yamltree#visit_date()',
    'psych::visitors::yamltree#visit_datetime()',
    'psych::visitors::yamltree#visit_delegator()',
    'psych::visitors::yamltree#visit_encoding()',
    'psych::visitors::yamltree#visit_enumerator()',
    'psych::visitors::yamltree#visit_exception()',
    'psych::visitors::yamltree#visit_falseclass()',
    'psych::visitors::yamltree#visit_float()',
    'psych::visitors::yamltree#visit_hash()',
    'psych::visitors::yamltree#visit_integer()',
    'psych::visitors::yamltree#visit_module()',
    'psych::visitors::yamltree#visit_nameerror()',
    'psych::visitors::yamltree#visit_nilclass()',
    'psych::visitors::yamltree#visit_object()',
    'psych::visitors::emitter#visit_psych_nodes_alias()',
    'psych::visitors::noaliasruby#visit_psych_nodes_alias()',
    'psych::visitors::toruby#visit_psych_nodes_alias()',
    'psych::visitors::emitter#visit_psych_nodes_document()',
    'psych::visitors::toruby#visit_psych_nodes_document()',
    'psych::visitors::emitter#visit_psych_nodes_mapping()',
    'psych::visitors::toruby#visit_psych_nodes_mapping()',
    'psych::visitors::emitter#visit_psych_nodes_scalar()',
    'psych::visitors::toruby#visit_psych_nodes_scalar()',
    'psych::visitors::emitter#visit_psych_nodes_sequence()',
    'psych::visitors::toruby#visit_psych_nodes_sequence()',
    'psych::visitors::emitter#visit_psych_nodes_stream()',
    'psych::visitors::toruby#visit_psych_nodes_stream()',
    'psych::visitors::yamltree#visit_psych_omap()',
    'psych::visitors::yamltree#visit_psych_set()',
    'psych::visitors::yamltree#visit_range()',
    'psych::visitors::yamltree#visit_rational()',
    'psych::visitors::yamltree#visit_regexp()',
    'gem::noaliasyamltree#visit_string()',
    'psych::visitors::yamltree#visit_string()',
    'psych::visitors::yamltree#visit_struct()',
    'psych::visitors::yamltree#visit_symbol()',
    'psych::visitors::yamltree#visit_time()',
    'psych::visitors::yamltree#visit_trueclass()',
    'net::ftp#voidcmd()',
    'rubyvm::sourcecodegenerator#vpath()',
    'matrix::vstack()',
    'time::w3cdtf()',
    'monitormixin::conditionvariable#wait()',
    'process::wait()',
    'rinda::waittemplateentry#wait()',
    'process::wait2()',
    'shell::builtincommand#wait?()',
    'shell::systemcommand#wait?()',
    'shell::processcontroller#wait_all_jobs_execution()',
    'gem::testcase#wait_for_child_process_to_exit()',
    'processspecs::daemonizer#wait_for_daemon()',
    'io::wait_for_single_fd()',
    'processspecs::signalizer#wait_on_result()',
    'shell::processcontroller::wait_to_finish_all_process_controllers()',
    'monitormixin::conditionvariable#wait_until()',
    'monitormixin::conditionvariable#wait_while()',
    'process::waitall()',
    'debugger__::waiting()',
    'shell::processcontroller#waiting_job?()',
    'shell::processcontroller#waiting_jobs()',
    'shell::processcontroller#waiting_jobs_exist?()',
    'process::waitpid()',
    'process::waitpid2()',
    'threadspecs::wakeup_dying_sleeping_thread()',
    'rdoc::options#warn()',
    'rdoc::parser::ruby#warn()',
    'syslog::logger#warn()',
    'webrick::basiclog#warn()',
    'warning::warn()',
    'webrick::basiclog#warn?()',
    'vcs::svn#wcroot()',
    'super::anonymousmoduleincludedtwicebase::whatever()',
    'gem::command#when_invoked()',
    'gem::commands::updatecommand#which_to_update()',
    'nextspecs::while_next()',
    'nextspecs::while_within_iter()',
    'languagespecs::white_spaces()',
    'rexml::element#whitespace()',
    'gem::dependencylist#why_not_ok?()',
    'fiddle::win32_last_error()',
    'fiddle::win32_last_error=()',
    'win32::registry::api#win64?()',
    'gem::win_platform=()',
    'gem::win_platform?()',
    'gem::testcase::win_platform?()',
    'gem::testcase#win_platform?()',
    'platformguard::windows?()',
    'gem::installer#windows_stub_script()',
    'optionparser::with()',
    'unboundmethodspecs::methods#with_block()',
    'prime::pseudoprimegenerator#with_index()',
    'bigdecimalspecs::with_limit()',
    'prime::pseudoprimegenerator#with_object()',
    'gem::gemcutterutilities#with_response()',
    'bigdecimalspecs::with_rounding()',
    'gem::bundlerversionfinder::without_filtering()',
    'variablesspecs::chain::without_parenthesis()',
    'modulespecs::without_test_modules()',
    'platformguard::wordsize?()',
    'gem::platformmismatch#wordy()',
    'gem::sourcefetchproblem#wordy()',
    'irb::context#workspaces()',
    'file::world_readable?()',
    'file::stat#world_readable?()',
    'file::world_writable?()',
    'file::stat#world_writable?()',
    'enumerablespecs::comparesbyvowelcount::wrap()',
    'gem::command#wrap()',
    'gem::package::digestio::wrap()',
    'json::jsonerror::wrap()',
    'rdoc::markup::tordoc#wrap()',
    'rdoc::text#wrap()',
    'rexml::text#wrap()',
    'zlib::gzipfile::wrap()',
    'file::writable?()',
    'file::stat#writable?()',
    'net::ftp::mlsxentry#writable?()',
    'file::writable_real?()',
    'file::stat#writable_real?()',
    'drb::http0::strstream#write()',
    'gem::configfile#write()',
    'gem::package::digestio#write()',
    'gem::package::tarwriter::boundedstream#write()',
    'gem::package::tarwriter::restrictedstream#write()',
    'gem::requestset::lockfile#write()',
    'gem::security::write()',
    'io::write()',
    'logger::logdevice#write()',
    'net::writeadapter#write()',
    'openssl::buffering#write()',
    'processspecs::daemon#write()',
    'rexml::attlistdecl#write()',
    'rexml::attribute#write()',
    'rexml::cdata#write()',
    'rexml::comment#write()',
    'rexml::dtd::entitydecl#write()',
    'rexml::dtd::notationdecl#write()',
    'rexml::declaration#write()',
    'rexml::doctype#write()',
    'rexml::document#write()',
    'rexml::element#write()',
    'rexml::entity#write()',
    'rexml::externalentity#write()',
    'rexml::formatters::default#write()',
    'rexml::instruction#write()',
    'rexml::notationdecl#write()',
    'rexml::text#write()',
    'rexml::xmldecl#write()',
    'rinda::tuplespace#write()',
    'rinda::tuplespaceproxy#write()',
    'warning::buffer#write()',
    'win32::registry#write()',
    'zlib::gzipwriter#write()',
    'win32::registry#write_bin()',
    'gem::write_binary()',
    'gem::installer#write_build_info_file()',
    'gem::installer#write_cache_file()',
    'rbinstall::unpackedinstaller#write_cache_file()',
    'rexml::formatters::default#write_cdata()',
    'rexml::formatters::pretty#write_cdata()',
    'rexml::formatters::default#write_comment()',
    'rexml::formatters::pretty#write_comment()',
    'gem::installer#write_default_spec()',
    'rexml::formatters::default#write_document()',
    'rexml::formatters::pretty#write_document()',
    'rexml::formatters::default#write_element()',
    'rexml::formatters::pretty#write_element()',
    'rexml::formatters::transitive#write_element()',
    'gem::testcase#write_file()',
    'win32::registry#write_i()',
    'rexml::formatters::default#write_instruction()',
    'io::generic_writable#write_nonblock()',
    'openssl::buffering#write_nonblock()',
    'rdoc::options#write_options()',
    'openssl::random::write_random_file()',
    'win32::registry#write_s()',
    'rinda::ringserver#write_services()',
    'openssl::pkcs7::write_smime()',
    'gem::installer#write_spec()',
    'rdoc::generator::darkfish#write_style_sheet()',
    'mspec::write_tag()',
    'mspec::write_tags()',
    'rexml::formatters::default#write_text()',
    'rexml::formatters::pretty#write_text()',
    'rexml::formatters::transitive#write_text()',
    'rexml::text#write_with_substitution()',
    'resolv::wscontrol::wsctl()',
    'win32::registry::wtime2time()',
    'stringspecs::iso88599encoding#x_escape()',
    'rss::atom::feed::entry::content#xhtml()',
    'rss::atom::textconstruct#xhtml()',
    'rss::maker::atomtextconstructbase::ensurexmlcontent#xhtml=()',
    'net::imap#xlist()',
    'rss::atom::feed::entry::content#xml()',
    'rss::maker::itemsbase::itembase::contentbase#xml=()',
    'rss::rexmllikexmlparser#xmldecl()',
    'rss::maker::atomtextconstructbase::ensurexmlcontent#xml_content=()',
    'rss::maker::itemsbase::itembase::contentbase#xml_content=()',
    'rexml::document#xml_decl()',
    'rss::atom::feed::entry::content::xml_getter()',
    'rss::atom::textconstruct::xml_getter()',
    'rss::atom::feed::entry::content::xml_setter()',
    'rss::atom::textconstruct::xml_setter()',
    'rexml::sax2listener#xmldecl()',
    'rexml::streamlistener#xmldecl()',
    'rexml::xmldecl#xmldecl()',
    'rss::listenermixin#xmldecl()',
    'rss::rexmllistener#xmldecl()',
    'rss::xmlparserlistener#xmldecl()',
    'rexml::parsers::pullevent#xmldecl?()',
    'date::xmlschema()',
    'datetime::xmlschema()',
    'time::xmlschema()',
    'rexml::attribute#xpath()',
    'rexml::element#xpath()',
    'rexml::text#xpath()',
    'psych::nodes::node#yaml()',
    'object::yaml_tag()',
    'gem::commands::yankcommand#yank_gem()',
    'fiber::yield()',
    'bug::iter::yield#yield_block()',
    'definedspecs::basic#yield_block()',
    'definedspecs::basic#yield_block_parameter()',
    'definedspecs::basic#yield_defined_method()',
    'definedspecs::basic#yield_defined_parameter_method()',
    'definedspecs::superclass#yield_method()',
    'blockspecs::yield#yield_splat_inside_block()',
    'blockspecs::yield#yield_this()',
    'breakspecs::block#yielding()',
    'nextspecs::yielding()',
    'nextspecs::yielding_method()',
    'returnspecs::blocks#yielding_method()',
    'racc::parser#yyaccept()',
    'racc::parser#yyerrok()',
    'racc::parser#yyerror()',
    'racc::parser#yyparse()',
    'blockspecs::yielder#z()',
    'yieldspecs::yielder#z()',
    'yieldspecs::yielder#ze()',
    'matrix::zero()',
    'methodspecs::methods#zero()',
    'vector::zero()',
    'file::zero?()',
    'file::stat#zero?()',
    'openssl::bn#zero?()',
    'methodspecs::methods#zero_with_block()',
    'methodspecs::methods#zero_with_splat()',
    'methodspecs::methods#zero_with_splat_and_block()',
    'enumerator::lazy#zip()',
    'rdoc::parser::zip?()',
    'zlib::zlib_version()',
    'time::zone_offset()',
    'json::genericobject#|()',
    'shell::filter#|()',
]);
const VERSION = '2.5.1';

const missingFilelMsg = 'Missing file: ';
const couldNotOpenMsg = 'Could Not Open file: ';
const SYMBOL_END = '[^\\w]';
function wordsToPath(s) {
    return index.underscore(s.replace(/[A-Z]{2,}(?![a-z])/, (s) => {
        return index.titleize(s);
    }));
}
function getConcernsFilePath(lineStartToWord, fileT) {
    const concern = lineStartToWord.replace(PATTERNS.INCLUDE_DECLARATION, ''), seq = concern.split('::').map(wordsToPath);
    if (seq[0] === 'concerns')
        delete seq[0];
    const sub = seq.slice(0, -1).join(path.sep), name = seq[seq.length - 1], fileType = FileTypeRelPath.get(fileT), filePath = path.join(fileType, sub, name + '.rb');
    return filePath;
}
function findClassInDocumentCallback(name, document) {
    const line = document
        .getText()
        .split('\n')
        .findIndex((line) => new RegExp('^class\\s+(((::)?[A-Za-z]+)*(::)?' + name + ')' + SYMBOL_END).test(line.trim())), definitionInformation = {
        file: document.uri.fsPath,
        line: Math.max(line, 0),
        column: 0,
    };
    return Promise.resolve(definitionInformation);
}
async function getLibOrModelFilePath(lineStartToWord, word) {
    const symbol = new RegExp('(((::)?[A-Za-z]+)*(::)?' + word + ')').exec(lineStartToWord)[1];
    const seq = symbol
        .split('::')
        .map(wordsToPath)
        .filter((v) => v !== ''), sub = seq.slice(0, -1).join(path.sep), name = seq[seq.length - 1], filePathInModels = path.join(REL_MODELS, '**', sub, name + '.rb'), filePathInLib = name ? path.join('lib', sub, name + '.rb') : '', 
    // fileModulePathInLib = name ? path.join("lib", name + ".rb") : "",
    thePath = sub
        ? path.join(vscode.workspace.rootPath, 'lib', sub + '.rb')
        : '', demodulized = index.demodulize(symbol), funcOrClass = demodulized.indexOf('.') !== -1 ? demodulized.split('.')[1] : demodulized, regPrefix = PATTERNS.CAPITALIZED.test(funcOrClass)
        ? 'class\\s+'
        : 'def\\s+', reg = new RegExp(regPrefix + funcOrClass + SYMBOL_END);
    const findInLib = vscode.workspace.findFiles(filePathInLib, null, 1).then((uris) => {
        if (!uris.length) {
            return thePath
                ? Promise.resolve(findFunctionOrClassByClassNameInFile(thePath, reg))
                : Promise.resolve(null);
        }
        return vscode.workspace
            .openTextDocument(uris[0])
            .then(findClassInDocumentCallback.bind(null, name), () => {
            return Promise.reject(couldNotOpenMsg + filePathInLib);
        });
    }, () => {
        return thePath
            ? Promise.resolve(findFunctionOrClassByClassNameInFile(thePath, reg))
            : Promise.resolve(null);
    });
    try {
        const uris = await vscode.workspace.findFiles(filePathInModels, null, 1);
        if (!uris.length) {
            return filePathInLib ? findInLib : Promise.resolve(null);
        }
        return vscode.workspace
            .openTextDocument(uris[0])
            .then(findClassInDocumentCallback.bind(null, name), () => {
            return Promise.reject(couldNotOpenMsg + filePathInModels);
        });
    }
    catch (e) {
        return filePathInLib ? findInLib : Promise.resolve(null);
    }
}
function findLocationByWord(document, position, word, lineStartToWord) {
    if (PATTERNS.CAPITALIZED.test(word)) {
        return getLibOrModelFilePath(lineStartToWord, word);
    }
    else {
        const fileNameWithoutSuffix = path.parse(document.fileName).name, controllerName = index.camelize(fileNameWithoutSuffix);
        return findFunctionOrClassByClassName(document, position, word, controllerName);
    }
}
/**
 * get view glob
 * @returns glob path or null
 */
function findViews(document, position, word, lineStartToWord) {
    let filePath;
    const lineText = document.lineAt(position.line).text.trim(), match1 = lineStartToWord.match(PATTERNS.RENDER_MATCH), match1id = match1[match1.length - 1], match2 = lineText.match(PATTERNS.RENDER_MATCH), idIndex = match2.findIndex((v) => v.includes(match1id)), id = match2[idIndex], preWord = match2[idIndex - 1];
    console.log(match1, match2, id, preWord);
    if (preWord === 'render' &&
        ['template', 'partial', 'layout', 'json', 'html'].indexOf(id) !== -1) {
        return null;
    }
    const viewPath = path.parse(id).dir + path.sep + '*' + path.parse(id).name + '.*', sub = id.indexOf('/') !== -1
        ? ''
        : vscode.workspace
            .asRelativePath(document.fileName)
            .substring(REL_CONTROLLERS.length + 1)
            .replace('_controller.rb', '');
    if (preWord === 'layout') {
        filePath = path.join(REL_LAYOUTS, viewPath);
    }
    else {
        filePath = path.join(REL_VIEWS, sub, viewPath);
    }
    console.log(preWord, filePath, match1id, id);
    return filePath;
}
function controllerDefinitionLocation(document, position, word, lineStartToWord) {
    const definitionInformation = {
        file: null,
        line: 0,
        column: 0,
    };
    // if (PATTERNS.CLASS_INHERIT_DECLARATION.test(lineStartToWord)) {
    //   // exclude = REL_CONTROLLERS
    //   // if (parentController === "ActionController::Base") {
    //   // 	//@todo provide rails online doc link
    //   // 	return Promise.reject(missingToolMsg + 'godef');
    //   // }
    //   let filePath = getParentControllerFilePathByDocument(
    //     document,
    //     lineStartToWord
    //   );
    //   definitionInformation.file = filePath;
    // } else
    if (PATTERNS.FUNCTION_DECLARATON.test(lineStartToWord) &&
        !PATTERNS.PARAMS_DECLARATION.test(word)) {
        const sameModuleControllerSub = path.dirname(vscode.workspace
            .asRelativePath(document.fileName)
            .substring(REL_CONTROLLERS.length + 1)), filePath = path.join(REL_VIEWS, sameModuleControllerSub, path.basename(document.fileName).replace(/_controller\.rb$/, ''), word + '.*'), upperText = document.getText(new vscode.Range(new vscode.Position(0, 0), position)), isPrivateMethod = /\s*private/.test(upperText);
        if (isPrivateMethod) {
            return Promise.resolve(null);
        }
        definitionInformation.file = filePath;
    }
    else if (PATTERNS.INCLUDE_DECLARATION.test(lineStartToWord)) {
        definitionInformation.file = getConcernsFilePath(lineStartToWord, FileType.ControllerConcerns);
        // } else if (PATTERNS.CAPITALIZED.test(word)) {
        //   //lib or model combination
        //   return getLibOrModelFilePath(lineStartToWord, word);
    }
    else if (PATTERNS.PARAMS_DECLARATION.test(word)) {
        const filePath = document.fileName, line = document
            .getText()
            .split('\n')
            .findIndex((line) => new RegExp('^def\\s+' + word + SYMBOL_END).test(line.trim()));
        definitionInformation.file = filePath;
        definitionInformation.line = line;
    }
    else if (PATTERNS.LAYOUT_DECLARATION.test(lineStartToWord)) {
        const layoutPath = PATTERNS.LAYOUT_MATCH.exec(lineStartToWord)[2];
        definitionInformation.file = path.join(REL_LAYOUTS, layoutPath + '.*');
    }
    else if (PATTERNS.RENDER_DECLARATION.test(lineStartToWord) ||
        PATTERNS.RENDER_TO_STRING_DECLARATION.test(lineStartToWord)) {
        definitionInformation.file = findViews(document, position, word, lineStartToWord);
    }
    else if (PATTERNS.CONTROLLER_FILTERS.test(lineStartToWord)) {
        const fileNameWithoutSuffix = path.parse(document.fileName).name, controllerName = index.camelize(fileNameWithoutSuffix);
        return findFunctionOrClassByClassName(document, position, word, controllerName);
    }
    else if (PATTERNS.HELPER_METHODS.test(lineStartToWord)) {
        // @todo find in app/helpers
        const fileNameWithoutSuffix = path.parse(document.fileName).name, controllerName = index.camelize(fileNameWithoutSuffix);
        return findFunctionOrClassByClassName(document, position, word, controllerName);
    }
    else {
        return findLocationByWord(document, position, word, lineStartToWord);
    }
    const promise = new Promise(definitionResolver(document, definitionInformation));
    return promise;
}
function getSymbolPath(relpath, line, fileType) {
    const [currentClassRaw, parentClassRaw] = line.split('<'), currentClass = currentClassRaw.trim(), parentClass = parentClassRaw.trim(), relPath = FileTypeRelPath.get(fileType);
    if (currentClass.includes('::') && !parentClass.includes('::')) {
        return path.join(relPath, wordsToPath(parentClass) + '.rb');
    }
    const parent = parentClass.trim(), sameModuleSub = path.dirname(relpath.substring(relPath.length + 1)), seq = parent
        .split('::')
        .map(wordsToPath)
        .filter((v) => v !== ''), sub = !parent.includes('::')
        ? sameModuleSub
        : seq.slice(0, -1).join(path.sep), name = seq[seq.length - 1], filePath = path.join(relPath, sub, name + '.rb');
    return filePath;
}
function getParentControllerFilePathByDocument(entryDocument, line) {
    const relPath = vscode.workspace.asRelativePath(entryDocument.fileName), filePath = getSymbolPath(relPath, line, FileType.Controller);
    return filePath;
}
async function getFunctionOrClassInfoInFile(fileAbsPath, reg) {
    const definitionInformation = {
        file: null,
        line: 0,
        column: 0,
    };
    if (!fs.existsSync(fileAbsPath)) {
        return [definitionInformation, null];
    }
    const fileStream = fs.createReadStream(fileAbsPath);
    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity,
    });
    let lineNumber = 0, classDeclaration, lineIndex = -1;
    for await (const lineText of rl) {
        if (PATTERNS.CLASS_INHERIT_DECLARATION.test(lineText)) {
            classDeclaration = lineText;
        }
        if (reg.test(lineText)) {
            lineIndex = lineNumber;
            definitionInformation.file = fileAbsPath;
            definitionInformation.line = lineIndex;
            definitionInformation.column = lineText.length;
            break;
        }
        lineNumber++;
    }
    return [definitionInformation, classDeclaration];
}
async function findFunctionOrClassByClassNameInFile(fileAbsPath, reg) {
    // @todo find in included moduels
    let [definitionInformation, classDeclaration,] = await getFunctionOrClassInfoInFile(fileAbsPath, reg), lineIndex = definitionInformation.line;
    while (-1 === lineIndex) {
        const [, symbol] = classDeclaration.split('<'), parentController = symbol.trim(), filePath = getSymbolPath(vscode.workspace.asRelativePath(fileAbsPath), parentController, FileType.Controller), fileAbsPath2 = path.join(vscode.workspace.rootPath, filePath);
        [
            definitionInformation,
            classDeclaration,
        ] = await getFunctionOrClassInfoInFile(fileAbsPath2, reg);
        lineIndex = definitionInformation.line;
    }
    if (-1 !== lineIndex) {
        return definitionInformation;
    }
}
function findFunctionOrClassByClassName(entryDocument, position, funcOrClass, clasName) {
    const definitionInformation = {
        file: null,
        line: 0,
        column: 0,
    }, lines = entryDocument.getText().split('\n'), regPrefix = PATTERNS.CAPITALIZED.test(funcOrClass)
        ? 'class\\s+'
        : 'def\\s+', reg = new RegExp(regPrefix + funcOrClass + '(?![A-Za-z0-9_])'), lineIndex = lines.findIndex((line) => reg.test(line.trim()));
    if (-1 !== lineIndex) {
        // same file
        definitionInformation.file = entryDocument.uri.fsPath;
        definitionInformation.line = lineIndex;
        definitionInformation.column = lines[lineIndex].length;
        return Promise.resolve(definitionInformation);
    }
    else {
        const beforeRange = new vscode.Range(new vscode.Position(0, 0), position), beforeText = entryDocument.getText(beforeRange), beforeLines = beforeText.split('\n');
        const line = beforeLines.find((line) => new RegExp('^class\\s+.*' + clasName + SYMBOL_END).test(line.trim()));
        if (!line) {
            return Promise.reject('');
        }
        const filePath = getParentControllerFilePathByDocument(entryDocument, line), fileAbsPath = path.join(vscode.workspace.rootPath, filePath);
        return new Promise((resolve, reject) => {
            const definitionInformation = findFunctionOrClassByClassNameInFile(fileAbsPath, reg);
            resolve(definitionInformation);
        });
    }
}
function modelDefinitionLocation(document, position, word, lineStartToWord) {
    const definitionInformation = {
        file: null,
        line: 0,
        column: 0,
    };
    const reg = new RegExp('(^has_one|^has_many|^has_and_belongs_to_many|^belongs_to)\\s+:' + word);
    if (reg.test(lineStartToWord)) {
        const name = index.singularize(word);
        definitionInformation.file = path.join(REL_MODELS, '**', name + '.rb');
    }
    else if (PATTERNS.INCLUDE_DECLARATION.test(lineStartToWord)) {
        definitionInformation.file = getConcernsFilePath(lineStartToWord, FileType.ModelConcerns);
        // } else if (PATTERNS.CAPITALIZED.test(word)) {
        //   return getLibOrModelFilePath(lineStartToWord, word);
    }
    else if (PATTERNS.RENDER_DECLARATION.test(lineStartToWord) ||
        PATTERNS.RENDER_TO_STRING_DECLARATION.test(lineStartToWord)) {
        definitionInformation.file = findViews(document, position, word, lineStartToWord);
    }
    const promise = new Promise(definitionResolver(document, definitionInformation));
    return promise;
}
const FileTypeHandlers = new Map([
    [FileType.Controller, controllerDefinitionLocation],
    [FileType.Helper, controllerDefinitionLocation],
    [FileType.Model, modelDefinitionLocation],
]);
function definitionResolver(document, definitionInformation, exclude = null, maxNum = null) {
    return (resolve, reject) => {
        const findPath = path.isAbsolute(definitionInformation.file)
            ? vscode.workspace.asRelativePath(definitionInformation.file)
            : definitionInformation.file;
        vscode.workspace.findFiles(findPath).then((uris) => {
            if (!uris.length) {
                reject(missingFilelMsg + definitionInformation.file);
            }
            else if (uris.length === 1) {
                definitionInformation.file = uris[0].fsPath;
                resolve(definitionInformation);
            }
            else {
                const relativeFileName = vscode.workspace.asRelativePath(document.fileName), rh = new RailsHelper(relativeFileName, null);
                rh.showQuickPick(uris.map((uri) => vscode.workspace.asRelativePath(uri.path)));
                resolve(null);
            }
        }, () => {
            reject(missingFilelMsg + definitionInformation.file);
        });
    };
}
function definitionLocation(document, position, goConfig, token) {
    //   let context: vscode.ExtensionContext = this;
    const wordRange = document.getWordRangeAtPosition(position);
    const lineText = document.lineAt(position.line).text.trim();
    const lineStartToWord = document
        .getText(new vscode.Range(new vscode.Position(position.line, 0), wordRange.end))
        .trim();
    const word = document.getText(wordRange);
    //   context.logger.debug(word);
    if (lineText.startsWith('//') || word.match(/^\d+.?\d+$/)) {
        return Promise.resolve(null);
    }
    if (!goConfig) {
        goConfig = vscode.workspace.getConfiguration('rails');
    }
    const symbol = new RegExp('(((::)?[A-Za-z]+)*(::)?' + word + ')').exec(lineStartToWord)[1];
    if (RAILS.has(symbol) || RUBY.has(symbol)) {
        // context.logger.debug("rails symbols")
        return Promise.resolve(null);
    }
    const fileType = dectFileType(document.fileName);
    if (FileType.Unkown === fileType) {
        return Promise.resolve(null);
    }
    // let exclude;
    const handle = FileTypeHandlers.get(fileType);
    if (!handle) {
        return Promise.resolve(null);
    }
    return handle(document, position, word, lineStartToWord);
}
class RailsDefinitionProvider {
    //   private context: vscode.ExtensionContext;
    constructor(
    // context: vscode.ExtensionContext,
    goConfig) {
        this.goConfig = null;
        this.goConfig = goConfig;
        // this.context = context;
    }
    provideDefinition(document, position, token) {
        return definitionLocation(document, position, this.goConfig).then((definitionInfo) => {
            if (definitionInfo === null || definitionInfo.file === null)
                return null;
            const definitionResource = vscode.Uri.file(definitionInfo.file);
            const pos = new vscode.Position(definitionInfo.line, definitionInfo.column || 0 // required here otherwise raise "Invalid arguments"
            );
            return new vscode.Location(definitionResource, pos);
        }, (err) => {
            if (err) {
                // Prompt for missing tool is located here so that the
                // prompts dont show up on hover or signature help
                if (typeof err === 'string' && err.startsWith(missingFilelMsg)) ;
                else {
                    return Promise.reject(err);
                }
            }
            return Promise.resolve(null);
        });
    }
}

var utils = createCommonjsModule(function (module, exports) {

exports.isInteger = num => {
  if (typeof num === 'number') {
    return Number.isInteger(num);
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isInteger(Number(num));
  }
  return false;
};

/**
 * Find a node of the given type
 */

exports.find = (node, type) => node.nodes.find(node => node.type === type);

/**
 * Find a node of the given type
 */

exports.exceedsLimit = (min, max, step = 1, limit) => {
  if (limit === false) return false;
  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
  return ((Number(max) - Number(min)) / Number(step)) >= limit;
};

/**
 * Escape the given node with '\\' before node.value
 */

exports.escapeNode = (block, n = 0, type) => {
  let node = block.nodes[n];
  if (!node) return;

  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
    if (node.escaped !== true) {
      node.value = '\\' + node.value;
      node.escaped = true;
    }
  }
};

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

exports.encloseBrace = node => {
  if (node.type !== 'brace') return false;
  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
    node.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a brace node is invalid.
 */

exports.isInvalidBrace = block => {
  if (block.type !== 'brace') return false;
  if (block.invalid === true || block.dollar) return true;
  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
    block.invalid = true;
    return true;
  }
  if (block.open !== true || block.close !== true) {
    block.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a node is an open or close node
 */

exports.isOpenOrClose = node => {
  if (node.type === 'open' || node.type === 'close') {
    return true;
  }
  return node.open === true || node.close === true;
};

/**
 * Reduce an array of text nodes.
 */

exports.reduce = nodes => nodes.reduce((acc, node) => {
  if (node.type === 'text') acc.push(node.value);
  if (node.type === 'range') node.type = 'text';
  return acc;
}, []);

/**
 * Flatten an array
 */

exports.flatten = (...args) => {
  const result = [];
  const flat = arr => {
    for (let i = 0; i < arr.length; i++) {
      let ele = arr[i];
      Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
    }
    return result;
  };
  flat(args);
  return result;
};
});

var stringify = (ast, options = {}) => {
  let stringify = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = '';

    if (node.value) {
      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
        return '\\' + node.value;
      }
      return node.value;
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify(child);
      }
    }
    return output;
  };

  return stringify(ast);
};

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

var isNumber = function(num) {
  if (typeof num === 'number') {
    return num - num === 0;
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};

const toRegexRange = (min, max, options) => {
  if (isNumber(min) === false) {
    throw new TypeError('toRegexRange: expected the first argument to be a number');
  }

  if (max === void 0 || min === max) {
    return String(min);
  }

  if (isNumber(max) === false) {
    throw new TypeError('toRegexRange: expected the second argument to be a number.');
  }

  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === 'boolean') {
    opts.relaxZeros = opts.strictZeros === false;
  }

  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange.cache[cacheKey].result;
  }

  let a = Math.min(min, max);
  let b = Math.max(min, max);

  if (Math.abs(a - b) === 1) {
    let result = min + '|' + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }

  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];

  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }

  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }

  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }

  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);

  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
    state.result = `(?:${state.result})`;
  }

  toRegexRange.cache[cacheKey] = state;
  return state.result;
};

function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, '-', false) || [];
  let onlyPositive = filterPatterns(pos, neg, '', false) || [];
  let intersected = filterPatterns(neg, pos, '-?', true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join('|');
}

function splitToRanges(min, max) {
  let nines = 1;
  let zeros = 1;

  let stop = countNines(min, nines);
  let stops = new Set([max]);

  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }

  stop = countZeros(max + 1, zeros) - 1;

  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros += 1;
    stop = countZeros(max + 1, zeros) - 1;
  }

  stops = [...stops];
  stops.sort(compare);
  return stops;
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }

  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = '';
  let count = 0;

  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];

    if (startDigit === stopDigit) {
      pattern += startDigit;

    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass(startDigit, stopDigit);

    } else {
      count++;
    }
  }

  if (count) {
    pattern += options.shorthand === true ? '\\d' : '[0-9]';
  }

  return { pattern, count: [count], digits };
}

function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;

  for (let i = 0; i < ranges.length; i++) {
    let max = ranges[i];
    let obj = rangeToPattern(String(start), String(max), options);
    let zeros = '';

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }

      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max + 1;
      continue;
    }

    if (tok.isPadded) {
      zeros = padZeros(max, tok, options);
    }

    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max + 1;
    prev = obj;
  }

  return tokens;
}

function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];

  for (let ele of arr) {
    let { string } = ele;

    // only push if _both_ are negative...
    if (!intersection && !contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }

    // or _both_ are positive
    if (intersection && contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }
  }
  return result;
}

/**
 * Zip strings
 */

function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}

function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}

function contains(arr, key, val) {
  return arr.some(ele => ele[key] === val);
}

function countNines(min, len) {
  return Number(String(min).slice(0, -len) + '9'.repeat(len));
}

function countZeros(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros));
}

function toQuantifier(digits) {
  let [start = 0, stop = ''] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? ',' + stop : '')}}`;
  }
  return '';
}

function toCharacterClass(a, b, options) {
  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
}

function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}

function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }

  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;

  switch (diff) {
    case 0:
      return '';
    case 1:
      return relax ? '0?' : '0';
    case 2:
      return relax ? '0{0,2}' : '00';
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}

/**
 * Cache
 */

toRegexRange.cache = {};
toRegexRange.clearCache = () => (toRegexRange.cache = {});

/**
 * Expose `toRegexRange`
 */

var toRegexRange_1 = toRegexRange;

const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

const transform = toNumber => {
  return value => toNumber === true ? Number(value) : String(value);
};

const isValidValue = value => {
  return typeof value === 'number' || (typeof value === 'string' && value !== '');
};

const isNumber$1 = num => Number.isInteger(+num);

const zeros = input => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === '-') value = value.slice(1);
  if (value === '0') return false;
  while (value[++index] === '0');
  return index > 0;
};

const stringify$1 = (start, end, options) => {
  if (typeof start === 'string' || typeof end === 'string') {
    return true;
  }
  return options.stringify === true;
};

const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === '-' ? '-' : '';
    if (dash) input = input.slice(1);
    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};

const toMaxLen = (input, maxLength) => {
  let negative = input[0] === '-' ? '-' : '';
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength) input = '0' + input;
  return negative ? ('-' + input) : input;
};

const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

  let prefix = options.capture ? '' : '?:';
  let positives = '';
  let negatives = '';
  let result;

  if (parts.positives.length) {
    positives = parts.positives.join('|');
  }

  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join('|')})`;
  }

  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }

  if (options.wrap) {
    return `(${prefix}${result})`;
  }

  return result;
};

const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange_1(a, b, { wrap: false, ...options });
  }

  let start = String.fromCharCode(a);
  if (a === b) return start;

  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};

const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true;
    let prefix = options.capture ? '' : '?:';
    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
  }
  return toRegexRange_1(start, end, options);
};

const rangeError = (...args) => {
  return new RangeError('Invalid range arguments: ' + util$1.inspect(...args));
};

const invalidRange = (start, end, options) => {
  if (options.strictRanges === true) throw rangeError([start, end]);
  return [];
};

const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};

const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);

  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true) throw rangeError([start, end]);
    return [];
  }

  // fix negative zero
  if (a === 0) a = 0;
  if (b === 0) b = 0;

  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);

  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$1(start, end, options) === false;
  let format = options.transform || transform(toNumber);

  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }

  let parts = { negatives: [], positives: [] };
  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return step > 1
      ? toSequence(parts, options)
      : toRegex(range, null, { wrap: false, ...options });
  }

  return range;
};

const fillLetters = (start, end, step = 1, options = {}) => {
  if ((!isNumber$1(start) && start.length > 1) || (!isNumber$1(end) && end.length > 1)) {
    return invalidRange(start, end, options);
  }


  let format = options.transform || (val => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);

  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);

  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }

  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }

  return range;
};

const fill = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }

  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }

  if (typeof step === 'function') {
    return fill(start, end, 1, { transform: step });
  }

  if (isObject(step)) {
    return fill(start, end, 0, step);
  }

  let opts = { ...options };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;

  if (!isNumber$1(step)) {
    if (step != null && !isObject(step)) return invalidStep(step, opts);
    return fill(start, end, 1, step);
  }

  if (isNumber$1(start) && isNumber$1(end)) {
    return fillNumbers(start, end, step, opts);
  }

  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};

var fillRange = fill;

const compile = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? '\\' : '';
    let output = '';

    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }

    if (node.type === 'open') {
      return invalid ? (prefix + node.value) : '(';
    }

    if (node.type === 'close') {
      return invalid ? (prefix + node.value) : ')';
    }

    if (node.type === 'comma') {
      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);
      let range = fillRange(...args, { ...options, wrap: false, toRegex: true });

      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };

  return walk(ast);
};

var compile_1 = compile;

const append = (queue = '', stash = '', enclose = false) => {
  let result = [];

  queue = [].concat(queue);
  stash = [].concat(stash);

  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
  }

  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
      }
    }
  }
  return utils.flatten(result);
};

const expand = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

  let walk = (node, parent = {}) => {
    node.queue = [];

    let p = parent;
    let q = parent.queue;

    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
      p = p.parent;
      q = p.queue;
    }

    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify(node, options)));
      return;
    }

    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
      q.push(append(q.pop(), ['{}']));
      return;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);

      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
      }

      let range = fillRange(...args, options);
      if (range.length === 0) {
        range = stringify(node, options);
      }

      q.push(append(q.pop(), range));
      node.nodes = [];
      return;
    }

    let enclose = utils.encloseBrace(node);
    let queue = node.queue;
    let block = node;

    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
      block = block.parent;
      queue = block.queue;
    }

    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];

      if (child.type === 'comma' && node.type === 'brace') {
        if (i === 1) queue.push('');
        queue.push('');
        continue;
      }

      if (child.type === 'close') {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }

      if (child.value && child.type !== 'open') {
        queue.push(append(queue.pop(), child.value));
        continue;
      }

      if (child.nodes) {
        walk(child, node);
      }
    }

    return queue;
  };

  return utils.flatten(walk(ast));
};

var expand_1 = expand;

var constants = {
  MAX_LENGTH: 1024 * 64,

  // Digits
  CHAR_0: '0', /* 0 */
  CHAR_9: '9', /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 'A', /* A */
  CHAR_LOWERCASE_A: 'a', /* a */
  CHAR_UPPERCASE_Z: 'Z', /* Z */
  CHAR_LOWERCASE_Z: 'z', /* z */

  CHAR_LEFT_PARENTHESES: '(', /* ( */
  CHAR_RIGHT_PARENTHESES: ')', /* ) */

  CHAR_ASTERISK: '*', /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: '&', /* & */
  CHAR_AT: '@', /* @ */
  CHAR_BACKSLASH: '\\', /* \ */
  CHAR_BACKTICK: '`', /* ` */
  CHAR_CARRIAGE_RETURN: '\r', /* \r */
  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
  CHAR_COLON: ':', /* : */
  CHAR_COMMA: ',', /* , */
  CHAR_DOLLAR: '$', /* . */
  CHAR_DOT: '.', /* . */
  CHAR_DOUBLE_QUOTE: '"', /* " */
  CHAR_EQUAL: '=', /* = */
  CHAR_EXCLAMATION_MARK: '!', /* ! */
  CHAR_FORM_FEED: '\f', /* \f */
  CHAR_FORWARD_SLASH: '/', /* / */
  CHAR_HASH: '#', /* # */
  CHAR_HYPHEN_MINUS: '-', /* - */
  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
  CHAR_LEFT_CURLY_BRACE: '{', /* { */
  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
  CHAR_LINE_FEED: '\n', /* \n */
  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
  CHAR_PERCENT: '%', /* % */
  CHAR_PLUS: '+', /* + */
  CHAR_QUESTION_MARK: '?', /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
  CHAR_SEMICOLON: ';', /* ; */
  CHAR_SINGLE_QUOTE: '\'', /* ' */
  CHAR_SPACE: ' ', /*   */
  CHAR_TAB: '\t', /* \t */
  CHAR_UNDERSCORE: '_', /* _ */
  CHAR_VERTICAL_LINE: '|', /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
};

/**
 * Constants
 */

const {
  MAX_LENGTH,
  CHAR_BACKSLASH, /* \ */
  CHAR_BACKTICK, /* ` */
  CHAR_COMMA, /* , */
  CHAR_DOT, /* . */
  CHAR_LEFT_PARENTHESES, /* ( */
  CHAR_RIGHT_PARENTHESES, /* ) */
  CHAR_LEFT_CURLY_BRACE, /* { */
  CHAR_RIGHT_CURLY_BRACE, /* } */
  CHAR_LEFT_SQUARE_BRACKET, /* [ */
  CHAR_RIGHT_SQUARE_BRACKET, /* ] */
  CHAR_DOUBLE_QUOTE, /* " */
  CHAR_SINGLE_QUOTE, /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants;

/**
 * parse
 */

const parse = (input, options = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  let opts = options || {};
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }

  let ast = { type: 'root', input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth = 0;
  let value;

  /**
   * Helpers
   */

  const advance = () => input[index++];
  const push = node => {
    if (node.type === 'text' && prev.type === 'dot') {
      prev.type = 'text';
    }

    if (prev && prev.type === 'text' && node.type === 'text') {
      prev.value += node.value;
      return;
    }

    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };

  push({ type: 'bos' });

  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();

    /**
     * Invalid chars
     */

    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }

    /**
     * Escaped chars
     */

    if (value === CHAR_BACKSLASH) {
      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
      continue;
    }

    /**
     * Right square bracket (literal): ']'
     */

    if (value === CHAR_RIGHT_SQUARE_BRACKET) {
      push({ type: 'text', value: '\\' + value });
      continue;
    }

    /**
     * Left square bracket: '['
     */

    if (value === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;
      let next;

      while (index < length && (next = advance())) {
        value += next;

        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }

        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;

          if (brackets === 0) {
            break;
          }
        }
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Parentheses
     */

    if (value === CHAR_LEFT_PARENTHESES) {
      block = push({ type: 'paren', nodes: [] });
      stack.push(block);
      push({ type: 'text', value });
      continue;
    }

    if (value === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== 'paren') {
        push({ type: 'text', value });
        continue;
      }
      block = stack.pop();
      push({ type: 'text', value });
      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Quotes: '|"|`
     */

    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;

      if (options.keepQuotes !== true) {
        value = '';
      }

      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }

        if (next === open) {
          if (options.keepQuotes === true) value += next;
          break;
        }

        value += next;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Left curly brace: '{'
     */

    if (value === CHAR_LEFT_CURLY_BRACE) {
      depth++;

      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
      let brace = {
        type: 'brace',
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };

      block = push(brace);
      stack.push(block);
      push({ type: 'open', value });
      continue;
    }

    /**
     * Right curly brace: '}'
     */

    if (value === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== 'brace') {
        push({ type: 'text', value });
        continue;
      }

      let type = 'close';
      block = stack.pop();
      block.close = true;

      push({ type, value });
      depth--;

      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Comma: ','
     */

    if (value === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: 'text', value: stringify(block) }];
      }

      push({ type: 'comma', value });
      block.commas++;
      continue;
    }

    /**
     * Dot: '.'
     */

    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
      let siblings = block.nodes;

      if (depth === 0 || siblings.length === 0) {
        push({ type: 'text', value });
        continue;
      }

      if (prev.type === 'dot') {
        block.range = [];
        prev.value += value;
        prev.type = 'range';

        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = 'text';
          continue;
        }

        block.ranges++;
        block.args = [];
        continue;
      }

      if (prev.type === 'range') {
        siblings.pop();

        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }

      push({ type: 'dot', value });
      continue;
    }

    /**
     * Text
     */

    push({ type: 'text', value });
  }

  // Mark imbalanced braces and brackets as invalid
  do {
    block = stack.pop();

    if (block.type !== 'root') {
      block.nodes.forEach(node => {
        if (!node.nodes) {
          if (node.type === 'open') node.isOpen = true;
          if (node.type === 'close') node.isClose = true;
          if (!node.nodes) node.type = 'text';
          node.invalid = true;
        }
      });

      // get the location of the block on parent.nodes (block's siblings)
      let parent = stack[stack.length - 1];
      let index = parent.nodes.indexOf(block);
      // replace the (invalid) block with it's nodes
      parent.nodes.splice(index, 1, ...block.nodes);
    }
  } while (stack.length > 0);

  push({ type: 'eos' });
  return ast;
};

var parse_1 = parse;

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = [];

  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces.create(input, options));
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse_1(input, options);

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options);
  }
  return stringify(input, options);
};

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }
  return compile_1(input, options);
};

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }

  let result = expand_1(input, options);

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }

  return result;
};

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input];
  }

 return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options);
};

/**
 * Expose "braces"
 */

var braces_1 = braces;

const WIN_SLASH = '\\\\/';
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

/**
 * Posix glob regex
 */

const DOT_LITERAL = '\\.';
const PLUS_LITERAL = '\\+';
const QMARK_LITERAL = '\\?';
const SLASH_LITERAL = '\\/';
const ONE_CHAR = '(?=.)';
const QMARK = '[^/]';
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;

const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};

/**
 * Windows glob regex
 */

const WINDOWS_CHARS = {
  ...POSIX_CHARS,

  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};

/**
 * POSIX Bracket Regex
 */

const POSIX_REGEX_SOURCE = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9'
};

var constants$1 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE,

  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    '***': '*',
    '**/**': '**',
    '**/**/**': '**'
  },

  // Digits
  CHAR_0: 48, /* 0 */
  CHAR_9: 57, /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 65, /* A */
  CHAR_LOWERCASE_A: 97, /* a */
  CHAR_UPPERCASE_Z: 90, /* Z */
  CHAR_LOWERCASE_Z: 122, /* z */

  CHAR_LEFT_PARENTHESES: 40, /* ( */
  CHAR_RIGHT_PARENTHESES: 41, /* ) */

  CHAR_ASTERISK: 42, /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38, /* & */
  CHAR_AT: 64, /* @ */
  CHAR_BACKWARD_SLASH: 92, /* \ */
  CHAR_CARRIAGE_RETURN: 13, /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
  CHAR_COLON: 58, /* : */
  CHAR_COMMA: 44, /* , */
  CHAR_DOT: 46, /* . */
  CHAR_DOUBLE_QUOTE: 34, /* " */
  CHAR_EQUAL: 61, /* = */
  CHAR_EXCLAMATION_MARK: 33, /* ! */
  CHAR_FORM_FEED: 12, /* \f */
  CHAR_FORWARD_SLASH: 47, /* / */
  CHAR_GRAVE_ACCENT: 96, /* ` */
  CHAR_HASH: 35, /* # */
  CHAR_HYPHEN_MINUS: 45, /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
  CHAR_LEFT_CURLY_BRACE: 123, /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
  CHAR_LINE_FEED: 10, /* \n */
  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
  CHAR_PERCENT: 37, /* % */
  CHAR_PLUS: 43, /* + */
  CHAR_QUESTION_MARK: 63, /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
  CHAR_SEMICOLON: 59, /* ; */
  CHAR_SINGLE_QUOTE: 39, /* ' */
  CHAR_SPACE: 32, /*   */
  CHAR_TAB: 9, /* \t */
  CHAR_UNDERSCORE: 95, /* _ */
  CHAR_VERTICAL_LINE: 124, /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

  SEP: path__default.sep,

  /**
   * Create EXTGLOB_CHARS
   */

  extglobChars(chars) {
    return {
      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
      '?': { type: 'qmark', open: '(?:', close: ')?' },
      '+': { type: 'plus', open: '(?:', close: ')+' },
      '*': { type: 'star', open: '(?:', close: ')*' },
      '@': { type: 'at', open: '(?:', close: ')' }
    };
  },

  /**
   * Create GLOB_CHARS
   */

  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};

var utils$1 = createCommonjsModule(function (module, exports) {


const win32 = process.platform === 'win32';
const {
  REGEX_BACKSLASH,
  REGEX_REMOVE_BACKSLASH,
  REGEX_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_GLOBAL
} = constants$1;

exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');

exports.removeBackslashes = str => {
  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
    return match === '\\' ? '' : match;
  });
};

exports.supportsLookbehinds = () => {
  const segs = process.version.slice(1).split('.').map(Number);
  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
    return true;
  }
  return false;
};

exports.isWindows = options => {
  if (options && typeof options.windows === 'boolean') {
    return options.windows;
  }
  return win32 === true || path__default.sep === '\\';
};

exports.escapeLast = (input, char, lastIdx) => {
  const idx = input.lastIndexOf(char, lastIdx);
  if (idx === -1) return input;
  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
  return `${input.slice(0, idx)}\\${input.slice(idx)}`;
};

exports.removePrefix = (input, state = {}) => {
  let output = input;
  if (output.startsWith('./')) {
    output = output.slice(2);
    state.prefix = './';
  }
  return output;
};

exports.wrapOutput = (input, state = {}, options = {}) => {
  const prepend = options.contains ? '' : '^';
  const append = options.contains ? '' : '$';

  let output = `${prepend}(?:${input})${append}`;
  if (state.negated === true) {
    output = `(?:^(?!${output}).*$)`;
  }
  return output;
};
});

const {
  CHAR_ASTERISK,             /* * */
  CHAR_AT,                   /* @ */
  CHAR_BACKWARD_SLASH,       /* \ */
  CHAR_COMMA: CHAR_COMMA$1,                /* , */
  CHAR_DOT: CHAR_DOT$1,                  /* . */
  CHAR_EXCLAMATION_MARK,     /* ! */
  CHAR_FORWARD_SLASH,        /* / */
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1,     /* { */
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1,     /* ( */
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1,  /* [ */
  CHAR_PLUS,                 /* + */
  CHAR_QUESTION_MARK,        /* ? */
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1,    /* } */
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1,    /* ) */
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1  /* ] */
} = constants$1;

const isPathSeparator = code => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};

const depth = token => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};

/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), and `negated` (true if the path starts with `!`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */

const scan = (input, options) => {
  const opts = options || {};

  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];

  let str = input;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob = false;
  let isExtglob = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let finished = false;
  let braces = 0;
  let prev;
  let code;
  let token = { value: '', depth: 0, isGlob: false };

  const eos = () => index >= length;
  const peek = () => str.charCodeAt(index + 1);
  const advance = () => {
    prev = code;
    return str.charCodeAt(++index);
  };

  while (index < length) {
    code = advance();
    let next;

    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();

      if (code === CHAR_LEFT_CURLY_BRACE$1) {
        braceEscaped = true;
      }
      continue;
    }

    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE$1) {
      braces++;

      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (code === CHAR_LEFT_CURLY_BRACE$1) {
          braces++;
          continue;
        }

        if (braceEscaped !== true && code === CHAR_DOT$1 && (code = advance()) === CHAR_DOT$1) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (braceEscaped !== true && code === CHAR_COMMA$1) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (code === CHAR_RIGHT_CURLY_BRACE$1) {
          braces--;

          if (braces === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }

      if (scanToEnd === true) {
        continue;
      }

      break;
    }

    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index);
      tokens.push(token);
      token = { value: '', depth: 0, isGlob: false };

      if (finished === true) continue;
      if (prev === CHAR_DOT$1 && index === (start + 1)) {
        start += 2;
        continue;
      }

      lastIndex = index + 1;
      continue;
    }

    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS
        || code === CHAR_AT
        || code === CHAR_ASTERISK
        || code === CHAR_QUESTION_MARK
        || code === CHAR_EXCLAMATION_MARK;

      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES$1) {
        isGlob = token.isGlob = true;
        isExtglob = token.isExtglob = true;
        finished = true;

        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }

            if (code === CHAR_RIGHT_PARENTHESES$1) {
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }

    if (code === CHAR_ASTERISK) {
      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_QUESTION_MARK) {
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_LEFT_SQUARE_BRACKET$1) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          isBracket = token.isBracket = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
    }

    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = token.negated = true;
      start++;
      continue;
    }

    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES$1) {
      isGlob = token.isGlob = true;

      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES$1) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }

          if (code === CHAR_RIGHT_PARENTHESES$1) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }

    if (isGlob === true) {
      finished = true;

      if (scanToEnd === true) {
        continue;
      }

      break;
    }
  }

  if (opts.noext === true) {
    isExtglob = false;
    isGlob = false;
  }

  let base = str;
  let prefix = '';
  let glob = '';

  if (start > 0) {
    prefix = str.slice(0, start);
    str = str.slice(start);
    lastIndex -= start;
  }

  if (base && isGlob === true && lastIndex > 0) {
    base = str.slice(0, lastIndex);
    glob = str.slice(lastIndex);
  } else if (isGlob === true) {
    base = '';
    glob = str;
  } else {
    base = str;
  }

  if (base && base !== '' && base !== '/' && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }

  if (opts.unescape === true) {
    if (glob) glob = utils$1.removeBackslashes(glob);

    if (base && backslashes === true) {
      base = utils$1.removeBackslashes(base);
    }
  }

  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob,
    isExtglob,
    isGlobstar,
    negated
  };

  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }

  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;

    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== '') {
        parts.push(value);
      }
      prevIndex = i;
    }

    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);

      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }

    state.slashes = slashes;
    state.parts = parts;
  }

  return state;
};

var scan_1 = scan;

/**
 * Constants
 */

const {
  MAX_LENGTH: MAX_LENGTH$1,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants$1;

/**
 * Helpers
 */

const expandRange = (args, options) => {
  if (typeof options.expandRange === 'function') {
    return options.expandRange(...args, options);
  }

  args.sort();
  const value = `[${args.join('-')}]`;

  try {
    /* eslint-disable-next-line no-new */
    new RegExp(value);
  } catch (ex) {
    return args.map(v => utils$1.escapeRegex(v)).join('..');
  }

  return value;
};

/**
 * Create the message for a syntax error
 */

const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};

/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */

const parse$1 = (input, options) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  input = REPLACEMENTS[input] || input;

  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;

  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  const bos = { type: 'bos', value: '', output: opts.prepend || '' };
  const tokens = [bos];

  const capture = opts.capture ? '' : '?:';
  const win32 = utils$1.isWindows(options);

  // create constants based on platform, for windows or posix
  const PLATFORM_CHARS = constants$1.globChars(win32);
  const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS);

  const {
    DOT_LITERAL,
    PLUS_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  } = PLATFORM_CHARS;

  const globstar = (opts) => {
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const nodot = opts.dot ? '' : NO_DOT;
  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
  let star = opts.bash === true ? globstar(opts) : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  // minimatch options support
  if (typeof opts.noext === 'boolean') {
    opts.noextglob = opts.noext;
  }

  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: '',
    output: '',
    prefix: '',
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };

  input = utils$1.removePrefix(input, state);
  len = input.length;

  const extglobs = [];
  const braces = [];
  const stack = [];
  let prev = bos;
  let value;

  /**
   * Tokenizing helpers
   */

  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index];
  const remaining = () => input.slice(state.index + 1);
  const consume = (value = '', num = 0) => {
    state.consumed += value;
    state.index += num;
  };
  const append = token => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };

  const negate = () => {
    let count = 1;

    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
      advance();
      state.start++;
      count++;
    }

    if (count % 2 === 0) {
      return false;
    }

    state.negated = true;
    state.start++;
    return true;
  };

  const increment = type => {
    state[type]++;
    stack.push(type);
  };

  const decrement = type => {
    state[type]--;
    stack.pop();
  };

  /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */

  const push = tok => {
    if (prev.type === 'globstar') {
      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));

      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = 'star';
        prev.value = '*';
        prev.output = star;
        state.output += prev.output;
      }
    }

    if (extglobs.length && tok.type !== 'paren' && !EXTGLOB_CHARS[tok.value]) {
      extglobs[extglobs.length - 1].inner += tok.value;
    }

    if (tok.value || tok.output) append(tok);
    if (prev && prev.type === 'text' && tok.type === 'text') {
      prev.value += tok.value;
      prev.output = (prev.output || '') + tok.value;
      return;
    }

    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };

  const extglobOpen = (type, value) => {
    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? '(' : '') + token.open;

    increment('parens');
    push({ type, value, output: state.output ? '' : ONE_CHAR });
    push({ type: 'paren', extglob: true, value: advance(), output });
    extglobs.push(token);
  };

  const extglobClose = token => {
    let output = token.close + (opts.capture ? ')' : '');

    if (token.type === 'negate') {
      let extglobStar = star;

      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
        extglobStar = globstar(opts);
      }

      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }

      if (token.prev.type === 'bos' && eos()) {
        state.negatedExtglob = true;
      }
    }

    push({ type: 'paren', extglob: true, value, output });
    decrement('parens');
  };

  /**
   * Fast paths
   */

  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;

    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
      if (first === '\\') {
        backslashes = true;
        return m;
      }

      if (first === '?') {
        if (esc) {
          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
        }
        return QMARK.repeat(chars.length);
      }

      if (first === '.') {
        return DOT_LITERAL.repeat(chars.length);
      }

      if (first === '*') {
        if (esc) {
          return esc + first + (rest ? star : '');
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });

    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, '');
      } else {
        output = output.replace(/\\+/g, m => {
          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
        });
      }
    }

    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }

    state.output = utils$1.wrapOutput(output, state, options);
    return state;
  }

  /**
   * Tokenize input until we reach end-of-string
   */

  while (!eos()) {
    value = advance();

    if (value === '\u0000') {
      continue;
    }

    /**
     * Escaped characters
     */

    if (value === '\\') {
      const next = peek();

      if (next === '/' && opts.bash !== true) {
        continue;
      }

      if (next === '.' || next === ';') {
        continue;
      }

      if (!next) {
        value += '\\';
        push({ type: 'text', value });
        continue;
      }

      // collapse slashes to reduce potential for exploits
      const match = /^\\+/.exec(remaining());
      let slashes = 0;

      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += '\\';
        }
      }

      if (opts.unescape === true) {
        value = advance() || '';
      } else {
        value += advance() || '';
      }

      if (state.brackets === 0) {
        push({ type: 'text', value });
        continue;
      }
    }

    /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
      if (opts.posix !== false && value === ':') {
        const inner = prev.value.slice(1);
        if (inner.includes('[')) {
          prev.posix = true;

          if (inner.includes(':')) {
            const idx = prev.value.lastIndexOf('[');
            const pre = prev.value.slice(0, idx);
            const rest = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE$1[rest];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();

              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR;
              }
              continue;
            }
          }
        }
      }

      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
        value = `\\${value}`;
      }

      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
        value = `\\${value}`;
      }

      if (opts.posix === true && value === '!' && prev.value === '[') {
        value = '^';
      }

      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

    if (state.quotes === 1 && value !== '"') {
      value = utils$1.escapeRegex(value);
      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * Double quotes
     */

    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: 'text', value });
      }
      continue;
    }

    /**
     * Parentheses
     */

    if (value === '(') {
      increment('parens');
      push({ type: 'paren', value });
      continue;
    }

    if (value === ')') {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError('opening', '('));
      }

      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }

      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
      decrement('parens');
      continue;
    }

    /**
     * Square brackets
     */

    if (value === '[') {
      if (opts.nobracket === true || !remaining().includes(']')) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('closing', ']'));
        }

        value = `\\${value}`;
      } else {
        increment('brackets');
      }

      push({ type: 'bracket', value });
      continue;
    }

    if (value === ']') {
      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('opening', '['));
        }

        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      decrement('brackets');

      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
        value = `/${value}`;
      }

      prev.value += value;
      append({ value });

      // when literal brackets are explicitly disabled
      // assume we should match with a regex character class
      if (opts.literalBrackets === false || utils$1.hasRegexChars(prevValue)) {
        continue;
      }

      const escaped = utils$1.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);

      // when literal brackets are explicitly enabled
      // assume we should escape the brackets to match literal characters
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }

      // when the user specifies nothing, try to match both
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }

    /**
     * Braces
     */

    if (value === '{' && opts.nobrace !== true) {
      increment('braces');

      const open = {
        type: 'brace',
        value,
        output: '(',
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };

      braces.push(open);
      push(open);
      continue;
    }

    if (value === '}') {
      const brace = braces[braces.length - 1];

      if (opts.nobrace === true || !brace) {
        push({ type: 'text', value, output: value });
        continue;
      }

      let output = ')';

      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];

        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === 'brace') {
            break;
          }
          if (arr[i].type !== 'dots') {
            range.unshift(arr[i].value);
          }
        }

        output = expandRange(range, opts);
        state.backtrack = true;
      }

      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = '\\{';
        value = output = '\\}';
        state.output = out;
        for (const t of toks) {
          state.output += (t.output || t.value);
        }
      }

      push({ type: 'brace', value, output });
      decrement('braces');
      braces.pop();
      continue;
    }

    /**
     * Pipes
     */

    if (value === '|') {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: 'text', value });
      continue;
    }

    /**
     * Commas
     */

    if (value === ',') {
      let output = value;

      const brace = braces[braces.length - 1];
      if (brace && stack[stack.length - 1] === 'braces') {
        brace.comma = true;
        output = '|';
      }

      push({ type: 'comma', value, output });
      continue;
    }

    /**
     * Slashes
     */

    if (value === '/') {
      // if the beginning of the glob is "./", advance the start
      // to the current index, and don't add the "./" characters
      // to the state. This greatly simplifies lookbehinds when
      // checking for BOS characters like "!" and "." (not "./")
      if (prev.type === 'dot' && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = '';
        state.output = '';
        tokens.pop();
        prev = bos; // reset "prev" to the first token
        continue;
      }

      push({ type: 'slash', value, output: SLASH_LITERAL });
      continue;
    }

    /**
     * Dots
     */

    if (value === '.') {
      if (state.braces > 0 && prev.type === 'dot') {
        if (prev.value === '.') prev.output = DOT_LITERAL;
        const brace = braces[braces.length - 1];
        prev.type = 'dots';
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }

      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {
        push({ type: 'text', value, output: DOT_LITERAL });
        continue;
      }

      push({ type: 'dot', value, output: DOT_LITERAL });
      continue;
    }

    /**
     * Question marks
     */

    if (value === '?') {
      const isGroup = prev && prev.value === '(';
      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('qmark', value);
        continue;
      }

      if (prev && prev.type === 'paren') {
        const next = peek();
        let output = value;

        if (next === '<' && !utils$1.supportsLookbehinds()) {
          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
        }

        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\w+>)/.test(remaining()))) {
          output = `\\${value}`;
        }

        push({ type: 'text', value, output });
        continue;
      }

      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
        push({ type: 'qmark', value, output: QMARK_NO_DOT });
        continue;
      }

      push({ type: 'qmark', value, output: QMARK });
      continue;
    }

    /**
     * Exclamation
     */

    if (value === '!') {
      if (opts.noextglob !== true && peek() === '(') {
        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
          extglobOpen('negate', value);
          continue;
        }
      }

      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }

    /**
     * Plus
     */

    if (value === '+') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('plus', value);
        continue;
      }

      if ((prev && prev.value === '(') || opts.regex === false) {
        push({ type: 'plus', value, output: PLUS_LITERAL });
        continue;
      }

      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {
        push({ type: 'plus', value });
        continue;
      }

      push({ type: 'plus', value: PLUS_LITERAL });
      continue;
    }

    /**
     * Plain text
     */

    if (value === '@') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        push({ type: 'at', extglob: true, value, output: '' });
        continue;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Plain text
     */

    if (value !== '*') {
      if (value === '$' || value === '^') {
        value = `\\${value}`;
      }

      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match) {
        value += match[0];
        state.index += match[0].length;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Stars
     */

    if (prev && (prev.type === 'globstar' || prev.star === true)) {
      prev.type = 'star';
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }

    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen('star', value);
      continue;
    }

    if (prev.type === 'star') {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }

      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === 'slash' || prior.type === 'bos';
      const afterStar = before && (before.type === 'star' || before.type === 'globstar');

      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      // strip consecutive `/**/`
      while (rest.slice(0, 3) === '/**') {
        const after = input[state.index + 4];
        if (after && after !== '/') {
          break;
        }
        rest = rest.slice(3);
        consume('/**', 3);
      }

      if (prior.type === 'bos' && eos()) {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {
        const end = rest[1] !== void 0 ? '|$' : '';

        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
        prev.value += value;

        state.output += prior.output + prev.output;
        state.globstar = true;

        consume(value + advance());

        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      if (prior.type === 'bos' && rest[0] === '/') {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      // remove single star from output
      state.output = state.output.slice(0, -prev.output.length);

      // reset previous token to globstar
      prev.type = 'globstar';
      prev.output = globstar(opts);
      prev.value += value;

      // reset output with globstar
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }

    const token = { type: 'star', value, output: star };

    if (opts.bash === true) {
      token.output = '.*?';
      if (prev.type === 'bos' || prev.type === 'slash') {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }

    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }

    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
      if (prev.type === 'dot') {
        state.output += NO_DOT_SLASH;
        prev.output += NO_DOT_SLASH;

      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH;
        prev.output += NO_DOTS_SLASH;

      } else {
        state.output += nodot;
        prev.output += nodot;
      }

      if (peek() !== '*') {
        state.output += ONE_CHAR;
        prev.output += ONE_CHAR;
      }
    }

    push(token);
  }

  while (state.brackets > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
    state.output = utils$1.escapeLast(state.output, '[');
    decrement('brackets');
  }

  while (state.parens > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
    state.output = utils$1.escapeLast(state.output, '(');
    decrement('parens');
  }

  while (state.braces > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
    state.output = utils$1.escapeLast(state.output, '{');
    decrement('braces');
  }

  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
  }

  // rebuild the output if we had to backtrack at any point
  if (state.backtrack === true) {
    state.output = '';

    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;

      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }

  return state;
};

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

parse$1.fastpaths = (input, options) => {
  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  input = REPLACEMENTS[input] || input;
  const win32 = utils$1.isWindows(options);

  // create constants based on platform, for windows or posix
  const {
    DOT_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOTS_SLASH,
    STAR,
    START_ANCHOR
  } = constants$1.globChars(win32);

  const nodot = opts.dot ? NO_DOTS : NO_DOT;
  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
  const capture = opts.capture ? '' : '?:';
  const state = { negated: false, prefix: '' };
  let star = opts.bash === true ? '.*?' : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  const globstar = (opts) => {
    if (opts.noglobstar === true) return star;
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const create = str => {
    switch (str) {
      case '*':
        return `${nodot}${ONE_CHAR}${star}`;

      case '.*':
        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*.*':
        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*/*':
        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

      case '**':
        return nodot + globstar(opts);

      case '**/*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

      case '**/*.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '**/.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str);
        if (!match) return;

        const source = create(match[1]);
        if (!source) return;

        return source + DOT_LITERAL + match[2];
      }
    }
  };

  const output = utils$1.removePrefix(input, state);
  let source = create(output);

  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL}?`;
  }

  return source;
};

var parse_1$1 = parse$1;

const isObject$1 = val => val && typeof val === 'object' && !Array.isArray(val);

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

const picomatch = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map(input => picomatch(input, options, returnState));
    const arrayMatcher = str => {
      for (const isMatch of fns) {
        const state = isMatch(str);
        if (state) return state;
      }
      return false;
    };
    return arrayMatcher;
  }

  const isState = isObject$1(glob) && glob.tokens && glob.input;

  if (glob === '' || (typeof glob !== 'string' && !isState)) {
    throw new TypeError('Expected pattern to be a non-empty string');
  }

  const opts = options || {};
  const posix = utils$1.isWindows(options);
  const regex = isState
    ? picomatch.compileRe(glob, options)
    : picomatch.makeRe(glob, options, false, true);

  const state = regex.state;
  delete regex.state;

  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
  }

  const matcher = (input, returnObject = false) => {
    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
    const result = { glob, state, regex, posix, input, output, match, isMatch };

    if (typeof opts.onResult === 'function') {
      opts.onResult(result);
    }

    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (isIgnored(input)) {
      if (typeof opts.onIgnore === 'function') {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (typeof opts.onMatch === 'function') {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };

  if (returnState) {
    matcher.state = state;
  }

  return matcher;
};

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

picomatch.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected input to be a string');
  }

  if (input === '') {
    return { isMatch: false, output: '' };
  }

  const opts = options || {};
  const format = opts.format || (posix ? utils$1.toPosixSlashes : null);
  let match = input === glob;
  let output = (match && format) ? format(input) : input;

  if (match === false) {
    output = format ? format(input) : input;
    match = output === glob;
  }

  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output);
    }
  }

  return { isMatch: Boolean(match), match, output };
};

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

picomatch.matchBase = (input, glob, options, posix = utils$1.isWindows(options)) => {
  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
  return regex.test(path__default.basename(input));
};

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

picomatch.parse = (pattern, options) => {
  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));
  return parse_1$1(pattern, { ...options, fastpaths: false });
};

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

picomatch.scan = (input, options) => scan_1(input, options);

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

picomatch.compileRe = (parsed, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return parsed.output;
  }

  const opts = options || {};
  const prepend = opts.contains ? '' : '^';
  const append = opts.contains ? '' : '$';

  let source = `${prepend}(?:${parsed.output})${append}`;
  if (parsed && parsed.negated === true) {
    source = `^(?!${source}).*$`;
  }

  const regex = picomatch.toRegex(source, options);
  if (returnState === true) {
    regex.state = parsed;
  }

  return regex;
};

picomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== 'string') {
    throw new TypeError('Expected a non-empty string');
  }

  const opts = options || {};
  let parsed = { negated: false, fastpaths: true };
  let prefix = '';
  let output;

  if (input.startsWith('./')) {
    input = input.slice(2);
    prefix = parsed.prefix = './';
  }

  if (opts.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
    output = parse_1$1.fastpaths(input, options);
  }

  if (output === undefined) {
    parsed = parse_1$1(input, options);
    parsed.prefix = prefix + (parsed.prefix || '');
  } else {
    parsed.output = output;
  }

  return picomatch.compileRe(parsed, options, returnOutput, returnState);
};

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

picomatch.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
  } catch (err) {
    if (options && options.debug === true) throw err;
    return /$^/;
  }
};

/**
 * Picomatch constants.
 * @return {Object}
 */

picomatch.constants = constants$1;

/**
 * Expose "picomatch"
 */

var picomatch_1 = picomatch;

var picomatch$1 = picomatch_1;

const isEmptyString = val => typeof val === 'string' && (val === '' || val === './');

/**
 * Returns an array of strings that match one or more glob patterns.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm(list, patterns[, options]);
 *
 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {String|Array<string>} list List of strings to match.
 * @param {String|Array<string>} patterns One or more glob patterns to use for matching.
 * @param {Object} options See available [options](#options)
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

const micromatch = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);

  let omit = new Set();
  let keep = new Set();
  let items = new Set();
  let negatives = 0;

  let onResult = state => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };

  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch$1(String(patterns[i]), { ...options, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated) negatives++;

    for (let item of list) {
      let matched = isMatch(item, true);

      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match) continue;

      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }

  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter(item => !omit.has(item));

  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(', ')}"`);
    }

    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map(p => p.replace(/\\/g, '')) : patterns;
    }
  }

  return matches;
};

/**
 * Backwards compatibility
 */

micromatch.match = micromatch;

/**
 * Returns a matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matcher(pattern[, options]);
 *
 * const isMatch = mm.matcher('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options`
 * @return {Function} Returns a matcher function.
 * @api public
 */

micromatch.matcher = (pattern, options) => picomatch$1(pattern, options);

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.isMatch(string, patterns[, options]);
 *
 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.isMatch = (str, patterns, options) => picomatch$1(patterns, options)(str);

/**
 * Backwards compatibility
 */

micromatch.any = micromatch.isMatch;

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.not(list, patterns[, options]);
 *
 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

micromatch.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = new Set();
  let items = [];

  let onResult = state => {
    if (options.onResult) options.onResult(state);
    items.push(state.output);
  };

  let matches = micromatch(list, patterns, { ...options, onResult });

  for (let item of items) {
    if (!matches.includes(item)) {
      result.add(item);
    }
  }
  return [...result];
};

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var mm = require('micromatch');
 * // mm.contains(string, pattern[, options]);
 *
 * console.log(mm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(mm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the patter matches any part of `str`.
 * @api public
 */

micromatch.contains = (str, pattern, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
  }

  if (Array.isArray(pattern)) {
    return pattern.some(p => micromatch.contains(str, p, options));
  }

  if (typeof pattern === 'string') {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }

    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {
      return true;
    }
  }

  return micromatch.isMatch(str, pattern, { ...options, contains: true });
};

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matchKeys(object, patterns[, options]);
 *
 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(mm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('Expected the first argument to be an object');
  }
  let keys = micromatch(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys) res[key] = obj[key];
  return res;
};

/**
 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.some(list, patterns[, options]);
 *
 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.some = (list, patterns, options) => {
  let items = [].concat(list);

  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch$1(String(pattern), options);
    if (items.some(item => isMatch(item))) {
      return true;
    }
  }
  return false;
};

/**
 * Returns true if every string in the given `list` matches
 * any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.every(list, patterns[, options]);
 *
 * console.log(mm.every('foo.js', ['foo.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // false
 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.every = (list, patterns, options) => {
  let items = [].concat(list);

  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch$1(String(pattern), options);
    if (!items.every(item => isMatch(item))) {
      return false;
    }
  }
  return true;
};

/**
 * Returns true if **all** of the given `patterns` match
 * the specified string.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.all(string, patterns[, options]);
 *
 * console.log(mm.all('foo.js', ['foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
 * // false
 *
 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
 * // true
 * ```
 * @param {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.all = (str, patterns, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
  }

  return [].concat(patterns).every(p => picomatch$1(p, options)(str));
};

/**
 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.capture(pattern, string[, options]);
 *
 * console.log(mm.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `glob` Glob pattern to use for matching.
 * @param {String} `input` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
 * @api public
 */

micromatch.capture = (glob, input, options) => {
  let posix = utils$1.isWindows(options);
  let regex = picomatch$1.makeRe(String(glob), { ...options, capture: true });
  let match = regex.exec(posix ? utils$1.toPosixSlashes(input) : input);

  if (match) {
    return match.slice(1).map(v => v === void 0 ? '' : v);
  }
};

/**
 * Create a regular expression from the given glob `pattern`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.makeRe(pattern[, options]);
 *
 * console.log(mm.makeRe('*.js'));
 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
 * ```
 * @param {String} `pattern` A glob pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

micromatch.makeRe = (...args) => picomatch$1.makeRe(...args);

/**
 * Scan a glob pattern to separate the pattern into segments. Used
 * by the [split](#split) method.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm.scan(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

micromatch.scan = (...args) => picomatch$1.scan(...args);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm(pattern[, options]);
 * ```
 * @param {String} `glob`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as regex source string.
 * @api public
 */

micromatch.parse = (patterns, options) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str of braces_1(String(pattern), options)) {
      res.push(picomatch$1.parse(str, options));
    }
  }
  return res;
};

/**
 * Process the given brace `pattern`.
 *
 * ```js
 * const { braces } = require('micromatch');
 * console.log(braces('foo/{a,b,c}/bar'));
 * //=> [ 'foo/(a|b|c)/bar' ]
 *
 * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
 * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
 * ```
 * @param {String} `pattern` String with brace pattern to process.
 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
 * @return {Array}
 * @api public
 */

micromatch.braces = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
  if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
    return [pattern];
  }
  return braces_1(pattern, options);
};

/**
 * Expand braces
 */

micromatch.braceExpand = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
  return micromatch.braces(pattern, { ...options, expand: true });
};

/**
 * Expose micromatch
 */

var micromatch_1 = micromatch;

const QUERY_METHODS = [
    'find_by',
    'first',
    'last',
    'take',
    'find',
    'find_each',
    'find_in_batches',
    'create_with',
    'distinct',
    'eager_load',
    'extending',
    'from',
    'group',
    'having',
    'includes',
    'joins',
    'left_outer_joins',
    'limit',
    'lock',
    'none',
    'offset',
    'order',
    'preload',
    'readonly',
    'references',
    'reorder',
    'reverse_order',
    'select',
    'where',
    'all',
];
var TriggerCharacter;
(function (TriggerCharacter) {
    TriggerCharacter[TriggerCharacter["dot"] = 0] = "dot";
    TriggerCharacter[TriggerCharacter["quote"] = 1] = "quote";
    TriggerCharacter[TriggerCharacter["colon"] = 2] = "colon";
})(TriggerCharacter || (TriggerCharacter = {}));
function modelQueryInterface() {
    const suggestions = [];
    QUERY_METHODS.forEach((value) => {
        const item = new vscode.CompletionItem(value);
        item.insertText = value;
        item.kind = vscode.CompletionItemKind.Method;
        suggestions.push(item);
    });
    return suggestions;
}
async function getCols(fileAbsPath, position, triggerCharacter, prefix) {
    const fileStream = fs.createReadStream(fileAbsPath);
    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity,
    });
    const cols = [];
    for await (const lineText of rl) {
        if (/^#\s+([a-z0-9_]+)/.test(lineText)) {
            const col = /^#\s+([a-z0-9_]+)/.exec(lineText)[1];
            const name = prefix ? prefix + col : col;
            const item = new vscode.CompletionItem(name);
            item.insertText = name;
            item.kind = vscode.CompletionItemKind.Field;
            // @todo? move cusor next to quote eg. Client.where('locked' => true) :id=>
            cols.push(item);
        }
    }
    return cols;
}
async function getMethods(fileAbsPath) {
    const methods = [];
    let markAsStart = false, markAsEnd = false;
    const fileStream = fs.createReadStream(fileAbsPath);
    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity,
    });
    for await (const lineText of rl) {
        if (/^class\s+<<\s+self/.test(lineText)) {
            markAsStart = true;
            markAsEnd = false;
        }
        if (/^private$/.test(lineText)) {
            markAsEnd = true;
        }
        if (markAsEnd)
            continue;
        if (markAsStart && PATTERNS.FUNCTION_DECLARATON.test(lineText)) {
            const func = lineText.replace(PATTERNS.FUNCTION_DECLARATON, '');
            const item = new vscode.CompletionItem(func);
            item.insertText = func;
            item.kind = vscode.CompletionItemKind.Method;
            methods.push(item);
        }
    }
    return methods;
}
class RailsCompletionItemProvider {
    // private pkgsList = new Map<string, string>();
    provideCompletionItems(document, position, token) {
        return this.provideCompletionItemsInternal(document, position, token, vscode.workspace.getConfiguration('rails', document.uri));
    }
    provideCompletionItemsInternal(document, position, token, config) {
        return new Promise(async (resolve, reject) => {
            const suggestions = [];
            const filename = document.fileName;
            const lineText = document.lineAt(position.line).text;
            const lineTillCurrentPosition = lineText.substr(0, position.character);
            console.log(`lineTillCurrentPosition:${lineTillCurrentPosition}`);
            const character = lineTillCurrentPosition[lineTillCurrentPosition.length - 1];
            // let autocompleteUnimportedPackages = config['autocompleteUnimportedPackages'] === true && !lineText.match(/^(\s)*(import|package)(\s)+/);
            if (lineText.match(/^\s*\/\//)) {
                return resolve([]);
            }
            let triggerCharacter;
            switch (character) {
                case '.':
                    triggerCharacter = TriggerCharacter.dot;
                    break;
                case '"':
                case "'":
                    triggerCharacter = TriggerCharacter.quote;
                    break;
                case ':':
                    triggerCharacter = TriggerCharacter.colon;
            }
            console.log(`triggerCharacter:${triggerCharacter}`);
            // let inString = isPositionInString(document, position);
            // if (!inString && lineTillCurrentPosition.endsWith('\"')) {
            //     return resolve([]);
            // }
            // get current word
            let position2 = new vscode.Position(position.line, position.character - 1);
            if (triggerCharacter === TriggerCharacter.dot &&
                PATTERNS.CLASS_STATIC_METHOD_CALL.test(lineTillCurrentPosition)) {
                const [, id, model] = PATTERNS.CLASS_STATIC_METHOD_CALL.exec(lineTillCurrentPosition);
                position2 = new vscode.Position(position.line, lineText.indexOf(id));
            }
            const wordAtPosition = document.getWordRangeAtPosition(position2);
            if (!wordAtPosition) {
                return resolve(null);
            }
            const word = document.getText(wordAtPosition);
            let currentWord = '';
            if (wordAtPosition &&
                wordAtPosition.start.character < position.character) {
                currentWord = word.substr(0, position.character - wordAtPosition.start.character);
            }
            if (currentWord.match(/^\d+$/)) {
                return resolve([]);
            }
            console.log(wordAtPosition, currentWord, character);
            if (triggerCharacter === TriggerCharacter.dot) {
                let info, fileType;
                try {
                    info = await definitionLocation(document, position2);
                    fileType = dectFileType(info.file);
                }
                catch (e) {
                    console.error(e);
                    reject(e);
                }
                switch (fileType) {
                    case FileType.Model: // model static methods
                        suggestions.push(...modelQueryInterface());
                        const methods = await getMethods(info.file);
                        suggestions.push(...methods);
                        const cols = await getCols(info.file, position, triggerCharacter, 'find_by_');
                        suggestions.push(...cols);
                        break;
                }
            }
            else if (triggerCharacter === TriggerCharacter.colon ||
                triggerCharacter === TriggerCharacter.quote) {
                if (PATTERNS.CLASS_STATIC_METHOD_CALL.test(lineTillCurrentPosition)) {
                    const [, id, model] = PATTERNS.CLASS_STATIC_METHOD_CALL.exec(lineTillCurrentPosition);
                    const position2 = new vscode.Position(position.line, lineText.indexOf(id));
                    let info, fileType;
                    try {
                        info = await definitionLocation(document, position2);
                        fileType = dectFileType(info.file);
                    }
                    catch (e) {
                        console.error(e);
                        reject(e);
                    }
                    switch (fileType) {
                        case FileType.Model: // model field suggestion
                            const cols = await getCols(info.file);
                            suggestions.push(...cols);
                            break;
                    }
                }
                else if (PATTERNS.RENDER_DECLARATION.test(lineTillCurrentPosition.trim()) ||
                    PATTERNS.RENDER_TO_STRING_DECLARATION.test(lineTillCurrentPosition.trim()) ||
                    PATTERNS.LAYOUT_DECLARATION.test(lineTillCurrentPosition.trim())) {
                    const matches = lineTillCurrentPosition.match(/([a-z]+)/g), id = matches.pop();
                    console.log('render type:' + id);
                    switch (id) {
                        case 'partial': // @todo if it is not controller related partial
                            {
                                const relativeFileName = vscode.workspace.asRelativePath(document.fileName), rh = new RailsHelper(relativeFileName, null);
                                const paths = rh.searchPaths().filter((v) => {
                                    return (v.startsWith(REL_LAYOUTS) === false &&
                                        v.startsWith(REL_VIEWS) === true);
                                });
                                console.log(`paths:${paths}`);
                                const items = await rh.generateList(paths).then((list) => {
                                    const partials = list
                                        .map((v) => path.parse(v).name.split('.')[0])
                                        .filter((v) => {
                                        return v.startsWith('_');
                                    });
                                    console.log(`partials:${partials}`);
                                    const items = partials.map((v) => {
                                        const name = v.substring(1);
                                        const item = new vscode.CompletionItem(name);
                                        item.insertText =
                                            triggerCharacter === TriggerCharacter.colon
                                                ? " '" + name + "'"
                                                : name;
                                        item.kind = vscode.CompletionItemKind.File;
                                        return item;
                                    });
                                    return items;
                                });
                                suggestions.push(...items);
                            }
                            break;
                        case 'template': // @todo if it is base application controller or helper suggest all views
                            {
                                const relativeFileName = vscode.workspace.asRelativePath(document.fileName), rh = new RailsHelper(relativeFileName, null);
                                const paths = rh.searchPaths().filter((v) => {
                                    return (v.startsWith(REL_LAYOUTS) === false &&
                                        v.startsWith(REL_VIEWS) === true);
                                });
                                const items = await rh.generateList(paths).then((list) => {
                                    const templates = list
                                        .map((v) => path.basename(v.substring(REL_VIEWS.length + 1).split('.')[0]))
                                        .filter((v) => path.basename(v).startsWith('_') === false);
                                    const items = templates.map((v) => {
                                        const name = v;
                                        const item = new vscode.CompletionItem(name);
                                        item.insertText =
                                            triggerCharacter === TriggerCharacter.colon
                                                ? " '" + name + "'"
                                                : name;
                                        item.kind = vscode.CompletionItemKind.File;
                                        return item;
                                    });
                                    return items;
                                });
                                suggestions.push(...items);
                                if (TriggerCharacter.quote === triggerCharacter) {
                                    const views = await vscode.workspace
                                        .findFiles(path.join(REL_VIEWS, '**'), REL_LAYOUTS)
                                        .then((res) => {
                                        return res
                                            .filter((v) => {
                                            const p = vscode.workspace.asRelativePath(v);
                                            return (paths.some((v2) => {
                                                return !micromatch_1(p, v2);
                                            }) || path.basename(p).startsWith('_'));
                                        })
                                            .map((i) => {
                                            const name = vscode.workspace
                                                .asRelativePath(i)
                                                .substring(REL_VIEWS.length + 1)
                                                .split('.')[0], item = new vscode.CompletionItem(name);
                                            item.insertText =
                                                triggerCharacter === TriggerCharacter.colon
                                                    ? " '" + name + "'"
                                                    : name;
                                            item.kind = vscode.CompletionItemKind.File;
                                            return item;
                                        });
                                    });
                                    suggestions.push(...views);
                                }
                            }
                            break;
                        case 'layout':
                            {
                                const views = await vscode.workspace
                                    .findFiles(path.join(REL_LAYOUTS, '**'), null)
                                    .then((res) => {
                                    return res.map((i) => {
                                        const name = vscode.workspace
                                            .asRelativePath(i)
                                            .substring(REL_LAYOUTS.length + 1)
                                            .split('.')[0], item = new vscode.CompletionItem(name);
                                        item.insertText =
                                            triggerCharacter === TriggerCharacter.colon
                                                ? " '" + name + "'"
                                                : name;
                                        item.kind = vscode.CompletionItemKind.File;
                                        return item;
                                    });
                                });
                                suggestions.push(...views);
                            }
                            break;
                    }
                }
            }
            resolve(suggestions);
        });
    }
}

const missingFilelMsg$1 = 'Missing file: ';
const NO_DEFINITION = 'No definition found!';
/**
 * narrow view finding path
 * @param _path parts after app/views
 * @param fileType
 * @param viewType
 * @returns promised view glob path
 */
function findViews$1(document, position, _path, fileType = '', viewType = 'partial' // partial or template
) {
    let filePath;
    const isSameDirPartial = /^[a-zA-Z0-9_-]+$/.test(_path), isViewsRelativePath = _path.indexOf('/') !== -1, ext = path.parse(_path).ext, _underscore = viewType.endsWith('partial') ? '_' : '', // viewType could be "json.partial"
    definitionInformation = {
        file: null,
        line: 0,
        column: 0,
    };
    if (isSameDirPartial) {
        const fileName = vscode.workspace.asRelativePath(document.fileName), dir = path.dirname(fileName);
        filePath = path.join(dir, `${_underscore}${_path}${fileType}.*`);
        definitionInformation.file = filePath;
    }
    else if (ext) {
        filePath = path.join(REL_VIEWS, _path);
        definitionInformation.file = filePath;
    }
    else if (isViewsRelativePath) {
        filePath = path.join(REL_VIEWS, path.dirname(_path), `${_underscore}${path.basename(_path)}${fileType}.*`);
        definitionInformation.file = filePath;
    }
    else {
        return Promise.reject('not a view');
    }
    console.log(viewType, filePath, isViewsRelativePath, isSameDirPartial);
    const promise = new Promise(definitionResolver$1(document, definitionInformation));
    return promise;
}
const FileTypeHandlers$1 = new Map([
    [FileType.View, findViews$1],
]);
/**
 *
 * @returns Promise callback resolved glob path(exact path)
 */
function definitionResolver$1(document, definitionInformation, exclude = null, maxNum = null) {
    return (resolve, reject) => {
        vscode.workspace
            .findFiles(vscode.workspace.asRelativePath(definitionInformation.file))
            .then((uris) => {
            if (!uris.length) {
                reject(missingFilelMsg$1 + definitionInformation.file);
            }
            else if (uris.length === 1) {
                definitionInformation.file = uris[0].fsPath;
                resolve(definitionInformation);
            }
            else {
                // let relativeFileName = vscode.workspace.asRelativePath(
                //     document.fileName
                //   ),
                //   rh = new RailsHelper(relativeFileName, null);
                // rh.showQuickPick(
                //   uris.map(uri => vscode.workspace.asRelativePath(uri.path))
                // );
                reject(NO_DEFINITION);
            }
        }, () => {
            reject(missingFilelMsg$1 + definitionInformation.file);
        });
    };
}
/**
 * interaction with provideDefinition
 * @returns Thenable<RailsDefinitionInformation>
 */
function definitionLocation$1(document, position, goConfig, token) {
    const wordRange = document.getWordRangeAtPosition(position, /([A-Za-z\/0-9_-]+)(\.[A-Za-z0-9]+)*/);
    const lineText = document.lineAt(position.line).text.trim();
    const lineStartToWord = document
        .getText(new vscode.Range(new vscode.Position(position.line, 0), wordRange.end))
        .trim();
    const lineStartToWordStart = document
        .getText(new vscode.Range(new vscode.Position(position.line, 0), wordRange.start))
        .trim();
    const matched = lineStartToWordStart.match(PATTERNS.RENDER_MATCH), preWord = matched && matched[matched.length - 1], viewType = preWord && !preWord.includes('render') ? preWord : 'partial';
    console.log(`viewType:${viewType}`);
    const word = document.getText(wordRange);
    console.log(word);
    // if (lineText.startsWith("/") || word.match(/^\d+.?\d+$/)) {
    //   return Promise.resolve(null);
    // }
    if (!goConfig) {
        goConfig = vscode.workspace.getConfiguration('rails');
    }
    const symbol = new RegExp('(((::)?[A-Za-z]+)*(::)?' + word + ')').exec(lineStartToWord)[1];
    if (RAILS.has(symbol)) {
        return Promise.reject('Rails symbols');
    }
    const renderMatched = lineText.match(VIEWS_PATTERNS.RENDER_PATTERN);
    if (renderMatched) {
        console.log(renderMatched);
        return findViews$1(document, position, word, '', viewType);
    }
    else {
        return findViews$1(document, position, word, '', viewType);
    }
}
class ViewDefinitionProvider {
    constructor(goConfig) {
        this.goConfig = null;
        this.goConfig = goConfig;
    }
    provideDefinition(document, position, token) {
        return definitionLocation$1(document, position, this.goConfig).then((definitionInfo) => {
            if (definitionInfo === null || definitionInfo.file === null)
                return null;
            const definitionResource = vscode.Uri.file(definitionInfo.file);
            const pos = new vscode.Position(definitionInfo.line, definitionInfo.column || 0 // required here otherwise rais "Invalid arguments."
            );
            return new vscode.Location(definitionResource, pos);
        }, (err) => {
            if (err) {
                // Prompt for missing tool is located here so that the
                // prompts dont show up on hover or signature help
                if (typeof err === 'string' && err.startsWith(missingFilelMsg$1)) ;
                else {
                    return Promise.reject(NO_DEFINITION);
                }
            }
            return Promise.reject(NO_DEFINITION);
        });
    }
}

var bind = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber$2(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject$2(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject$2(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

var utils$2 = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber$2,
  isObject: isObject$2,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
var buildURL = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$2.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils$2.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils$2.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils$2.forEach(val, function parseValue(v) {
        if (utils$2.isDate(v)) {
          v = v.toISOString();
        } else if (utils$2.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils$2.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

var InterceptorManager_1 = InterceptorManager;

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
var transformData = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils$2.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

var isCancel = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
  utils$2.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
var enhanceError = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
var createError = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
var settle = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
var isAbsoluteURL = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
var combineURLs = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
var buildFullPath = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils$2.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils$2.trim(line.substr(0, i)).toLowerCase();
    val = utils$2.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

var isURLSameOrigin = (
  utils$2.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils$2.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

var cookies = (
  utils$2.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils$2.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils$2.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils$2.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils$2.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils$2.isStandardBrowserEnv()) {
      var cookies$1 = cookies;

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies$1.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$2.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils$2.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse$2(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse$2(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var debug = createCommonjsModule(function (module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = ms;

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
});

var browser = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
});

var hasFlag = (flag, argv) => {
	argv = argv || process.argv;
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const pos = argv.indexOf(prefix + flag);
	const terminatorPos = argv.indexOf('--');
	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};

const env = process.env;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false')) {
	forceColor = false;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = true;
}
if ('FORCE_COLOR' in env) {
	forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === false) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const min = forceColor ? 1 : 0;

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	if (env.TERM === 'dumb') {
		return min;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

var supportsColor_1 = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};

var node = createCommonjsModule(function (module, exports) {
/**
 * Module dependencies.
 */




/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [ 6, 2, 3, 4, 5, 1 ];

try {
  var supportsColor = supportsColor_1;
  if (supportsColor && supportsColor.level >= 2) {
    exports.colors = [
      20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68,
      69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134,
      135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
      172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204,
      205, 206, 207, 208, 209, 214, 215, 220, 221
    ];
  }
} catch (err) {
  // swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return /^debug_/i.test(key);
}).reduce(function (obj, key) {
  // camel-case
  var prop = key
    .substring(6)
    .toLowerCase()
    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

  // coerce string value into JS value
  var val = process.env[key];
  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
  else if (val === 'null') val = null;
  else val = Number(val);

  obj[prop] = val;
  return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts
    ? Boolean(exports.inspectOpts.colors)
    : tty.isatty(process.stderr.fd);
}

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

exports.formatters.o = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util$1.inspect(v, this.inspectOpts)
    .split('\n').map(function(str) {
      return str.trim()
    }).join(' ');
};

/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */

exports.formatters.O = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util$1.inspect(v, this.inspectOpts);
};

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var name = this.namespace;
  var useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
    var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';

    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
  } else {
    args[0] = getDate() + name + ' ' + args[0];
  }
}

function getDate() {
  if (exports.inspectOpts.hideDate) {
    return '';
  } else {
    return new Date().toISOString() + ' ';
  }
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log() {
  return process.stderr.write(util$1.format.apply(util$1, arguments) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  if (null == namespaces) {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  } else {
    process.env.DEBUG = namespaces;
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init (debug) {
  debug.inspectOpts = {};

  var keys = Object.keys(exports.inspectOpts);
  for (var i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */

exports.enable(load());
});

var src = createCommonjsModule(function (module) {
/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer') {
  module.exports = browser;
} else {
  module.exports = node;
}
});

var Writable = stream.Writable;
var debug$1 = src("follow-redirects");

// RFC7231§4.2.1: Of the request methods defined by this specification,
// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };

// Create handlers that pass events from native requests
var eventHandlers = Object.create(null);
["abort", "aborted", "error", "socket", "timeout"].forEach(function (event) {
  eventHandlers[event] = function (arg) {
    this._redirectable.emit(event, arg);
  };
});

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  options.headers = options.headers || {};
  this._options = options;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    self._processResponse(response);
  };

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Validate input and shift parameters if necessary
  if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
    throw new Error("data should be a string, Buffer or Uint8Array");
  }
  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new Error("Request body larger than maxBodyLength limit"));
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  }
  else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Write data and end
  var currentRequest = this._currentRequest;
  this.write(data || "", encoding, function () {
    currentRequest.end(null, null, callback);
  });
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Proxy all other public ClientRequest methods
[
  "abort", "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive", "setTimeout",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new Error("Unsupported protocol " + protocol));
    return;
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.substr(0, protocol.length - 1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  this._currentUrl = url__default.format(this._options);

  // Set up event handlers
  request._redirectable = this;
  for (var event in eventHandlers) {
    /* istanbul ignore else */
    if (event) {
      request.on(event, eventHandlers[event]);
    }
  }

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end.
    var i = 0;
    var buffers = this._requestBodyBuffers;
    (function writeNext() {
      if (i < buffers.length) {
        var buffer = buffers[i++];
        request.write(buffer.data, buffer.encoding, writeNext);
      }
      else {
        request.end();
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: response.statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.
  var location = response.headers.location;
  if (location && this._options.followRedirects !== false &&
      response.statusCode >= 300 && response.statusCode < 400) {
    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
      this.emit("error", new Error("Max redirects exceeded."));
      return;
    }

    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe […],
    // since the user might not wish to redirect an unsafe request.
    // RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
    // that the target resource resides temporarily under a different URI
    // and the user agent MUST NOT change the request method
    // if it performs an automatic redirection to that URI.
    var header;
    var headers = this._options.headers;
    if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
      this._options.method = "GET";
      // Drop a possible entity and headers related to it
      this._requestBodyBuffers = [];
      for (header in headers) {
        if (/^content-/i.test(header)) {
          delete headers[header];
        }
      }
    }

    // Drop the Host header, as the redirect might lead to a different host
    if (!this._isRedirect) {
      for (header in headers) {
        if (/^host$/i.test(header)) {
          delete headers[header];
        }
      }
    }

    // Perform the redirected request
    var redirectUrl = url__default.resolve(this._currentUrl, location);
    debug$1("redirecting to", redirectUrl);
    Object.assign(this._options, url__default.parse(redirectUrl));
    this._isRedirect = true;
    this._performRequest();

    // Discard the remainder of the response to avoid waiting for data
    response.destroy();
  }
  else {
    // The response is not a redirect; return it as-is
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
  }
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    wrappedProtocol.request = function (options, callback) {
      if (typeof options === "string") {
        options = url__default.parse(options);
        options.maxRedirects = exports.maxRedirects;
      }
      else {
        options = Object.assign({
          protocol: protocol,
          maxRedirects: exports.maxRedirects,
          maxBodyLength: exports.maxBodyLength,
        }, options);
      }
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug$1("options", options);
      return new RedirectableRequest(options, callback);
    };

    // Executes a GET request, following redirects
    wrappedProtocol.get = function (options, callback) {
      var request = wrappedProtocol.request(options, callback);
      request.end();
      return request;
    };
  });
  return exports;
}

// Exports
var followRedirects = wrap({ http: http, https: https });
var wrap_1 = wrap;
followRedirects.wrap = wrap_1;

var name = "axios";
var version = "0.19.2";
var description = "Promise based HTTP client for the browser and node.js";
var main = "index.js";
var scripts = {
	test: "grunt test && bundlesize",
	start: "node ./sandbox/server.js",
	build: "NODE_ENV=production grunt build",
	preversion: "npm test",
	version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
	postversion: "git push && git push --tags",
	examples: "node ./examples/server.js",
	coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
	fix: "eslint --fix lib/**/*.js"
};
var repository = {
	type: "git",
	url: "https://github.com/axios/axios.git"
};
var keywords = [
	"xhr",
	"http",
	"ajax",
	"promise",
	"node"
];
var author = "Matt Zabriskie";
var license = "MIT";
var bugs = {
	url: "https://github.com/axios/axios/issues"
};
var homepage = "https://github.com/axios/axios";
var devDependencies = {
	bundlesize: "^0.17.0",
	coveralls: "^3.0.0",
	"es6-promise": "^4.2.4",
	grunt: "^1.0.2",
	"grunt-banner": "^0.6.0",
	"grunt-cli": "^1.2.0",
	"grunt-contrib-clean": "^1.1.0",
	"grunt-contrib-watch": "^1.0.0",
	"grunt-eslint": "^20.1.0",
	"grunt-karma": "^2.0.0",
	"grunt-mocha-test": "^0.13.3",
	"grunt-ts": "^6.0.0-beta.19",
	"grunt-webpack": "^1.0.18",
	"istanbul-instrumenter-loader": "^1.0.0",
	"jasmine-core": "^2.4.1",
	karma: "^1.3.0",
	"karma-chrome-launcher": "^2.2.0",
	"karma-coverage": "^1.1.1",
	"karma-firefox-launcher": "^1.1.0",
	"karma-jasmine": "^1.1.1",
	"karma-jasmine-ajax": "^0.1.13",
	"karma-opera-launcher": "^1.0.0",
	"karma-safari-launcher": "^1.0.0",
	"karma-sauce-launcher": "^1.2.0",
	"karma-sinon": "^1.0.5",
	"karma-sourcemap-loader": "^0.3.7",
	"karma-webpack": "^1.7.0",
	"load-grunt-tasks": "^3.5.2",
	minimist: "^1.2.0",
	mocha: "^5.2.0",
	sinon: "^4.5.0",
	typescript: "^2.8.1",
	"url-search-params": "^0.10.0",
	webpack: "^1.13.1",
	"webpack-dev-server": "^1.14.1"
};
var browser$1 = {
	"./lib/adapters/http.js": "./lib/adapters/xhr.js"
};
var typings = "./index.d.ts";
var dependencies = {
	"follow-redirects": "1.5.10"
};
var bundlesize = [
	{
		path: "./dist/axios.min.js",
		threshold: "5kB"
	}
];
var _package = {
	name: name,
	version: version,
	description: description,
	main: main,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage,
	devDependencies: devDependencies,
	browser: browser$1,
	typings: typings,
	dependencies: dependencies,
	bundlesize: bundlesize
};

var _package$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  name: name,
  version: version,
  description: description,
  main: main,
  scripts: scripts,
  repository: repository,
  keywords: keywords,
  author: author,
  license: license,
  bugs: bugs,
  homepage: homepage,
  devDependencies: devDependencies,
  browser: browser$1,
  typings: typings,
  dependencies: dependencies,
  bundlesize: bundlesize,
  'default': _package
});

var pkg = getCjsExportFromNamespace(_package$1);

var httpFollow = followRedirects.http;
var httpsFollow = followRedirects.https;






var isHttps = /https:?/;

/*eslint consistent-return:0*/
var http_1 = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var resolve = function resolve(value) {
      resolvePromise(value);
    };
    var reject = function reject(value) {
      rejectPromise(value);
    };
    var data = config.data;
    var headers = config.headers;

    // Set User-Agent (required by some servers)
    // Only set header if it hasn't been set in config
    // See https://github.com/axios/axios/issues/69
    if (!headers['User-Agent'] && !headers['user-agent']) {
      headers['User-Agent'] = 'axios/' + pkg.version;
    }

    if (data && !utils$2.isStream(data)) {
      if (Buffer.isBuffer(data)) ; else if (utils$2.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils$2.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          config
        ));
      }

      // Add Content-Length header if data exists
      headers['Content-Length'] = data.length;
    }

    // HTTP basic authentication
    var auth = undefined;
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    }

    // Parse url
    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url__default.parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth) {
      delete headers.Authorization;
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;
    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
      if (proxyUrl) {
        var parsedProxyUrl = url__default.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });

          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }
            if (proxyElement === '*') {
              return true;
            }
            if (proxyElement[0] === '.' &&
                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }


        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      options.port = proxy.port;
      options.path = protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path;

      // Basic proxy authorization
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      }
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxContentLength && config.maxContentLength > -1) {
      options.maxBodyLength = config.maxContentLength;
    }

    // Create the request
    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return;

      // uncompress the response body transparently if required
      var stream = res;
      switch (res.headers['content-encoding']) {
      /*eslint default-case:0*/
      case 'gzip':
      case 'compress':
      case 'deflate':
        // add the unzipper to the body stream processing pipeline
        stream = (res.statusCode === 204) ? stream : stream.pipe(zlib.createUnzip());

        // remove the content-encoding in order to not confuse downstream operations
        delete res.headers['content-encoding'];
        break;
      }

      // return the last request in case of redirects
      var lastRequest = res.req || req;

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              config, null, lastRequest));
          }
        });

        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });

        stream.on('end', function handleStreamEnd() {
          var responseData = Buffer.concat(responseBuffer);
          if (config.responseType !== 'arraybuffer') {
            responseData = responseData.toString(config.responseEncoding);
          }

          response.data = responseData;
          settle(resolve, reject, response);
        });
      }
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      if (req.aborted) return;
      reject(enhanceError(err, config, null, req));
    });

    // Handle request timeout
    if (config.timeout) {
      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(config.timeout, function handleRequestTimeout() {
        req.abort();
        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
      });
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (req.aborted) return;

        req.abort();
        reject(cancel);
      });
    }

    // Send the request
    if (utils$2.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils$2.isUndefined(headers) && utils$2.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = xhr;
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = http_1;
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils$2.isFormData(data) ||
      utils$2.isArrayBuffer(data) ||
      utils$2.isBuffer(data) ||
      utils$2.isStream(data) ||
      utils$2.isFile(data) ||
      utils$2.isBlob(data)
    ) {
      return data;
    }
    if (utils$2.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$2.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils$2.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils$2.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils$2.merge(DEFAULT_CONTENT_TYPE);
});

var defaults_1 = defaults;

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
var dispatchRequest = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils$2.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils$2.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults_1.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
var mergeConfig = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
  var defaultToConfig2Keys = [
    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath'
  ];

  utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils$2.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
    if (utils$2.isObject(config2[prop])) {
      config[prop] = utils$2.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils$2.isObject(config1[prop])) {
      config[prop] = utils$2.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys);

  var otherKeys = Object
    .keys(config2)
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils$2.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager_1(),
    response: new InterceptorManager_1()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils$2.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils$2.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

var Axios_1 = Axios;

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

var Cancel_1 = Cancel;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel_1(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

var CancelToken_1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
var spread = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios_1(defaultConfig);
  var instance = bind(Axios_1.prototype.request, context);

  // Copy axios.prototype to instance
  utils$2.extend(instance, Axios_1.prototype, context);

  // Copy context to instance
  utils$2.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults_1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios_1;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = Cancel_1;
axios.CancelToken = CancelToken_1;
axios.isCancel = isCancel;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;

var axios_1 = axios;

// Allow use of default import syntax in TypeScript
var _default = axios;
axios_1.default = _default;

var axios$1 = axios_1;

// Track currently webview panel
// var currentPanel: vscode.WebviewPanel | undefined = undefined;
function injectBase(html, base) {
    const policy = `<meta http-equiv="Content-Security-Policy" content="default-src 'self'; img-src vscode-resource: http:; script-src vscode-resource: http: 'unsafe-inline' ; style-src vscode-resource: http: 'unsafe-inline';">`;
    const _base = path.dirname(base) + '/';
    // Remove any <base> elements inside <head>
    let _html = html.replace(/(<[^>/]*head[^>]*>)[\s\S]*?(<[^>/]*base[^>]*>)[\s\S]*?(<[^>]*head[^>]*>)/gim, '$1 $3');
    // // Add <base> just before </head>
    // html = html.replace(
    //   /(<[^>/]*head[^>]*>[\s\S]*?)(<[^>]*head[^>]*>)/gim,
    // );
    _html = _html.replace(/<head>/gim, `<head><base href="${_base}">\n${policy}\n<style> body{margin:20px;}</style>`);
    return _html;
}
const CancelToken$1 = axios$1.CancelToken;
const source = CancelToken$1.source();
function showSide(symbol, html, context) {
    const columnToShowIn = vscode.window.activeTextEditor
        ? vscode.window.activeTextEditor.viewColumn
        : undefined;
    // if (currentPanel) {
    //   // If we already have a panel, show it in the target column
    //   currentPanel.webview.html = html;
    //   currentPanel.title = `Document ${symbol}`;
    //   currentPanel.reveal(columnToShowIn);
    // } else {
    const currentPanel = vscode.window.createWebviewPanel('Document', `Document ${symbol}`, vscode.ViewColumn.Two, {
        // Enable scripts in the webview
        enableScripts: true,
        retainContextWhenHidden: true,
    });
    currentPanel.webview.html = html;
    // Reset when the current panel is closed
    // currentPanel.onDidDispose(
    //   () => {
    //     currentPanel = undefined;
    //     source.cancel('request canceled as WebviewPanel Disposed.');
    //   },
    //   null,
    //   context.subscriptions
    // );
}
function doRequest(_url, symbol) {
    // @ts-ignore
    const request = axios$1({
        url: url.parse(_url),
        timeout: 5e3,
        cancelToken: source.token,
    })
        .then((r) => {
        if (typeof r.data === 'string') {
            const html = injectBase(r.data, _url);
            showSide(symbol, html);
        }
        else {
            const html = 'No valid response content.';
            showSide(symbol, html);
        }
    })
        .catch((err) => {
        console.error(err);
        showSide(symbol, err.toString());
    });
}
function viewDoc() {
    // tslint:disable-next-line: no-this-assignment
    const context = this;
    const document = vscode.window.activeTextEditor.document;
    const position = vscode.window.activeTextEditor.selection.active;
    const wordRange = document.getWordRangeAtPosition(position);
    const word = document.getText(wordRange);
    const lineStartToWord = document
        .getText(new vscode.Range(new vscode.Position(position.line, 0), wordRange.end))
        .trim();
    const symbol = new RegExp('(((::)?[A-Za-z]+)*(::)?' + word + ')').exec(lineStartToWord)[1];
    console.log(`symbol:${symbol}`);
    let endpoint = '';
    const isRailsSymbol = RAILS.has(symbol.toLowerCase());
    const isRubySymbol = RUBY.has(symbol.toLowerCase());
    if (symbol && (isRailsSymbol || isRubySymbol)) {
        endpoint = symbol.replace('::', '/');
    }
    console.log(`symbol:${symbol},endpoint:${endpoint}`);
    if (endpoint === null) {
        return;
    }
    let url = '';
    if (isRubySymbol) {
        url = `http://docs.rubydocs.org/ruby-${VERSION.replace(/\./g, '-')}/classes/${endpoint}.html`;
    }
    else if (isRailsSymbol) {
        url = `http://api.rubyonrails.org/classes/${endpoint}.html`;
    }
    else {
        showSide(symbol, 'No matched symbol on extension side.');
        return;
    }
    console.log(isRailsSymbol, isRubySymbol, url);
    // let info = vscode.window.showInformationMessage("Rails:Document-loading...")
    doRequest.call(context, url, symbol);
}

/*jshint node:true */

function OutputLine(parent) {
  this.__parent = parent;
  this.__character_count = 0;
  // use indent_count as a marker for this.__lines that have preserved indentation
  this.__indent_count = -1;
  this.__alignment_count = 0;
  this.__wrap_point_index = 0;
  this.__wrap_point_character_count = 0;
  this.__wrap_point_indent_count = -1;
  this.__wrap_point_alignment_count = 0;

  this.__items = [];
}

OutputLine.prototype.clone_empty = function() {
  var line = new OutputLine(this.__parent);
  line.set_indent(this.__indent_count, this.__alignment_count);
  return line;
};

OutputLine.prototype.item = function(index) {
  if (index < 0) {
    return this.__items[this.__items.length + index];
  } else {
    return this.__items[index];
  }
};

OutputLine.prototype.has_match = function(pattern) {
  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
    if (this.__items[lastCheckedOutput].match(pattern)) {
      return true;
    }
  }
  return false;
};

OutputLine.prototype.set_indent = function(indent, alignment) {
  if (this.is_empty()) {
    this.__indent_count = indent || 0;
    this.__alignment_count = alignment || 0;
    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
  }
};

OutputLine.prototype._set_wrap_point = function() {
  if (this.__parent.wrap_line_length) {
    this.__wrap_point_index = this.__items.length;
    this.__wrap_point_character_count = this.__character_count;
    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
  }
};

OutputLine.prototype._should_wrap = function() {
  return this.__wrap_point_index &&
    this.__character_count > this.__parent.wrap_line_length &&
    this.__wrap_point_character_count > this.__parent.next_line.__character_count;
};

OutputLine.prototype._allow_wrap = function() {
  if (this._should_wrap()) {
    this.__parent.add_new_line();
    var next = this.__parent.current_line;
    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
    next.__items = this.__items.slice(this.__wrap_point_index);
    this.__items = this.__items.slice(0, this.__wrap_point_index);

    next.__character_count += this.__character_count - this.__wrap_point_character_count;
    this.__character_count = this.__wrap_point_character_count;

    if (next.__items[0] === " ") {
      next.__items.splice(0, 1);
      next.__character_count -= 1;
    }
    return true;
  }
  return false;
};

OutputLine.prototype.is_empty = function() {
  return this.__items.length === 0;
};

OutputLine.prototype.last = function() {
  if (!this.is_empty()) {
    return this.__items[this.__items.length - 1];
  } else {
    return null;
  }
};

OutputLine.prototype.push = function(item) {
  this.__items.push(item);
  var last_newline_index = item.lastIndexOf('\n');
  if (last_newline_index !== -1) {
    this.__character_count = item.length - last_newline_index;
  } else {
    this.__character_count += item.length;
  }
};

OutputLine.prototype.pop = function() {
  var item = null;
  if (!this.is_empty()) {
    item = this.__items.pop();
    this.__character_count -= item.length;
  }
  return item;
};


OutputLine.prototype._remove_indent = function() {
  if (this.__indent_count > 0) {
    this.__indent_count -= 1;
    this.__character_count -= this.__parent.indent_size;
  }
};

OutputLine.prototype._remove_wrap_indent = function() {
  if (this.__wrap_point_indent_count > 0) {
    this.__wrap_point_indent_count -= 1;
  }
};
OutputLine.prototype.trim = function() {
  while (this.last() === ' ') {
    this.__items.pop();
    this.__character_count -= 1;
  }
};

OutputLine.prototype.toString = function() {
  var result = '';
  if (this.is_empty()) {
    if (this.__parent.indent_empty_lines) {
      result = this.__parent.get_indent_string(this.__indent_count);
    }
  } else {
    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
    result += this.__items.join('');
  }
  return result;
};

function IndentStringCache(options, baseIndentString) {
  this.__cache = [''];
  this.__indent_size = options.indent_size;
  this.__indent_string = options.indent_char;
  if (!options.indent_with_tabs) {
    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
  }

  // Set to null to continue support for auto detection of base indent
  baseIndentString = baseIndentString || '';
  if (options.indent_level > 0) {
    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
  }

  this.__base_string = baseIndentString;
  this.__base_string_length = baseIndentString.length;
}

IndentStringCache.prototype.get_indent_size = function(indent, column) {
  var result = this.__base_string_length;
  column = column || 0;
  if (indent < 0) {
    result = 0;
  }
  result += indent * this.__indent_size;
  result += column;
  return result;
};

IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
  var result = this.__base_string;
  column = column || 0;
  if (indent_level < 0) {
    indent_level = 0;
    result = '';
  }
  column += indent_level * this.__indent_size;
  this.__ensure_cache(column);
  result += this.__cache[column];
  return result;
};

IndentStringCache.prototype.__ensure_cache = function(column) {
  while (column >= this.__cache.length) {
    this.__add_column();
  }
};

IndentStringCache.prototype.__add_column = function() {
  var column = this.__cache.length;
  var indent = 0;
  var result = '';
  if (this.__indent_size && column >= this.__indent_size) {
    indent = Math.floor(column / this.__indent_size);
    column -= indent * this.__indent_size;
    result = new Array(indent + 1).join(this.__indent_string);
  }
  if (column) {
    result += new Array(column + 1).join(' ');
  }

  this.__cache.push(result);
};

function Output(options, baseIndentString) {
  this.__indent_cache = new IndentStringCache(options, baseIndentString);
  this.raw = false;
  this._end_with_newline = options.end_with_newline;
  this.indent_size = options.indent_size;
  this.wrap_line_length = options.wrap_line_length;
  this.indent_empty_lines = options.indent_empty_lines;
  this.__lines = [];
  this.previous_line = null;
  this.current_line = null;
  this.next_line = new OutputLine(this);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
  // initialize
  this.__add_outputline();
}

Output.prototype.__add_outputline = function() {
  this.previous_line = this.current_line;
  this.current_line = this.next_line.clone_empty();
  this.__lines.push(this.current_line);
};

Output.prototype.get_line_number = function() {
  return this.__lines.length;
};

Output.prototype.get_indent_string = function(indent, column) {
  return this.__indent_cache.get_indent_string(indent, column);
};

Output.prototype.get_indent_size = function(indent, column) {
  return this.__indent_cache.get_indent_size(indent, column);
};

Output.prototype.is_empty = function() {
  return !this.previous_line && this.current_line.is_empty();
};

Output.prototype.add_new_line = function(force_newline) {
  // never newline at the start of file
  // otherwise, newline only if we didn't just add one or we're forced
  if (this.is_empty() ||
    (!force_newline && this.just_added_newline())) {
    return false;
  }

  // if raw output is enabled, don't print additional newlines,
  // but still return True as though you had
  if (!this.raw) {
    this.__add_outputline();
  }
  return true;
};

Output.prototype.get_code = function(eol) {
  this.trim(true);

  // handle some edge cases where the last tokens
  // has text that ends with newline(s)
  var last_item = this.current_line.pop();
  if (last_item) {
    if (last_item[last_item.length - 1] === '\n') {
      last_item = last_item.replace(/\n+$/g, '');
    }
    this.current_line.push(last_item);
  }

  if (this._end_with_newline) {
    this.__add_outputline();
  }

  var sweet_code = this.__lines.join('\n');

  if (eol !== '\n') {
    sweet_code = sweet_code.replace(/[\n]/g, eol);
  }
  return sweet_code;
};

Output.prototype.set_wrap_point = function() {
  this.current_line._set_wrap_point();
};

Output.prototype.set_indent = function(indent, alignment) {
  indent = indent || 0;
  alignment = alignment || 0;

  // Next line stores alignment values
  this.next_line.set_indent(indent, alignment);

  // Never indent your first output indent at the start of the file
  if (this.__lines.length > 1) {
    this.current_line.set_indent(indent, alignment);
    return true;
  }

  this.current_line.set_indent();
  return false;
};

Output.prototype.add_raw_token = function(token) {
  for (var x = 0; x < token.newlines; x++) {
    this.__add_outputline();
  }
  this.current_line.set_indent(-1);
  this.current_line.push(token.whitespace_before);
  this.current_line.push(token.text);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
};

Output.prototype.add_token = function(printable_token) {
  this.__add_space_before_token();
  this.current_line.push(printable_token);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = this.current_line._allow_wrap();
};

Output.prototype.__add_space_before_token = function() {
  if (this.space_before_token && !this.just_added_newline()) {
    if (!this.non_breaking_space) {
      this.set_wrap_point();
    }
    this.current_line.push(' ');
  }
};

Output.prototype.remove_indent = function(index) {
  var output_length = this.__lines.length;
  while (index < output_length) {
    this.__lines[index]._remove_indent();
    index++;
  }
  this.current_line._remove_wrap_indent();
};

Output.prototype.trim = function(eat_newlines) {
  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

  this.current_line.trim();

  while (eat_newlines && this.__lines.length > 1 &&
    this.current_line.is_empty()) {
    this.__lines.pop();
    this.current_line = this.__lines[this.__lines.length - 1];
    this.current_line.trim();
  }

  this.previous_line = this.__lines.length > 1 ?
    this.__lines[this.__lines.length - 2] : null;
};

Output.prototype.just_added_newline = function() {
  return this.current_line.is_empty();
};

Output.prototype.just_added_blankline = function() {
  return this.is_empty() ||
    (this.current_line.is_empty() && this.previous_line.is_empty());
};

Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
  var index = this.__lines.length - 2;
  while (index >= 0) {
    var potentialEmptyLine = this.__lines[index];
    if (potentialEmptyLine.is_empty()) {
      break;
    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&
      potentialEmptyLine.item(-1) !== ends_with) {
      this.__lines.splice(index + 1, 0, new OutputLine(this));
      this.previous_line = this.__lines[this.__lines.length - 2];
      break;
    }
    index--;
  }
};

var Output_1 = Output;

var output = {
	Output: Output_1
};

/*jshint node:true */

function Token(type, text, newlines, whitespace_before) {
  this.type = type;
  this.text = text;

  // comments_before are
  // comments that have a new line before them
  // and may or may not have a newline after
  // this is a set of comments before
  this.comments_before = null; /* inline comment*/


  // this.comments_after =  new TokenStream(); // no new line before and newline after
  this.newlines = newlines || 0;
  this.whitespace_before = whitespace_before || '';
  this.parent = null;
  this.next = null;
  this.previous = null;
  this.opened = null;
  this.closed = null;
  this.directives = null;
}


var Token_1 = Token;

var token = {
	Token: Token_1
};

var acorn = createCommonjsModule(function (module, exports) {

// acorn used char codes to squeeze the last bit of performance out
// Beautifier is okay without that, so we're using regex
// permit # (23), $ (36), and @ (64). @ is used in ES7 decorators.
// 65 through 91 are uppercase letters.
// permit _ (95).
// 97 through 123 are lowercase letters.
var baseASCIIidentifierStartChars = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a";

// inside an identifier @ is not allowed but 0-9 are.
var baseASCIIidentifierChars = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a";

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
var nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";
var nonASCIIidentifierChars = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f";
//var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
//var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

var identifierStart = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + "])";
var identifierChars = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])*";

exports.identifier = new RegExp(identifierStart + identifierChars, 'g');
exports.identifierStart = new RegExp(identifierStart);
exports.identifierMatch = new RegExp("(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])+");

// Whether a single character denotes a newline.

exports.newline = /[\n\r\u2028\u2029]/;

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

// in javascript, these two differ
// in python they are the same, different methods are called on them
exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');
});

/*jshint node:true */

function Options(options, merge_child_field) {
  this.raw_options = _mergeOpts(options, merge_child_field);

  // Support passing the source text back with no change
  this.disabled = this._get_boolean('disabled');

  this.eol = this._get_characters('eol', 'auto');
  this.end_with_newline = this._get_boolean('end_with_newline');
  this.indent_size = this._get_number('indent_size', 4);
  this.indent_char = this._get_characters('indent_char', ' ');
  this.indent_level = this._get_number('indent_level');

  this.preserve_newlines = this._get_boolean('preserve_newlines', true);
  this.max_preserve_newlines = this._get_number('max_preserve_newlines', 32786);
  if (!this.preserve_newlines) {
    this.max_preserve_newlines = 0;
  }

  this.indent_with_tabs = this._get_boolean('indent_with_tabs', this.indent_char === '\t');
  if (this.indent_with_tabs) {
    this.indent_char = '\t';

    // indent_size behavior changed after 1.8.6
    // It used to be that indent_size would be
    // set to 1 for indent_with_tabs. That is no longer needed and
    // actually doesn't make sense - why not use spaces? Further,
    // that might produce unexpected behavior - tabs being used
    // for single-column alignment. So, when indent_with_tabs is true
    // and indent_size is 1, reset indent_size to 4.
    if (this.indent_size === 1) {
      this.indent_size = 4;
    }
  }

  // Backwards compat with 1.3.x
  this.wrap_line_length = this._get_number('wrap_line_length', this._get_number('max_char'));

  this.indent_empty_lines = this._get_boolean('indent_empty_lines');

  // valid templating languages ['django', 'erb', 'handlebars', 'php']
  // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
  // other values ignored
  this.templating = this._get_selection_list('templating', ['auto', 'none', 'django', 'erb', 'handlebars', 'php'], ['auto']);
}

Options.prototype._get_array = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || [];
  if (typeof option_value === 'object') {
    if (option_value !== null && typeof option_value.concat === 'function') {
      result = option_value.concat();
    }
  } else if (typeof option_value === 'string') {
    result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
  }
  return result;
};

Options.prototype._get_boolean = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = option_value === undefined ? !!default_value : !!option_value;
  return result;
};

Options.prototype._get_characters = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || '';
  if (typeof option_value === 'string') {
    result = option_value.replace(/\\r/, '\r').replace(/\\n/, '\n').replace(/\\t/, '\t');
  }
  return result;
};

Options.prototype._get_number = function(name, default_value) {
  var option_value = this.raw_options[name];
  default_value = parseInt(default_value, 10);
  if (isNaN(default_value)) {
    default_value = 0;
  }
  var result = parseInt(option_value, 10);
  if (isNaN(result)) {
    result = default_value;
  }
  return result;
};

Options.prototype._get_selection = function(name, selection_list, default_value) {
  var result = this._get_selection_list(name, selection_list, default_value);
  if (result.length !== 1) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result[0];
};


Options.prototype._get_selection_list = function(name, selection_list, default_value) {
  if (!selection_list || selection_list.length === 0) {
    throw new Error("Selection list cannot be empty.");
  }

  default_value = default_value || [selection_list[0]];
  if (!this._is_valid_selection(default_value, selection_list)) {
    throw new Error("Invalid Default Value!");
  }

  var result = this._get_array(name, default_value);
  if (!this._is_valid_selection(result, selection_list)) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can contain only the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result;
};

Options.prototype._is_valid_selection = function(result, selection_list) {
  return result.length && selection_list.length &&
    !result.some(function(item) { return selection_list.indexOf(item) === -1; });
};


// merges child options up with the parent options object
// Example: obj = {a: 1, b: {a: 2}}
//          mergeOpts(obj, 'b')
//
//          Returns: {a: 2}
function _mergeOpts(allOptions, childFieldName) {
  var finalOpts = {};
  allOptions = _normalizeOpts(allOptions);
  var name;

  for (name in allOptions) {
    if (name !== childFieldName) {
      finalOpts[name] = allOptions[name];
    }
  }

  //merge in the per type settings for the childFieldName
  if (childFieldName && allOptions[childFieldName]) {
    for (name in allOptions[childFieldName]) {
      finalOpts[name] = allOptions[childFieldName][name];
    }
  }
  return finalOpts;
}

function _normalizeOpts(options) {
  var convertedOpts = {};
  var key;

  for (key in options) {
    var newKey = key.replace(/-/g, "_");
    convertedOpts[newKey] = options[key];
  }
  return convertedOpts;
}

var Options_1 = Options;
var normalizeOpts = _normalizeOpts;
var mergeOpts = _mergeOpts;

var options = {
	Options: Options_1,
	normalizeOpts: normalizeOpts,
	mergeOpts: mergeOpts
};

var BaseOptions = options.Options;

var validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];

function Options$1(options) {
  BaseOptions.call(this, options, 'js');

  // compatibility, re
  var raw_brace_style = this.raw_options.brace_style || null;
  if (raw_brace_style === "expand-strict") { //graceful handling of deprecated option
    this.raw_options.brace_style = "expand";
  } else if (raw_brace_style === "collapse-preserve-inline") { //graceful handling of deprecated option
    this.raw_options.brace_style = "collapse,preserve-inline";
  } else if (this.raw_options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
    this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse";
    // } else if (!raw_brace_style) { //Nothing exists to set it
    //   raw_brace_style = "collapse";
  }

  //preserve-inline in delimited string will trigger brace_preserve_inline, everything
  //else is considered a brace_style and the last one only will have an effect

  var brace_style_split = this._get_selection_list('brace_style', ['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']);

  this.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option
  this.brace_style = "collapse";

  for (var bs = 0; bs < brace_style_split.length; bs++) {
    if (brace_style_split[bs] === "preserve-inline") {
      this.brace_preserve_inline = true;
    } else {
      this.brace_style = brace_style_split[bs];
    }
  }

  this.unindent_chained_methods = this._get_boolean('unindent_chained_methods');
  this.break_chained_methods = this._get_boolean('break_chained_methods');
  this.space_in_paren = this._get_boolean('space_in_paren');
  this.space_in_empty_paren = this._get_boolean('space_in_empty_paren');
  this.jslint_happy = this._get_boolean('jslint_happy');
  this.space_after_anon_function = this._get_boolean('space_after_anon_function');
  this.space_after_named_function = this._get_boolean('space_after_named_function');
  this.keep_array_indentation = this._get_boolean('keep_array_indentation');
  this.space_before_conditional = this._get_boolean('space_before_conditional', true);
  this.unescape_strings = this._get_boolean('unescape_strings');
  this.e4x = this._get_boolean('e4x');
  this.comma_first = this._get_boolean('comma_first');
  this.operator_position = this._get_selection('operator_position', validPositionValues);

  // For testing of beautify preserve:start directive
  this.test_output_raw = this._get_boolean('test_output_raw');

  // force this._options.space_after_anon_function to true if this._options.jslint_happy
  if (this.jslint_happy) {
    this.space_after_anon_function = true;
  }

}
Options$1.prototype = new BaseOptions();



var Options_1$1 = Options$1;

var options$1 = {
	Options: Options_1$1
};

/*jshint node:true */

var regexp_has_sticky = RegExp.prototype.hasOwnProperty('sticky');

function InputScanner(input_string) {
  this.__input = input_string || '';
  this.__input_length = this.__input.length;
  this.__position = 0;
}

InputScanner.prototype.restart = function() {
  this.__position = 0;
};

InputScanner.prototype.back = function() {
  if (this.__position > 0) {
    this.__position -= 1;
  }
};

InputScanner.prototype.hasNext = function() {
  return this.__position < this.__input_length;
};

InputScanner.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__input.charAt(this.__position);
    this.__position += 1;
  }
  return val;
};

InputScanner.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__input_length) {
    val = this.__input.charAt(index);
  }
  return val;
};

// This is a JavaScript only helper function (not in python)
// Javascript doesn't have a match method
// and not all implementation support "sticky" flag.
// If they do not support sticky then both this.match() and this.test() method
// must get the match and check the index of the match.
// If sticky is supported and set, this method will use it.
// Otherwise it will check that global is set, and fall back to the slower method.
InputScanner.prototype.__match = function(pattern, index) {
  pattern.lastIndex = index;
  var pattern_match = pattern.exec(this.__input);

  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
    if (pattern_match.index !== index) {
      pattern_match = null;
    }
  }

  return pattern_match;
};

InputScanner.prototype.test = function(pattern, index) {
  index = index || 0;
  index += this.__position;

  if (index >= 0 && index < this.__input_length) {
    return !!this.__match(pattern, index);
  } else {
    return false;
  }
};

InputScanner.prototype.testChar = function(pattern, index) {
  // test one character regex match
  var val = this.peek(index);
  pattern.lastIndex = 0;
  return val !== null && pattern.test(val);
};

InputScanner.prototype.match = function(pattern) {
  var pattern_match = this.__match(pattern, this.__position);
  if (pattern_match) {
    this.__position += pattern_match[0].length;
  } else {
    pattern_match = null;
  }
  return pattern_match;
};

InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
  var val = '';
  var match;
  if (starting_pattern) {
    match = this.match(starting_pattern);
    if (match) {
      val += match[0];
    }
  }
  if (until_pattern && (match || !starting_pattern)) {
    val += this.readUntil(until_pattern, until_after);
  }
  return val;
};

InputScanner.prototype.readUntil = function(pattern, until_after) {
  var val = '';
  var match_index = this.__position;
  pattern.lastIndex = this.__position;
  var pattern_match = pattern.exec(this.__input);
  if (pattern_match) {
    match_index = pattern_match.index;
    if (until_after) {
      match_index += pattern_match[0].length;
    }
  } else {
    match_index = this.__input_length;
  }

  val = this.__input.substring(this.__position, match_index);
  this.__position = match_index;
  return val;
};

InputScanner.prototype.readUntilAfter = function(pattern) {
  return this.readUntil(pattern, true);
};

InputScanner.prototype.get_regexp = function(pattern, match_from) {
  var result = null;
  var flags = 'g';
  if (match_from && regexp_has_sticky) {
    flags = 'y';
  }
  // strings are converted to regexp
  if (typeof pattern === "string" && pattern !== '') {
    // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
    result = new RegExp(pattern, flags);
  } else if (pattern) {
    result = new RegExp(pattern.source, flags);
  }
  return result;
};

InputScanner.prototype.get_literal_regexp = function(literal_string) {
  return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
};

/* css beautifier legacy helpers */
InputScanner.prototype.peekUntilAfter = function(pattern) {
  var start = this.__position;
  var val = this.readUntilAfter(pattern);
  this.__position = start;
  return val;
};

InputScanner.prototype.lookBack = function(testVal) {
  var start = this.__position - 1;
  return start >= testVal.length && this.__input.substring(start - testVal.length, start)
    .toLowerCase() === testVal;
};

var InputScanner_1 = InputScanner;

var inputscanner = {
	InputScanner: InputScanner_1
};

/*jshint node:true */

function TokenStream(parent_token) {
  // private
  this.__tokens = [];
  this.__tokens_length = this.__tokens.length;
  this.__position = 0;
  this.__parent_token = parent_token;
}

TokenStream.prototype.restart = function() {
  this.__position = 0;
};

TokenStream.prototype.isEmpty = function() {
  return this.__tokens_length === 0;
};

TokenStream.prototype.hasNext = function() {
  return this.__position < this.__tokens_length;
};

TokenStream.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__tokens[this.__position];
    this.__position += 1;
  }
  return val;
};

TokenStream.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__tokens_length) {
    val = this.__tokens[index];
  }
  return val;
};

TokenStream.prototype.add = function(token) {
  if (this.__parent_token) {
    token.parent = this.__parent_token;
  }
  this.__tokens.push(token);
  this.__tokens_length += 1;
};

var TokenStream_1 = TokenStream;

var tokenstream = {
	TokenStream: TokenStream_1
};

/*jshint node:true */

function Pattern(input_scanner, parent) {
  this._input = input_scanner;
  this._starting_pattern = null;
  this._match_pattern = null;
  this._until_pattern = null;
  this._until_after = false;

  if (parent) {
    this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
    this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
    this._until_pattern = this._input.get_regexp(parent._until_pattern);
    this._until_after = parent._until_after;
  }
}

Pattern.prototype.read = function() {
  var result = this._input.read(this._starting_pattern);
  if (!this._starting_pattern || result) {
    result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
  }
  return result;
};

Pattern.prototype.read_match = function() {
  return this._input.match(this._match_pattern);
};

Pattern.prototype.until_after = function(pattern) {
  var result = this._create();
  result._until_after = true;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.until = function(pattern) {
  var result = this._create();
  result._until_after = false;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.starting_with = function(pattern) {
  var result = this._create();
  result._starting_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype.matching = function(pattern) {
  var result = this._create();
  result._match_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype._create = function() {
  return new Pattern(this._input, this);
};

Pattern.prototype._update = function() {};

var Pattern_1 = Pattern;

var pattern = {
	Pattern: Pattern_1
};

var Pattern$1 = pattern.Pattern;

function WhitespacePattern(input_scanner, parent) {
  Pattern$1.call(this, input_scanner, parent);
  if (parent) {
    this._line_regexp = this._input.get_regexp(parent._line_regexp);
  } else {
    this.__set_whitespace_patterns('', '');
  }

  this.newline_count = 0;
  this.whitespace_before_token = '';
}
WhitespacePattern.prototype = new Pattern$1();

WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
  whitespace_chars += '\\t ';
  newline_chars += '\\n\\r';

  this._match_pattern = this._input.get_regexp(
    '[' + whitespace_chars + newline_chars + ']+', true);
  this._newline_regexp = this._input.get_regexp(
    '\\r\\n|[' + newline_chars + ']');
};

WhitespacePattern.prototype.read = function() {
  this.newline_count = 0;
  this.whitespace_before_token = '';

  var resulting_string = this._input.read(this._match_pattern);
  if (resulting_string === ' ') {
    this.whitespace_before_token = ' ';
  } else if (resulting_string) {
    var matches = this.__split(this._newline_regexp, resulting_string);
    this.newline_count = matches.length - 1;
    this.whitespace_before_token = matches[this.newline_count];
  }

  return resulting_string;
};

WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
  var result = this._create();
  result.__set_whitespace_patterns(whitespace_chars, newline_chars);
  result._update();
  return result;
};

WhitespacePattern.prototype._create = function() {
  return new WhitespacePattern(this._input, this);
};

WhitespacePattern.prototype.__split = function(regexp, input_string) {
  regexp.lastIndex = 0;
  var start_index = 0;
  var result = [];
  var next_match = regexp.exec(input_string);
  while (next_match) {
    result.push(input_string.substring(start_index, next_match.index));
    start_index = next_match.index + next_match[0].length;
    next_match = regexp.exec(input_string);
  }

  if (start_index < input_string.length) {
    result.push(input_string.substring(start_index, input_string.length));
  } else {
    result.push('');
  }

  return result;
};



var WhitespacePattern_1 = WhitespacePattern;

var whitespacepattern = {
	WhitespacePattern: WhitespacePattern_1
};

var InputScanner$1 = inputscanner.InputScanner;
var Token$1 = token.Token;
var TokenStream$1 = tokenstream.TokenStream;
var WhitespacePattern$1 = whitespacepattern.WhitespacePattern;

var TOKEN = {
  START: 'TK_START',
  RAW: 'TK_RAW',
  EOF: 'TK_EOF'
};

var Tokenizer = function(input_string, options) {
  this._input = new InputScanner$1(input_string);
  this._options = options || {};
  this.__tokens = null;

  this._patterns = {};
  this._patterns.whitespace = new WhitespacePattern$1(this._input);
};

Tokenizer.prototype.tokenize = function() {
  this._input.restart();
  this.__tokens = new TokenStream$1();

  this._reset();

  var current;
  var previous = new Token$1(TOKEN.START, '');
  var open_token = null;
  var open_stack = [];
  var comments = new TokenStream$1();

  while (previous.type !== TOKEN.EOF) {
    current = this._get_next_token(previous, open_token);
    while (this._is_comment(current)) {
      comments.add(current);
      current = this._get_next_token(previous, open_token);
    }

    if (!comments.isEmpty()) {
      current.comments_before = comments;
      comments = new TokenStream$1();
    }

    current.parent = open_token;

    if (this._is_opening(current)) {
      open_stack.push(open_token);
      open_token = current;
    } else if (open_token && this._is_closing(current, open_token)) {
      current.opened = open_token;
      open_token.closed = current;
      open_token = open_stack.pop();
      current.parent = open_token;
    }

    current.previous = previous;
    previous.next = current;

    this.__tokens.add(current);
    previous = current;
  }

  return this.__tokens;
};


Tokenizer.prototype._is_first_token = function() {
  return this.__tokens.isEmpty();
};

Tokenizer.prototype._reset = function() {};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  this._readWhitespace();
  var resulting_string = this._input.read(/.+/g);
  if (resulting_string) {
    return this._create_token(TOKEN.RAW, resulting_string);
  } else {
    return this._create_token(TOKEN.EOF, '');
  }
};

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_opening = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._create_token = function(type, text) {
  var token = new Token$1(type, text,
    this._patterns.whitespace.newline_count,
    this._patterns.whitespace.whitespace_before_token);
  return token;
};

Tokenizer.prototype._readWhitespace = function() {
  return this._patterns.whitespace.read();
};



var Tokenizer_1 = Tokenizer;
var TOKEN_1 = TOKEN;

var tokenizer = {
	Tokenizer: Tokenizer_1,
	TOKEN: TOKEN_1
};

/*jshint node:true */

function Directives(start_block_pattern, end_block_pattern) {
  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;
  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;
  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, 'g');
  this.__directive_pattern = / (\w+)[:](\w+)/g;

  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, 'g');
}

Directives.prototype.get_directives = function(text) {
  if (!text.match(this.__directives_block_pattern)) {
    return null;
  }

  var directives = {};
  this.__directive_pattern.lastIndex = 0;
  var directive_match = this.__directive_pattern.exec(text);

  while (directive_match) {
    directives[directive_match[1]] = directive_match[2];
    directive_match = this.__directive_pattern.exec(text);
  }

  return directives;
};

Directives.prototype.readIgnored = function(input) {
  return input.readUntilAfter(this.__directives_end_ignore_pattern);
};


var Directives_1 = Directives;

var directives = {
	Directives: Directives_1
};

var Pattern$2 = pattern.Pattern;


var template_names = {
  django: false,
  erb: false,
  handlebars: false,
  php: false
};

// This lets templates appear anywhere we would do a readUntil
// The cost is higher but it is pay to play.
function TemplatablePattern(input_scanner, parent) {
  Pattern$2.call(this, input_scanner, parent);
  this.__template_pattern = null;
  this._disabled = Object.assign({}, template_names);
  this._excluded = Object.assign({}, template_names);

  if (parent) {
    this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
    this._excluded = Object.assign(this._excluded, parent._excluded);
    this._disabled = Object.assign(this._disabled, parent._disabled);
  }
  var pattern = new Pattern$2(input_scanner);
  this.__patterns = {
    handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
    handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
    handlebars: pattern.starting_with(/{{/).until_after(/}}/),
    php: pattern.starting_with(/<\?(?:[=]|php)/).until_after(/\?>/),
    erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
    // django coflicts with handlebars a bit.
    django: pattern.starting_with(/{%/).until_after(/%}/),
    django_value: pattern.starting_with(/{{/).until_after(/}}/),
    django_comment: pattern.starting_with(/{#/).until_after(/#}/)
  };
}
TemplatablePattern.prototype = new Pattern$2();

TemplatablePattern.prototype._create = function() {
  return new TemplatablePattern(this._input, this);
};

TemplatablePattern.prototype._update = function() {
  this.__set_templated_pattern();
};

TemplatablePattern.prototype.disable = function(language) {
  var result = this._create();
  result._disabled[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read_options = function(options) {
  var result = this._create();
  for (var language in template_names) {
    result._disabled[language] = options.templating.indexOf(language) === -1;
  }
  result._update();
  return result;
};

TemplatablePattern.prototype.exclude = function(language) {
  var result = this._create();
  result._excluded[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read = function() {
  var result = '';
  if (this._match_pattern) {
    result = this._input.read(this._starting_pattern);
  } else {
    result = this._input.read(this._starting_pattern, this.__template_pattern);
  }
  var next = this._read_template();
  while (next) {
    if (this._match_pattern) {
      next += this._input.read(this._match_pattern);
    } else {
      next += this._input.readUntil(this.__template_pattern);
    }
    result += next;
    next = this._read_template();
  }

  if (this._until_after) {
    result += this._input.readUntilAfter(this._until_pattern);
  }
  return result;
};

TemplatablePattern.prototype.__set_templated_pattern = function() {
  var items = [];

  if (!this._disabled.php) {
    items.push(this.__patterns.php._starting_pattern.source);
  }
  if (!this._disabled.handlebars) {
    items.push(this.__patterns.handlebars._starting_pattern.source);
  }
  if (!this._disabled.erb) {
    items.push(this.__patterns.erb._starting_pattern.source);
  }
  if (!this._disabled.django) {
    items.push(this.__patterns.django._starting_pattern.source);
    items.push(this.__patterns.django_value._starting_pattern.source);
    items.push(this.__patterns.django_comment._starting_pattern.source);
  }

  if (this._until_pattern) {
    items.push(this._until_pattern.source);
  }
  this.__template_pattern = this._input.get_regexp('(?:' + items.join('|') + ')');
};

TemplatablePattern.prototype._read_template = function() {
  var resulting_string = '';
  var c = this._input.peek();
  if (c === '<') {
    var peek1 = this._input.peek(1);
    //if we're in a comment, do something special
    // We treat all comments as literals, even more than preformatted tags
    // we just look for the appropriate close tag
    if (!this._disabled.php && !this._excluded.php && peek1 === '?') {
      resulting_string = resulting_string ||
        this.__patterns.php.read();
    }
    if (!this._disabled.erb && !this._excluded.erb && peek1 === '%') {
      resulting_string = resulting_string ||
        this.__patterns.erb.read();
    }
  } else if (c === '{') {
    if (!this._disabled.handlebars && !this._excluded.handlebars) {
      resulting_string = resulting_string ||
        this.__patterns.handlebars_comment.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars_unescaped.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars.read();
    }
    if (!this._disabled.django) {
      // django coflicts with handlebars a bit.
      if (!this._excluded.django && !this._excluded.handlebars) {
        resulting_string = resulting_string ||
          this.__patterns.django_value.read();
      }
      if (!this._excluded.django) {
        resulting_string = resulting_string ||
          this.__patterns.django_comment.read();
        resulting_string = resulting_string ||
          this.__patterns.django.read();
      }
    }
  }
  return resulting_string;
};


var TemplatablePattern_1 = TemplatablePattern;

var templatablepattern = {
	TemplatablePattern: TemplatablePattern_1
};

var InputScanner$2 = inputscanner.InputScanner;
var BaseTokenizer = tokenizer.Tokenizer;
var BASETOKEN = tokenizer.TOKEN;
var Directives$1 = directives.Directives;

var Pattern$3 = pattern.Pattern;
var TemplatablePattern$1 = templatablepattern.TemplatablePattern;


function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}


var TOKEN$1 = {
  START_EXPR: 'TK_START_EXPR',
  END_EXPR: 'TK_END_EXPR',
  START_BLOCK: 'TK_START_BLOCK',
  END_BLOCK: 'TK_END_BLOCK',
  WORD: 'TK_WORD',
  RESERVED: 'TK_RESERVED',
  SEMICOLON: 'TK_SEMICOLON',
  STRING: 'TK_STRING',
  EQUALS: 'TK_EQUALS',
  OPERATOR: 'TK_OPERATOR',
  COMMA: 'TK_COMMA',
  BLOCK_COMMENT: 'TK_BLOCK_COMMENT',
  COMMENT: 'TK_COMMENT',
  DOT: 'TK_DOT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};


var directives_core = new Directives$1(/\/\*/, /\*\//);

var number_pattern = /0[xX][0123456789abcdefABCDEF]*|0[oO][01234567]*|0[bB][01]*|\d+n|(?:\.\d+|\d+\.?\d*)(?:[eE][+-]?\d+)?/;

var digit = /[0-9]/;

// Dot "." must be distinguished from "..." and decimal
var dot_pattern = /[^\d\.]/;

var positionable_operators = (
  ">>> === !== " +
  "<< && >= ** != == <= >> || |> " +
  "< / - + > : & % ? ^ | *").split(' ');

// IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.
// Also, you must update possitionable operators separately from punct
var punct =
  ">>>= " +
  "... >>= <<= === >>> !== **= " +
  "=> ^= :: /= << <= == && -= >= >> != -- += ** || ++ %= &= *= |= |> " +
  "= ! ? > < : / ^ - + * & % ~ |";

punct = punct.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&");
// ?. but not if followed by a number 
punct = '\\?\\.(?!\\d) ' + punct;
punct = punct.replace(/ /g, '|');

var punct_pattern = new RegExp(punct);

// words which should always start on new line.
var line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
var reserved_words = line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);
var reserved_word_pattern = new RegExp('^(?:' + reserved_words.join('|') + ')$');

// var template_pattern = /(?:(?:<\?php|<\?=)[\s\S]*?\?>)|(?:<%[\s\S]*?%>)/g;

var in_html_comment;

var Tokenizer$1 = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);

  this._patterns.whitespace = this._patterns.whitespace.matching(
    /\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,
    /\u2028\u2029/.source);

  var pattern_reader = new Pattern$3(this._input);
  var templatable = new TemplatablePattern$1(this._input)
    .read_options(this._options);

  this.__patterns = {
    template: templatable,
    identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),
    number: pattern_reader.matching(number_pattern),
    punct: pattern_reader.matching(punct_pattern),
    // comment ends just before nearest linefeed or end of file
    comment: pattern_reader.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
    //  /* ... */ comment ends with nearest */ or end of file
    block_comment: pattern_reader.starting_with(/\/\*/).until_after(/\*\//),
    html_comment_start: pattern_reader.matching(/<!--/),
    html_comment_end: pattern_reader.matching(/-->/),
    include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),
    shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),
    xml: pattern_reader.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/),
    single_quote: templatable.until(/['\\\n\r\u2028\u2029]/),
    double_quote: templatable.until(/["\\\n\r\u2028\u2029]/),
    template_text: templatable.until(/[`\\$]/),
    template_expression: templatable.until(/[`}\\]/)
  };

};
Tokenizer$1.prototype = new BaseTokenizer();

Tokenizer$1.prototype._is_comment = function(current_token) {
  return current_token.type === TOKEN$1.COMMENT || current_token.type === TOKEN$1.BLOCK_COMMENT || current_token.type === TOKEN$1.UNKNOWN;
};

Tokenizer$1.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN$1.START_BLOCK || current_token.type === TOKEN$1.START_EXPR;
};

Tokenizer$1.prototype._is_closing = function(current_token, open_token) {
  return (current_token.type === TOKEN$1.END_BLOCK || current_token.type === TOKEN$1.END_EXPR) &&
    (open_token && (
      (current_token.text === ']' && open_token.text === '[') ||
      (current_token.text === ')' && open_token.text === '(') ||
      (current_token.text === '}' && open_token.text === '{')));
};

Tokenizer$1.prototype._reset = function() {
  in_html_comment = false;
};

Tokenizer$1.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN$1.EOF, '');
  }

  token = token || this._read_non_javascript(c);
  token = token || this._read_string(c);
  token = token || this._read_word(previous_token);
  token = token || this._read_singles(c);
  token = token || this._read_comment(c);
  token = token || this._read_regexp(c, previous_token);
  token = token || this._read_xml(c, previous_token);
  token = token || this._read_punctuation();
  token = token || this._create_token(TOKEN$1.UNKNOWN, this._input.next());

  return token;
};

Tokenizer$1.prototype._read_word = function(previous_token) {
  var resulting_string;
  resulting_string = this.__patterns.identifier.read();
  if (resulting_string !== '') {
    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');
    if (!(previous_token.type === TOKEN$1.DOT ||
        (previous_token.type === TOKEN$1.RESERVED && (previous_token.text === 'set' || previous_token.text === 'get'))) &&
      reserved_word_pattern.test(resulting_string)) {
      if (resulting_string === 'in' || resulting_string === 'of') { // hack for 'in' and 'of' operators
        return this._create_token(TOKEN$1.OPERATOR, resulting_string);
      }
      return this._create_token(TOKEN$1.RESERVED, resulting_string);
    }
    return this._create_token(TOKEN$1.WORD, resulting_string);
  }

  resulting_string = this.__patterns.number.read();
  if (resulting_string !== '') {
    return this._create_token(TOKEN$1.WORD, resulting_string);
  }
};

Tokenizer$1.prototype._read_singles = function(c) {
  var token = null;
  if (c === '(' || c === '[') {
    token = this._create_token(TOKEN$1.START_EXPR, c);
  } else if (c === ')' || c === ']') {
    token = this._create_token(TOKEN$1.END_EXPR, c);
  } else if (c === '{') {
    token = this._create_token(TOKEN$1.START_BLOCK, c);
  } else if (c === '}') {
    token = this._create_token(TOKEN$1.END_BLOCK, c);
  } else if (c === ';') {
    token = this._create_token(TOKEN$1.SEMICOLON, c);
  } else if (c === '.' && dot_pattern.test(this._input.peek(1))) {
    token = this._create_token(TOKEN$1.DOT, c);
  } else if (c === ',') {
    token = this._create_token(TOKEN$1.COMMA, c);
  }

  if (token) {
    this._input.next();
  }
  return token;
};

Tokenizer$1.prototype._read_punctuation = function() {
  var resulting_string = this.__patterns.punct.read();

  if (resulting_string !== '') {
    if (resulting_string === '=') {
      return this._create_token(TOKEN$1.EQUALS, resulting_string);
    } else if (resulting_string === '?.') {
      return this._create_token(TOKEN$1.DOT, resulting_string);
    } else {
      return this._create_token(TOKEN$1.OPERATOR, resulting_string);
    }
  }
};

Tokenizer$1.prototype._read_non_javascript = function(c) {
  var resulting_string = '';

  if (c === '#') {
    if (this._is_first_token()) {
      resulting_string = this.__patterns.shebang.read();

      if (resulting_string) {
        return this._create_token(TOKEN$1.UNKNOWN, resulting_string.trim() + '\n');
      }
    }

    // handles extendscript #includes
    resulting_string = this.__patterns.include.read();

    if (resulting_string) {
      return this._create_token(TOKEN$1.UNKNOWN, resulting_string.trim() + '\n');
    }

    c = this._input.next();

    // Spidermonkey-specific sharp variables for circular references. Considered obsolete.
    var sharp = '#';
    if (this._input.hasNext() && this._input.testChar(digit)) {
      do {
        c = this._input.next();
        sharp += c;
      } while (this._input.hasNext() && c !== '#' && c !== '=');
      if (c === '#') ; else if (this._input.peek() === '[' && this._input.peek(1) === ']') {
        sharp += '[]';
        this._input.next();
        this._input.next();
      } else if (this._input.peek() === '{' && this._input.peek(1) === '}') {
        sharp += '{}';
        this._input.next();
        this._input.next();
      }
      return this._create_token(TOKEN$1.WORD, sharp);
    }

    this._input.back();

  } else if (c === '<' && this._is_first_token()) {
    resulting_string = this.__patterns.html_comment_start.read();
    if (resulting_string) {
      while (this._input.hasNext() && !this._input.testChar(acorn.newline)) {
        resulting_string += this._input.next();
      }
      in_html_comment = true;
      return this._create_token(TOKEN$1.COMMENT, resulting_string);
    }
  } else if (in_html_comment && c === '-') {
    resulting_string = this.__patterns.html_comment_end.read();
    if (resulting_string) {
      in_html_comment = false;
      return this._create_token(TOKEN$1.COMMENT, resulting_string);
    }
  }

  return null;
};

Tokenizer$1.prototype._read_comment = function(c) {
  var token = null;
  if (c === '/') {
    var comment = '';
    if (this._input.peek(1) === '*') {
      // peek for comment /* ... */
      comment = this.__patterns.block_comment.read();
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }
      comment = comment.replace(acorn.allLineBreaks, '\n');
      token = this._create_token(TOKEN$1.BLOCK_COMMENT, comment);
      token.directives = directives;
    } else if (this._input.peek(1) === '/') {
      // peek for comment // ...
      comment = this.__patterns.comment.read();
      token = this._create_token(TOKEN$1.COMMENT, comment);
    }
  }
  return token;
};

Tokenizer$1.prototype._read_string = function(c) {
  if (c === '`' || c === "'" || c === '"') {
    var resulting_string = this._input.next();
    this.has_char_escapes = false;

    if (c === '`') {
      resulting_string += this._read_string_recursive('`', true, '${');
    } else {
      resulting_string += this._read_string_recursive(c);
    }

    if (this.has_char_escapes && this._options.unescape_strings) {
      resulting_string = unescape_string(resulting_string);
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();
    }

    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');

    return this._create_token(TOKEN$1.STRING, resulting_string);
  }

  return null;
};

Tokenizer$1.prototype._allow_regexp_or_xml = function(previous_token) {
  // regex and xml can only appear in specific locations during parsing
  return (previous_token.type === TOKEN$1.RESERVED && in_array(previous_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
    (previous_token.type === TOKEN$1.END_EXPR && previous_token.text === ')' &&
      previous_token.opened.previous.type === TOKEN$1.RESERVED && in_array(previous_token.opened.previous.text, ['if', 'while', 'for'])) ||
    (in_array(previous_token.type, [TOKEN$1.COMMENT, TOKEN$1.START_EXPR, TOKEN$1.START_BLOCK, TOKEN$1.START,
      TOKEN$1.END_BLOCK, TOKEN$1.OPERATOR, TOKEN$1.EQUALS, TOKEN$1.EOF, TOKEN$1.SEMICOLON, TOKEN$1.COMMA
    ]));
};

Tokenizer$1.prototype._read_regexp = function(c, previous_token) {

  if (c === '/' && this._allow_regexp_or_xml(previous_token)) {
    // handle regexp
    //
    var resulting_string = this._input.next();
    var esc = false;

    var in_char_class = false;
    while (this._input.hasNext() &&
      ((esc || in_char_class || this._input.peek() !== c) &&
        !this._input.testChar(acorn.newline))) {
      resulting_string += this._input.peek();
      if (!esc) {
        esc = this._input.peek() === '\\';
        if (this._input.peek() === '[') {
          in_char_class = true;
        } else if (this._input.peek() === ']') {
          in_char_class = false;
        }
      } else {
        esc = false;
      }
      this._input.next();
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();

      // regexps may have modifiers /regexp/MOD , so fetch those, too
      // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
      resulting_string += this._input.read(acorn.identifier);
    }
    return this._create_token(TOKEN$1.STRING, resulting_string);
  }
  return null;
};

Tokenizer$1.prototype._read_xml = function(c, previous_token) {

  if (this._options.e4x && c === "<" && this._allow_regexp_or_xml(previous_token)) {
    var xmlStr = '';
    var match = this.__patterns.xml.read_match();
    // handle e4x xml literals
    //
    if (match) {
      // Trim root tag to attempt to
      var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
      var isCurlyRoot = rootTag.indexOf('{') === 0;
      var depth = 0;
      while (match) {
        var isEndTag = !!match[1];
        var tagName = match[2];
        var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
        if (!isSingletonTag &&
          (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
          if (isEndTag) {
            --depth;
          } else {
            ++depth;
          }
        }
        xmlStr += match[0];
        if (depth <= 0) {
          break;
        }
        match = this.__patterns.xml.read_match();
      }
      // if we didn't close correctly, keep unformatted.
      if (!match) {
        xmlStr += this._input.match(/[\s\S]*/g)[0];
      }
      xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
      return this._create_token(TOKEN$1.STRING, xmlStr);
    }
  }

  return null;
};

function unescape_string(s) {
  // You think that a regex would work for this
  // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
  //         return String.fromCharCode(parseInt(val, 16));
  //     })
  // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
  var out = '',
    escaped = 0;

  var input_scan = new InputScanner$2(s);
  var matched = null;

  while (input_scan.hasNext()) {
    // Keep any whitespace, non-slash characters
    // also keep slash pairs.
    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);

    if (matched) {
      out += matched[0];
    }

    if (input_scan.peek() === '\\') {
      input_scan.next();
      if (input_scan.peek() === 'x') {
        matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
      } else if (input_scan.peek() === 'u') {
        matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
      } else {
        out += '\\';
        if (input_scan.hasNext()) {
          out += input_scan.next();
        }
        continue;
      }

      // If there's some error decoding, return the original string
      if (!matched) {
        return s;
      }

      escaped = parseInt(matched[1], 16);

      if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
        // we bail out on \x7f..\xff,
        // leaving whole string escaped,
        // as it's probably completely binary
        return s;
      } else if (escaped >= 0x00 && escaped < 0x20) {
        // leave 0x00...0x1f escaped
        out += '\\' + matched[0];
        continue;
      } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
        // single-quote, apostrophe, backslash - escape these
        out += '\\' + String.fromCharCode(escaped);
      } else {
        out += String.fromCharCode(escaped);
      }
    }
  }

  return out;
}

// handle string
//
Tokenizer$1.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {
  var current_char;
  var pattern;
  if (delimiter === '\'') {
    pattern = this.__patterns.single_quote;
  } else if (delimiter === '"') {
    pattern = this.__patterns.double_quote;
  } else if (delimiter === '`') {
    pattern = this.__patterns.template_text;
  } else if (delimiter === '}') {
    pattern = this.__patterns.template_expression;
  }

  var resulting_string = pattern.read();
  var next = '';
  while (this._input.hasNext()) {
    next = this._input.next();
    if (next === delimiter ||
      (!allow_unescaped_newlines && acorn.newline.test(next))) {
      this._input.back();
      break;
    } else if (next === '\\' && this._input.hasNext()) {
      current_char = this._input.peek();

      if (current_char === 'x' || current_char === 'u') {
        this.has_char_escapes = true;
      } else if (current_char === '\r' && this._input.peek(1) === '\n') {
        this._input.next();
      }
      next += this._input.next();
    } else if (start_sub) {
      if (start_sub === '${' && next === '$' && this._input.peek() === '{') {
        next += this._input.next();
      }

      if (start_sub === next) {
        if (delimiter === '`') {
          next += this._read_string_recursive('}', allow_unescaped_newlines, '`');
        } else {
          next += this._read_string_recursive('`', allow_unescaped_newlines, '${');
        }
        if (this._input.hasNext()) {
          next += this._input.next();
        }
      }
    }
    next += pattern.read();
    resulting_string += next;
  }

  return resulting_string;
};

var Tokenizer_1$1 = Tokenizer$1;
var TOKEN_1$1 = TOKEN$1;
var positionable_operators_1 = positionable_operators.slice();
var line_starters_1 = line_starters.slice();

var tokenizer$1 = {
	Tokenizer: Tokenizer_1$1,
	TOKEN: TOKEN_1$1,
	positionable_operators: positionable_operators_1,
	line_starters: line_starters_1
};

var Output$1 = output.Output;
var Token$2 = token.Token;

var Options$2 = options$1.Options;
var Tokenizer$2 = tokenizer$1.Tokenizer;
var line_starters$1 = tokenizer$1.line_starters;
var positionable_operators$1 = tokenizer$1.positionable_operators;
var TOKEN$2 = tokenizer$1.TOKEN;


function in_array$1(what, arr) {
  return arr.indexOf(what) !== -1;
}

function ltrim(s) {
  return s.replace(/^\s+/g, '');
}

function generateMapFromStrings(list) {
  var result = {};
  for (var x = 0; x < list.length; x++) {
    // make the mapped names underscored instead of dash
    result[list[x].replace(/-/g, '_')] = list[x];
  }
  return result;
}

function reserved_word(token, word) {
  return token && token.type === TOKEN$2.RESERVED && token.text === word;
}

function reserved_array(token, words) {
  return token && token.type === TOKEN$2.RESERVED && in_array$1(token.text, words);
}
// Unsure of what they mean, but they work. Worth cleaning up in future.
var special_words = ['case', 'return', 'do', 'if', 'throw', 'else', 'await', 'break', 'continue', 'async'];

var validPositionValues$1 = ['before-newline', 'after-newline', 'preserve-newline'];

// Generate map from array
var OPERATOR_POSITION = generateMapFromStrings(validPositionValues$1);

var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];

var MODE = {
  BlockStatement: 'BlockStatement', // 'BLOCK'
  Statement: 'Statement', // 'STATEMENT'
  ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
  ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
  ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
  Conditional: 'Conditional', //'(COND-EXPRESSION)',
  Expression: 'Expression' //'(EXPRESSION)'
};

function remove_redundant_indentation(output, frame) {
  // This implementation is effective but has some issues:
  //     - can cause line wrap to happen too soon due to indent removal
  //           after wrap points are calculated
  // These issues are minor compared to ugly indentation.

  if (frame.multiline_frame ||
    frame.mode === MODE.ForInitializer ||
    frame.mode === MODE.Conditional) {
    return;
  }

  // remove one indent from each line inside this section
  output.remove_indent(frame.start_line_index);
}

// we could use just string.split, but
// IE doesn't like returning empty strings
function split_linebreaks(s) {
  //return s.split(/\x0d\x0a|\x0a/);

  s = s.replace(acorn.allLineBreaks, '\n');
  var out = [],
    idx = s.indexOf("\n");
  while (idx !== -1) {
    out.push(s.substring(0, idx));
    s = s.substring(idx + 1);
    idx = s.indexOf("\n");
  }
  if (s.length) {
    out.push(s);
  }
  return out;
}

function is_array(mode) {
  return mode === MODE.ArrayLiteral;
}

function is_expression(mode) {
  return in_array$1(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
}

function all_lines_start_with(lines, c) {
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i].trim();
    if (line.charAt(0) !== c) {
      return false;
    }
  }
  return true;
}

function each_line_matches_indent(lines, indent) {
  var i = 0,
    len = lines.length,
    line;
  for (; i < len; i++) {
    line = lines[i];
    // allow empty lines to pass through
    if (line && line.indexOf(indent) !== 0) {
      return false;
    }
  }
  return true;
}


function Beautifier(source_text, options) {
  options = options || {};
  this._source_text = source_text || '';

  this._output = null;
  this._tokens = null;
  this._last_last_text = null;
  this._flags = null;
  this._previous_flags = null;

  this._flag_store = null;
  this._options = new Options$2(options);
}

Beautifier.prototype.create_flags = function(flags_base, mode) {
  var next_indent_level = 0;
  if (flags_base) {
    next_indent_level = flags_base.indentation_level;
    if (!this._output.just_added_newline() &&
      flags_base.line_indent_level > next_indent_level) {
      next_indent_level = flags_base.line_indent_level;
    }
  }

  var next_flags = {
    mode: mode,
    parent: flags_base,
    last_token: flags_base ? flags_base.last_token : new Token$2(TOKEN$2.START_BLOCK, ''), // last token text
    last_word: flags_base ? flags_base.last_word : '', // last TOKEN.WORD passed
    declaration_statement: false,
    declaration_assignment: false,
    multiline_frame: false,
    inline_frame: false,
    if_block: false,
    else_block: false,
    do_block: false,
    do_while: false,
    import_block: false,
    in_case_statement: false, // switch(..){ INSIDE HERE }
    in_case: false, // we're on the exact line with "case 0:"
    case_body: false, // the indented case-action block
    indentation_level: next_indent_level,
    alignment: 0,
    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
    start_line_index: this._output.get_line_number(),
    ternary_depth: 0
  };
  return next_flags;
};

Beautifier.prototype._reset = function(source_text) {
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._last_last_text = ''; // pre-last token text
  this._output = new Output$1(this._options, baseIndentString);

  // If testing the ignore directive, start with output disable set to true
  this._output.raw = this._options.test_output_raw;


  // Stack of parsing/formatting states, including MODE.
  // We tokenize, parse, and output in an almost purely a forward-only stream of token input
  // and formatted output.  This makes the beautifier less accurate than full parsers
  // but also far more tolerant of syntax errors.
  //
  // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
  // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
  // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
  // most full parsers would die, but the beautifier gracefully falls back to
  // MODE.BlockStatement and continues on.
  this._flag_store = [];
  this.set_mode(MODE.BlockStatement);
  var tokenizer = new Tokenizer$2(source_text, this._options);
  this._tokens = tokenizer.tokenize();
  return source_text;
};

Beautifier.prototype.beautify = function() {
  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var sweet_code;
  var source_text = this._reset(this._source_text);

  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && acorn.lineBreak.test(source_text || '')) {
      eol = source_text.match(acorn.lineBreak)[0];
    }
  }

  var current_token = this._tokens.next();
  while (current_token) {
    this.handle_token(current_token);

    this._last_last_text = this._flags.last_token.text;
    this._flags.last_token = current_token;

    current_token = this._tokens.next();
  }

  sweet_code = this._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {
  if (current_token.type === TOKEN$2.START_EXPR) {
    this.handle_start_expr(current_token);
  } else if (current_token.type === TOKEN$2.END_EXPR) {
    this.handle_end_expr(current_token);
  } else if (current_token.type === TOKEN$2.START_BLOCK) {
    this.handle_start_block(current_token);
  } else if (current_token.type === TOKEN$2.END_BLOCK) {
    this.handle_end_block(current_token);
  } else if (current_token.type === TOKEN$2.WORD) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN$2.RESERVED) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN$2.SEMICOLON) {
    this.handle_semicolon(current_token);
  } else if (current_token.type === TOKEN$2.STRING) {
    this.handle_string(current_token);
  } else if (current_token.type === TOKEN$2.EQUALS) {
    this.handle_equals(current_token);
  } else if (current_token.type === TOKEN$2.OPERATOR) {
    this.handle_operator(current_token);
  } else if (current_token.type === TOKEN$2.COMMA) {
    this.handle_comma(current_token);
  } else if (current_token.type === TOKEN$2.BLOCK_COMMENT) {
    this.handle_block_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN$2.COMMENT) {
    this.handle_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN$2.DOT) {
    this.handle_dot(current_token);
  } else if (current_token.type === TOKEN$2.EOF) {
    this.handle_eof(current_token);
  } else if (current_token.type === TOKEN$2.UNKNOWN) {
    this.handle_unknown(current_token, preserve_statement_flags);
  } else {
    this.handle_unknown(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {
  var newlines = current_token.newlines;
  var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);

  if (current_token.comments_before) {
    var comment_token = current_token.comments_before.next();
    while (comment_token) {
      // The cleanest handling of inline comments is to treat them as though they aren't there.
      // Just continue formatting and the behavior should be logical.
      // Also ignore unknown tokens.  Again, this should result in better behavior.
      this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);
      this.handle_token(comment_token, preserve_statement_flags);
      comment_token = current_token.comments_before.next();
    }
  }

  if (keep_whitespace) {
    for (var i = 0; i < newlines; i += 1) {
      this.print_newline(i > 0, preserve_statement_flags);
    }
  } else {
    if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {
      newlines = this._options.max_preserve_newlines;
    }

    if (this._options.preserve_newlines) {
      if (newlines > 1) {
        this.print_newline(false, preserve_statement_flags);
        for (var j = 1; j < newlines; j += 1) {
          this.print_newline(true, preserve_statement_flags);
        }
      }
    }
  }

};

var newline_restricted_tokens = ['async', 'break', 'continue', 'return', 'throw', 'yield'];

Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {
  force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

  // Never wrap the first token on a line
  if (this._output.just_added_newline()) {
    return;
  }

  var shouldPreserveOrForce = (this._options.preserve_newlines && current_token.newlines) || force_linewrap;
  var operatorLogicApplies = in_array$1(this._flags.last_token.text, positionable_operators$1) ||
    in_array$1(current_token.text, positionable_operators$1);

  if (operatorLogicApplies) {
    var shouldPrintOperatorNewline = (
        in_array$1(this._flags.last_token.text, positionable_operators$1) &&
        in_array$1(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
      ) ||
      in_array$1(current_token.text, positionable_operators$1);
    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
  }

  if (shouldPreserveOrForce) {
    this.print_newline(false, true);
  } else if (this._options.wrap_line_length) {
    if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {
      // These tokens should never have a newline inserted
      // between them and the following expression.
      return;
    }
    this._output.set_wrap_point();
  }
};

Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {
  if (!preserve_statement_flags) {
    if (this._flags.last_token.text !== ';' && this._flags.last_token.text !== ',' && this._flags.last_token.text !== '=' && (this._flags.last_token.type !== TOKEN$2.OPERATOR || this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) {
      var next_token = this._tokens.peek();
      while (this._flags.mode === MODE.Statement &&
        !(this._flags.if_block && reserved_word(next_token, 'else')) &&
        !this._flags.do_block) {
        this.restore_mode();
      }
    }
  }

  if (this._output.add_new_line(force_newline)) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.print_token_line_indentation = function(current_token) {
  if (this._output.just_added_newline()) {
    if (this._options.keep_array_indentation &&
      current_token.newlines &&
      (current_token.text === '[' || is_array(this._flags.mode))) {
      this._output.current_line.set_indent(-1);
      this._output.current_line.push(current_token.whitespace_before);
      this._output.space_before_token = false;
    } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {
      this._flags.line_indent_level = this._flags.indentation_level;
    }
  }
};

Beautifier.prototype.print_token = function(current_token) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    return;
  }

  if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN$2.COMMA &&
    this._output.just_added_newline()) {
    if (this._output.previous_line.last() === ',') {
      var popped = this._output.previous_line.pop();
      // if the comma was already at the start of the line,
      // pull back onto that line and reprint the indentation
      if (this._output.previous_line.is_empty()) {
        this._output.previous_line.push(popped);
        this._output.trim(true);
        this._output.current_line.pop();
        this._output.trim();
      }

      // add the comma in front of the next token
      this.print_token_line_indentation(current_token);
      this._output.add_token(',');
      this._output.space_before_token = true;
    }
  }

  this.print_token_line_indentation(current_token);
  this._output.non_breaking_space = true;
  this._output.add_token(current_token.text);
  if (this._output.previous_token_wrapped) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.indent = function() {
  this._flags.indentation_level += 1;
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};

Beautifier.prototype.deindent = function() {
  if (this._flags.indentation_level > 0 &&
    ((!this._flags.parent) || this._flags.indentation_level > this._flags.parent.indentation_level)) {
    this._flags.indentation_level -= 1;
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.set_mode = function(mode) {
  if (this._flags) {
    this._flag_store.push(this._flags);
    this._previous_flags = this._flags;
  } else {
    this._previous_flags = this.create_flags(null, mode);
  }

  this._flags = this.create_flags(this._previous_flags, mode);
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};


Beautifier.prototype.restore_mode = function() {
  if (this._flag_store.length > 0) {
    this._previous_flags = this._flags;
    this._flags = this._flag_store.pop();
    if (this._previous_flags.mode === MODE.Statement) {
      remove_redundant_indentation(this._output, this._previous_flags);
    }
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.start_of_object_property = function() {
  return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || (reserved_array(this._flags.last_token, ['get', 'set'])));
};

Beautifier.prototype.start_of_statement = function(current_token) {
  var start = false;
  start = start || reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN$2.WORD;
  start = start || reserved_word(this._flags.last_token, 'do');
  start = start || (!(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement)) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;
  start = start || reserved_word(this._flags.last_token, 'else') &&
    !(reserved_word(current_token, 'if') && !current_token.comments_before);
  start = start || (this._flags.last_token.type === TOKEN$2.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional));
  start = start || (this._flags.last_token.type === TOKEN$2.WORD && this._flags.mode === MODE.BlockStatement &&
    !this._flags.in_case &&
    !(current_token.text === '--' || current_token.text === '++') &&
    this._last_last_text !== 'function' &&
    current_token.type !== TOKEN$2.WORD && current_token.type !== TOKEN$2.RESERVED);
  start = start || (this._flags.mode === MODE.ObjectLiteral && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || reserved_array(this._flags.last_token, ['get', 'set'])));

  if (start) {
    this.set_mode(MODE.Statement);
    this.indent();

    this.handle_whitespace_and_comments(current_token, true);

    // Issue #276:
    // If starting a new statement with [if, for, while, do], push to a new line.
    // if (a) if (b) if(c) d(); else e(); else f();
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token,
        reserved_array(current_token, ['do', 'for', 'if', 'while']));
    }
    return true;
  }
  return false;
};

Beautifier.prototype.handle_start_expr = function(current_token) {
  // The conditional starts the statement if appropriate.
  if (!this.start_of_statement(current_token)) {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_mode = MODE.Expression;
  if (current_token.text === '[') {

    if (this._flags.last_token.type === TOKEN$2.WORD || this._flags.last_token.text === ')') {
      // this is array index specifier, break immediately
      // a[x], fn()[x]
      if (reserved_array(this._flags.last_token, line_starters$1)) {
        this._output.space_before_token = true;
      }
      this.print_token(current_token);
      this.set_mode(next_mode);
      this.indent();
      if (this._options.space_in_paren) {
        this._output.space_before_token = true;
      }
      return;
    }

    next_mode = MODE.ArrayLiteral;
    if (is_array(this._flags.mode)) {
      if (this._flags.last_token.text === '[' ||
        (this._flags.last_token.text === ',' && (this._last_last_text === ']' || this._last_last_text === '}'))) {
        // ], [ goes to new line
        // }, [ goes to new line
        if (!this._options.keep_array_indentation) {
          this.print_newline();
        }
      }
    }

    if (!in_array$1(this._flags.last_token.type, [TOKEN$2.START_EXPR, TOKEN$2.END_EXPR, TOKEN$2.WORD, TOKEN$2.OPERATOR])) {
      this._output.space_before_token = true;
    }
  } else {
    if (this._flags.last_token.type === TOKEN$2.RESERVED) {
      if (this._flags.last_token.text === 'for') {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.ForInitializer;
      } else if (in_array$1(this._flags.last_token.text, ['if', 'while'])) {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.Conditional;
      } else if (in_array$1(this._flags.last_word, ['await', 'async'])) {
        // Should be a space between await and an IIFE, or async and an arrow function
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'import' && current_token.whitespace_before === '') {
        this._output.space_before_token = false;
      } else if (in_array$1(this._flags.last_token.text, line_starters$1) || this._flags.last_token.text === 'catch') {
        this._output.space_before_token = true;
      }
    } else if (this._flags.last_token.type === TOKEN$2.EQUALS || this._flags.last_token.type === TOKEN$2.OPERATOR) {
      // Support of this kind of newline preservation.
      // a = (b &&
      //     (c || d));
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else if (this._flags.last_token.type === TOKEN$2.WORD) {
      this._output.space_before_token = false;

      // function name() vs function name ()
      // function* name() vs function* name ()
      // async name() vs async name ()
      // In ES6, you can also define the method properties of an object
      // var obj = {a: function() {}}
      // It can be abbreviated
      // var obj = {a() {}}
      // var obj = { a() {}} vs var obj = { a () {}}
      // var obj = { * a() {}} vs var obj = { * a () {}}
      var peek_back_two = this._tokens.peek(-3);
      if (this._options.space_after_named_function && peek_back_two) {
        // peek starts at next character so -1 is current token
        var peek_back_three = this._tokens.peek(-4);
        if (reserved_array(peek_back_two, ['async', 'function']) ||
          (peek_back_two.text === '*' && reserved_array(peek_back_three, ['async', 'function']))) {
          this._output.space_before_token = true;
        } else if (this._flags.mode === MODE.ObjectLiteral) {
          if ((peek_back_two.text === '{' || peek_back_two.text === ',') ||
            (peek_back_two.text === '*' && (peek_back_three.text === '{' || peek_back_three.text === ','))) {
            this._output.space_before_token = true;
          }
        }
      }
    } else {
      // Support preserving wrapped arrow function expressions
      // a.b('c',
      //     () => d.e
      // )
      this.allow_wrap_or_preserved_newline(current_token);
    }

    // function() vs function ()
    // yield*() vs yield* ()
    // function*() vs function* ()
    if ((this._flags.last_token.type === TOKEN$2.RESERVED && (this._flags.last_word === 'function' || this._flags.last_word === 'typeof')) ||
      (this._flags.last_token.text === '*' &&
        (in_array$1(this._last_last_text, ['function', 'yield']) ||
          (this._flags.mode === MODE.ObjectLiteral && in_array$1(this._last_last_text, ['{', ',']))))) {
      this._output.space_before_token = this._options.space_after_anon_function;
    }
  }

  if (this._flags.last_token.text === ';' || this._flags.last_token.type === TOKEN$2.START_BLOCK) {
    this.print_newline();
  } else if (this._flags.last_token.type === TOKEN$2.END_EXPR || this._flags.last_token.type === TOKEN$2.START_EXPR || this._flags.last_token.type === TOKEN$2.END_BLOCK || this._flags.last_token.text === '.' || this._flags.last_token.type === TOKEN$2.COMMA) {
    // do nothing on (( and )( and ][ and ]( and .(
    // TODO: Consider whether forcing this is required.  Review failing tests when removed.
    this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);
  }

  this.print_token(current_token);
  this.set_mode(next_mode);
  if (this._options.space_in_paren) {
    this._output.space_before_token = true;
  }

  // In all cases, if we newline while inside an expression it should be indented.
  this.indent();
};

Beautifier.prototype.handle_end_expr = function(current_token) {
  // statements inside expressions are not valid syntax, but...
  // statements must all be closed when their container closes
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  this.handle_whitespace_and_comments(current_token);

  if (this._flags.multiline_frame) {
    this.allow_wrap_or_preserved_newline(current_token,
      current_token.text === ']' && is_array(this._flags.mode) && !this._options.keep_array_indentation);
  }

  if (this._options.space_in_paren) {
    if (this._flags.last_token.type === TOKEN$2.START_EXPR && !this._options.space_in_empty_paren) {
      // () [] no inner space in empty parens like these, ever, ref #320
      this._output.trim();
      this._output.space_before_token = false;
    } else {
      this._output.space_before_token = true;
    }
  }
  this.deindent();
  this.print_token(current_token);
  this.restore_mode();

  remove_redundant_indentation(this._output, this._previous_flags);

  // do {} while () // no statement required after
  if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {
    this._previous_flags.mode = MODE.Expression;
    this._flags.do_block = false;
    this._flags.do_while = false;

  }
};

Beautifier.prototype.handle_start_block = function(current_token) {
  this.handle_whitespace_and_comments(current_token);

  // Check if this is should be treated as a ObjectLiteral
  var next_token = this._tokens.peek();
  var second_token = this._tokens.peek(1);
  if (this._flags.last_word === 'switch' && this._flags.last_token.type === TOKEN$2.END_EXPR) {
    this.set_mode(MODE.BlockStatement);
    this._flags.in_case_statement = true;
  } else if (this._flags.case_body) {
    this.set_mode(MODE.BlockStatement);
  } else if (second_token && (
      (in_array$1(second_token.text, [':', ',']) && in_array$1(next_token.type, [TOKEN$2.STRING, TOKEN$2.WORD, TOKEN$2.RESERVED])) ||
      (in_array$1(next_token.text, ['get', 'set', '...']) && in_array$1(second_token.type, [TOKEN$2.WORD, TOKEN$2.RESERVED]))
    )) {
    // We don't support TypeScript,but we didn't break it for a very long time.
    // We'll try to keep not breaking it.
    if (!in_array$1(this._last_last_text, ['class', 'interface'])) {
      this.set_mode(MODE.ObjectLiteral);
    } else {
      this.set_mode(MODE.BlockStatement);
    }
  } else if (this._flags.last_token.type === TOKEN$2.OPERATOR && this._flags.last_token.text === '=>') {
    // arrow function: (param1, paramN) => { statements }
    this.set_mode(MODE.BlockStatement);
  } else if (in_array$1(this._flags.last_token.type, [TOKEN$2.EQUALS, TOKEN$2.START_EXPR, TOKEN$2.COMMA, TOKEN$2.OPERATOR]) ||
    reserved_array(this._flags.last_token, ['return', 'throw', 'import', 'default'])
  ) {
    // Detecting shorthand function syntax is difficult by scanning forward,
    //     so check the surrounding context.
    // If the block is being returned, imported, export default, passed as arg,
    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
    this.set_mode(MODE.ObjectLiteral);
  } else {
    this.set_mode(MODE.BlockStatement);
  }

  var empty_braces = !next_token.comments_before && next_token.text === '}';
  var empty_anonymous_function = empty_braces && this._flags.last_word === 'function' &&
    this._flags.last_token.type === TOKEN$2.END_EXPR;

  if (this._options.brace_preserve_inline) // check for inline, set inline_frame if so
  {
    // search forward for a newline wanted inside this block
    var index = 0;
    var check_token = null;
    this._flags.inline_frame = true;
    do {
      index += 1;
      check_token = this._tokens.peek(index - 1);
      if (check_token.newlines) {
        this._flags.inline_frame = false;
        break;
      }
    } while (check_token.type !== TOKEN$2.EOF &&
      !(check_token.type === TOKEN$2.END_BLOCK && check_token.opened === current_token));
  }

  if ((this._options.brace_style === "expand" ||
      (this._options.brace_style === "none" && current_token.newlines)) &&
    !this._flags.inline_frame) {
    if (this._flags.last_token.type !== TOKEN$2.OPERATOR &&
      (empty_anonymous_function ||
        this._flags.last_token.type === TOKEN$2.EQUALS ||
        (reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== 'else'))) {
      this._output.space_before_token = true;
    } else {
      this.print_newline(false, true);
    }
  } else { // collapse || inline_frame
    if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN$2.START_EXPR || this._flags.last_token.type === TOKEN$2.COMMA)) {
      if (this._flags.last_token.type === TOKEN$2.COMMA || this._options.space_in_paren) {
        this._output.space_before_token = true;
      }

      if (this._flags.last_token.type === TOKEN$2.COMMA || (this._flags.last_token.type === TOKEN$2.START_EXPR && this._flags.inline_frame)) {
        this.allow_wrap_or_preserved_newline(current_token);
        this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;
        this._flags.multiline_frame = false;
      }
    }
    if (this._flags.last_token.type !== TOKEN$2.OPERATOR && this._flags.last_token.type !== TOKEN$2.START_EXPR) {
      if (this._flags.last_token.type === TOKEN$2.START_BLOCK && !this._flags.inline_frame) {
        this.print_newline();
      } else {
        this._output.space_before_token = true;
      }
    }
  }
  this.print_token(current_token);
  this.indent();

  // Except for specific cases, open braces are followed by a new line.
  if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {
    this.print_newline();
  }
};

Beautifier.prototype.handle_end_block = function(current_token) {
  // statements must all be closed when their container closes
  this.handle_whitespace_and_comments(current_token);

  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  var empty_braces = this._flags.last_token.type === TOKEN$2.START_BLOCK;

  if (this._flags.inline_frame && !empty_braces) { // try inline_frame (only set if this._options.braces-preserve-inline) first
    this._output.space_before_token = true;
  } else if (this._options.brace_style === "expand") {
    if (!empty_braces) {
      this.print_newline();
    }
  } else {
    // skip {}
    if (!empty_braces) {
      if (is_array(this._flags.mode) && this._options.keep_array_indentation) {
        // we REALLY need a newline here, but newliner would skip that
        this._options.keep_array_indentation = false;
        this.print_newline();
        this._options.keep_array_indentation = true;

      } else {
        this.print_newline();
      }
    }
  }
  this.restore_mode();
  this.print_token(current_token);
};

Beautifier.prototype.handle_word = function(current_token) {
  if (current_token.type === TOKEN$2.RESERVED) {
    if (in_array$1(current_token.text, ['set', 'get']) && this._flags.mode !== MODE.ObjectLiteral) {
      current_token.type = TOKEN$2.WORD;
    } else if (current_token.text === 'import' && this._tokens.peek().text === '(') {
      current_token.type = TOKEN$2.WORD;
    } else if (in_array$1(current_token.text, ['as', 'from']) && !this._flags.import_block) {
      current_token.type = TOKEN$2.WORD;
    } else if (this._flags.mode === MODE.ObjectLiteral) {
      var next_token = this._tokens.peek();
      if (next_token.text === ':') {
        current_token.type = TOKEN$2.WORD;
      }
    }
  }

  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    if (reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN$2.WORD) {
      this._flags.declaration_statement = true;
    }
  } else if (current_token.newlines && !is_expression(this._flags.mode) &&
    (this._flags.last_token.type !== TOKEN$2.OPERATOR || (this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) &&
    this._flags.last_token.type !== TOKEN$2.EQUALS &&
    (this._options.preserve_newlines || !reserved_array(this._flags.last_token, ['var', 'let', 'const', 'set', 'get']))) {
    this.handle_whitespace_and_comments(current_token);
    this.print_newline();
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.do_block && !this._flags.do_while) {
    if (reserved_word(current_token, 'while')) {
      // do {} ## while ()
      this._output.space_before_token = true;
      this.print_token(current_token);
      this._output.space_before_token = true;
      this._flags.do_while = true;
      return;
    } else {
      // do {} should always have while as the next word.
      // if we don't see the expected while, recover
      this.print_newline();
      this._flags.do_block = false;
    }
  }

  // if may be followed by else, or not
  // Bare/inline ifs are tricky
  // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
  if (this._flags.if_block) {
    if (!this._flags.else_block && reserved_word(current_token, 'else')) {
      this._flags.else_block = true;
    } else {
      while (this._flags.mode === MODE.Statement) {
        this.restore_mode();
      }
      this._flags.if_block = false;
      this._flags.else_block = false;
    }
  }

  if (this._flags.in_case_statement && reserved_array(current_token, ['case', 'default'])) {
    this.print_newline();
    if (this._flags.last_token.type !== TOKEN$2.END_BLOCK && (this._flags.case_body || this._options.jslint_happy)) {
      // switch cases following one another
      this.deindent();
    }
    this._flags.case_body = false;

    this.print_token(current_token);
    this._flags.in_case = true;
    return;
  }

  if (this._flags.last_token.type === TOKEN$2.COMMA || this._flags.last_token.type === TOKEN$2.START_EXPR || this._flags.last_token.type === TOKEN$2.EQUALS || this._flags.last_token.type === TOKEN$2.OPERATOR) {
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token);
    }
  }

  if (reserved_word(current_token, 'function')) {
    if (in_array$1(this._flags.last_token.text, ['}', ';']) ||
      (this._output.just_added_newline() && !(in_array$1(this._flags.last_token.text, ['(', '[', '{', ':', '=', ',']) || this._flags.last_token.type === TOKEN$2.OPERATOR))) {
      // make sure there is a nice clean space of at least one blank line
      // before a new function definition
      if (!this._output.just_added_blankline() && !current_token.comments_before) {
        this.print_newline();
        this.print_newline(true);
      }
    }
    if (this._flags.last_token.type === TOKEN$2.RESERVED || this._flags.last_token.type === TOKEN$2.WORD) {
      if (reserved_array(this._flags.last_token, ['get', 'set', 'new', 'export']) ||
        reserved_array(this._flags.last_token, newline_restricted_tokens)) {
        this._output.space_before_token = true;
      } else if (reserved_word(this._flags.last_token, 'default') && this._last_last_text === 'export') {
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'declare') {
        // accomodates Typescript declare function formatting
        this._output.space_before_token = true;
      } else {
        this.print_newline();
      }
    } else if (this._flags.last_token.type === TOKEN$2.OPERATOR || this._flags.last_token.text === '=') {
      // foo = function
      this._output.space_before_token = true;
    } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) ; else {
      this.print_newline();
    }

    this.print_token(current_token);
    this._flags.last_word = current_token.text;
    return;
  }

  var prefix = 'NONE';

  if (this._flags.last_token.type === TOKEN$2.END_BLOCK) {

    if (this._previous_flags.inline_frame) {
      prefix = 'SPACE';
    } else if (!reserved_array(current_token, ['else', 'catch', 'finally', 'from'])) {
      prefix = 'NEWLINE';
    } else {
      if (this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) {
        prefix = 'NEWLINE';
      } else {
        prefix = 'SPACE';
        this._output.space_before_token = true;
      }
    }
  } else if (this._flags.last_token.type === TOKEN$2.SEMICOLON && this._flags.mode === MODE.BlockStatement) {
    // TODO: Should this be for STATEMENT as well?
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN$2.SEMICOLON && is_expression(this._flags.mode)) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN$2.STRING) {
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN$2.RESERVED || this._flags.last_token.type === TOKEN$2.WORD ||
    (this._flags.last_token.text === '*' &&
      (in_array$1(this._last_last_text, ['function', 'yield']) ||
        (this._flags.mode === MODE.ObjectLiteral && in_array$1(this._last_last_text, ['{', ',']))))) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN$2.START_BLOCK) {
    if (this._flags.inline_frame) {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }
  } else if (this._flags.last_token.type === TOKEN$2.END_EXPR) {
    this._output.space_before_token = true;
    prefix = 'NEWLINE';
  }

  if (reserved_array(current_token, line_starters$1) && this._flags.last_token.text !== ')') {
    if (this._flags.inline_frame || this._flags.last_token.text === 'else' || this._flags.last_token.text === 'export') {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }

  }

  if (reserved_array(current_token, ['else', 'catch', 'finally'])) {
    if ((!(this._flags.last_token.type === TOKEN$2.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) ||
        this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) &&
      !this._flags.inline_frame) {
      this.print_newline();
    } else {
      this._output.trim(true);
      var line = this._output.current_line;
      // If we trimmed and there's something other than a close block before us
      // put a newline back in.  Handles '} // comment' scenario.
      if (line.last() !== '}') {
        this.print_newline();
      }
      this._output.space_before_token = true;
    }
  } else if (prefix === 'NEWLINE') {
    if (reserved_array(this._flags.last_token, special_words)) {
      // no newline between 'return nnn'
      this._output.space_before_token = true;
    } else if (this._flags.last_token.text === 'declare' && reserved_array(current_token, ['var', 'let', 'const'])) {
      // accomodates Typescript declare formatting
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type !== TOKEN$2.END_EXPR) {
      if ((this._flags.last_token.type !== TOKEN$2.START_EXPR || !reserved_array(current_token, ['var', 'let', 'const'])) && this._flags.last_token.text !== ':') {
        // no need to force newline on 'var': for (var x = 0...)
        if (reserved_word(current_token, 'if') && reserved_word(current_token.previous, 'else')) {
          // no newline for } else if {
          this._output.space_before_token = true;
        } else {
          this.print_newline();
        }
      }
    } else if (reserved_array(current_token, line_starters$1) && this._flags.last_token.text !== ')') {
      this.print_newline();
    }
  } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === ',' && this._last_last_text === '}') {
    this.print_newline(); // }, in lists get a newline treatment
  } else if (prefix === 'SPACE') {
    this._output.space_before_token = true;
  }
  if (current_token.previous && (current_token.previous.type === TOKEN$2.WORD || current_token.previous.type === TOKEN$2.RESERVED)) {
    this._output.space_before_token = true;
  }
  this.print_token(current_token);
  this._flags.last_word = current_token.text;

  if (current_token.type === TOKEN$2.RESERVED) {
    if (current_token.text === 'do') {
      this._flags.do_block = true;
    } else if (current_token.text === 'if') {
      this._flags.if_block = true;
    } else if (current_token.text === 'import') {
      this._flags.import_block = true;
    } else if (this._flags.import_block && reserved_word(current_token, 'from')) {
      this._flags.import_block = false;
    }
  }
};

Beautifier.prototype.handle_semicolon = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // Semicolon can be the start (and end) of a statement
    this._output.space_before_token = false;
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_token = this._tokens.peek();
  while (this._flags.mode === MODE.Statement &&
    !(this._flags.if_block && reserved_word(next_token, 'else')) &&
    !this._flags.do_block) {
    this.restore_mode();
  }

  // hacky but effective for the moment
  if (this._flags.import_block) {
    this._flags.import_block = false;
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_string = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // One difference - strings want at least a space before
    this._output.space_before_token = true;
  } else {
    this.handle_whitespace_and_comments(current_token);
    if (this._flags.last_token.type === TOKEN$2.RESERVED || this._flags.last_token.type === TOKEN$2.WORD || this._flags.inline_frame) {
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type === TOKEN$2.COMMA || this._flags.last_token.type === TOKEN$2.START_EXPR || this._flags.last_token.type === TOKEN$2.EQUALS || this._flags.last_token.type === TOKEN$2.OPERATOR) {
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else {
      this.print_newline();
    }
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_equals = function(current_token) {
  if (this.start_of_statement(current_token)) ; else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.declaration_statement) {
    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
    this._flags.declaration_assignment = true;
  }
  this._output.space_before_token = true;
  this.print_token(current_token);
  this._output.space_before_token = true;
};

Beautifier.prototype.handle_comma = function(current_token) {
  this.handle_whitespace_and_comments(current_token, true);

  this.print_token(current_token);
  this._output.space_before_token = true;
  if (this._flags.declaration_statement) {
    if (is_expression(this._flags.parent.mode)) {
      // do not break on comma, for(var a = 1, b = 2)
      this._flags.declaration_assignment = false;
    }

    if (this._flags.declaration_assignment) {
      this._flags.declaration_assignment = false;
      this.print_newline(false, true);
    } else if (this._options.comma_first) {
      // for comma-first, we want to allow a newline before the comma
      // to turn into a newline after the comma, which we will fixup later
      this.allow_wrap_or_preserved_newline(current_token);
    }
  } else if (this._flags.mode === MODE.ObjectLiteral ||
    (this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral)) {
    if (this._flags.mode === MODE.Statement) {
      this.restore_mode();
    }

    if (!this._flags.inline_frame) {
      this.print_newline();
    }
  } else if (this._options.comma_first) {
    // EXPR or DO_BLOCK
    // for comma-first, we want to allow a newline before the comma
    // to turn into a newline after the comma, which we will fixup later
    this.allow_wrap_or_preserved_newline(current_token);
  }
};

Beautifier.prototype.handle_operator = function(current_token) {
  var isGeneratorAsterisk = current_token.text === '*' &&
    (reserved_array(this._flags.last_token, ['function', 'yield']) ||
      (in_array$1(this._flags.last_token.type, [TOKEN$2.START_BLOCK, TOKEN$2.COMMA, TOKEN$2.END_BLOCK, TOKEN$2.SEMICOLON]))
    );
  var isUnary = in_array$1(current_token.text, ['-', '+']) && (
    in_array$1(this._flags.last_token.type, [TOKEN$2.START_BLOCK, TOKEN$2.START_EXPR, TOKEN$2.EQUALS, TOKEN$2.OPERATOR]) ||
    in_array$1(this._flags.last_token.text, line_starters$1) ||
    this._flags.last_token.text === ','
  );

  if (this.start_of_statement(current_token)) ; else {
    var preserve_statement_flags = !isGeneratorAsterisk;
    this.handle_whitespace_and_comments(current_token, preserve_statement_flags);
  }

  if (reserved_array(this._flags.last_token, special_words)) {
    // "return" had a special handling in TK_WORD. Now we need to return the favor
    this._output.space_before_token = true;
    this.print_token(current_token);
    return;
  }

  // hack for actionscript's import .*;
  if (current_token.text === '*' && this._flags.last_token.type === TOKEN$2.DOT) {
    this.print_token(current_token);
    return;
  }

  if (current_token.text === '::') {
    // no spaces around exotic namespacing syntax operator
    this.print_token(current_token);
    return;
  }

  // Allow line wrapping between operators when operator_position is
  //   set to before or preserve
  if (this._flags.last_token.type === TOKEN$2.OPERATOR && in_array$1(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
    this.allow_wrap_or_preserved_newline(current_token);
  }

  if (current_token.text === ':' && this._flags.in_case) {
    this.print_token(current_token);

    this._flags.in_case = false;
    this._flags.case_body = true;
    if (this._tokens.peek().type !== TOKEN$2.START_BLOCK) {
      this.indent();
      this.print_newline();
    } else {
      this._output.space_before_token = true;
    }
    return;
  }

  var space_before = true;
  var space_after = true;
  var in_ternary = false;
  if (current_token.text === ':') {
    if (this._flags.ternary_depth === 0) {
      // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
      space_before = false;
    } else {
      this._flags.ternary_depth -= 1;
      in_ternary = true;
    }
  } else if (current_token.text === '?') {
    this._flags.ternary_depth += 1;
  }

  // let's handle the operator_position option prior to any conflicting logic
  if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array$1(current_token.text, positionable_operators$1)) {
    var isColon = current_token.text === ':';
    var isTernaryColon = (isColon && in_ternary);
    var isOtherColon = (isColon && !in_ternary);

    switch (this._options.operator_position) {
      case OPERATOR_POSITION.before_newline:
        // if the current token is : and it's not a ternary statement then we set space_before to false
        this._output.space_before_token = !isOtherColon;

        this.print_token(current_token);

        if (!isColon || isTernaryColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.after_newline:
        // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
        //   then print a newline.

        this._output.space_before_token = true;

        if (!isColon || isTernaryColon) {
          if (this._tokens.peek().newlines) {
            this.print_newline(false, true);
          } else {
            this.allow_wrap_or_preserved_newline(current_token);
          }
        } else {
          this._output.space_before_token = false;
        }

        this.print_token(current_token);

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.preserve_newline:
        if (!isOtherColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        // if we just added a newline, or the current token is : and it's not a ternary statement,
        //   then we set space_before to false
        space_before = !(this._output.just_added_newline() || isOtherColon);

        this._output.space_before_token = space_before;
        this.print_token(current_token);
        this._output.space_before_token = true;
        return;
    }
  }

  if (isGeneratorAsterisk) {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = false;
    var next_token = this._tokens.peek();
    space_after = next_token && in_array$1(next_token.type, [TOKEN$2.WORD, TOKEN$2.RESERVED]);
  } else if (current_token.text === '...') {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = this._flags.last_token.type === TOKEN$2.START_BLOCK;
    space_after = false;
  } else if (in_array$1(current_token.text, ['--', '++', '!', '~']) || isUnary) {
    // unary operators (and binary +/- pretending to be unary) special cases
    if (this._flags.last_token.type === TOKEN$2.COMMA || this._flags.last_token.type === TOKEN$2.START_EXPR) {
      this.allow_wrap_or_preserved_newline(current_token);
    }

    space_before = false;
    space_after = false;

    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
    // if there is a newline between -- or ++ and anything else we should preserve it.
    if (current_token.newlines && (current_token.text === '--' || current_token.text === '++')) {
      this.print_newline(false, true);
    }

    if (this._flags.last_token.text === ';' && is_expression(this._flags.mode)) {
      // for (;; ++i)
      //        ^^^
      space_before = true;
    }

    if (this._flags.last_token.type === TOKEN$2.RESERVED) {
      space_before = true;
    } else if (this._flags.last_token.type === TOKEN$2.END_EXPR) {
      space_before = !(this._flags.last_token.text === ']' && (current_token.text === '--' || current_token.text === '++'));
    } else if (this._flags.last_token.type === TOKEN$2.OPERATOR) {
      // a++ + ++b;
      // a - -b
      space_before = in_array$1(current_token.text, ['--', '-', '++', '+']) && in_array$1(this._flags.last_token.text, ['--', '-', '++', '+']);
      // + and - are not unary when preceeded by -- or ++ operator
      // a-- + b
      // a * +b
      // a - -b
      if (in_array$1(current_token.text, ['+', '-']) && in_array$1(this._flags.last_token.text, ['--', '++'])) {
        space_after = true;
      }
    }


    if (((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame) || this._flags.mode === MODE.Statement) &&
      (this._flags.last_token.text === '{' || this._flags.last_token.text === ';')) {
      // { foo; --i }
      // foo(); --bar;
      this.print_newline();
    }
  }

  this._output.space_before_token = this._output.space_before_token || space_before;
  this.print_token(current_token);
  this._output.space_before_token = space_after;
};

Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    if (current_token.directives && current_token.directives.preserve === 'end') {
      // If we're testing the raw output behavior, do not allow a directive to turn it off.
      this._output.raw = this._options.test_output_raw;
    }
    return;
  }

  if (current_token.directives) {
    this.print_newline(false, preserve_statement_flags);
    this.print_token(current_token);
    if (current_token.directives.preserve === 'start') {
      this._output.raw = true;
    }
    this.print_newline(false, true);
    return;
  }

  // inline block
  if (!acorn.newline.test(current_token.text) && !current_token.newlines) {
    this._output.space_before_token = true;
    this.print_token(current_token);
    this._output.space_before_token = true;
    return;
  } else {
    this.print_block_commment(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {
  var lines = split_linebreaks(current_token.text);
  var j; // iterator for this case
  var javadoc = false;
  var starless = false;
  var lastIndent = current_token.whitespace_before;
  var lastIndentLength = lastIndent.length;

  // block comment starts with a new line
  this.print_newline(false, preserve_statement_flags);

  // first line always indented
  this.print_token_line_indentation(current_token);
  this._output.add_token(lines[0]);
  this.print_newline(false, preserve_statement_flags);


  if (lines.length > 1) {
    lines = lines.slice(1);
    javadoc = all_lines_start_with(lines, '*');
    starless = each_line_matches_indent(lines, lastIndent);

    if (javadoc) {
      this._flags.alignment = 1;
    }

    for (j = 0; j < lines.length; j++) {
      if (javadoc) {
        // javadoc: reformat and re-indent
        this.print_token_line_indentation(current_token);
        this._output.add_token(ltrim(lines[j]));
      } else if (starless && lines[j]) {
        // starless: re-indent non-empty content, avoiding trim
        this.print_token_line_indentation(current_token);
        this._output.add_token(lines[j].substring(lastIndentLength));
      } else {
        // normal comments output raw
        this._output.current_line.set_indent(-1);
        this._output.add_token(lines[j]);
      }

      // for comments on their own line or  more than one line, make sure there's a new line after
      this.print_newline(false, preserve_statement_flags);
    }

    this._flags.alignment = 0;
  }
};


Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {
  if (current_token.newlines) {
    this.print_newline(false, preserve_statement_flags);
  } else {
    this._output.trim(true);
  }

  this._output.space_before_token = true;
  this.print_token(current_token);
  this.print_newline(false, preserve_statement_flags);
};

Beautifier.prototype.handle_dot = function(current_token) {
  if (this.start_of_statement(current_token)) ; else {
    this.handle_whitespace_and_comments(current_token, true);
  }

  if (reserved_array(this._flags.last_token, special_words)) {
    this._output.space_before_token = false;
  } else {
    // allow preserved newlines before dots in general
    // force newlines on dots after close paren when break_chained - for bar().baz()
    this.allow_wrap_or_preserved_newline(current_token,
      this._flags.last_token.text === ')' && this._options.break_chained_methods);
  }

  // Only unindent chained method dot if this dot starts a new line.
  // Otherwise the automatic extra indentation removal will handle the over indent
  if (this._options.unindent_chained_methods && this._output.just_added_newline()) {
    this.deindent();
  }

  this.print_token(current_token);
};

Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {
  this.print_token(current_token);

  if (current_token.text[current_token.text.length - 1] === '\n') {
    this.print_newline(false, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_eof = function(current_token) {
  // Unwind any open statements
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }
  this.handle_whitespace_and_comments(current_token);
};

var Beautifier_1 = Beautifier;

var beautifier = {
	Beautifier: Beautifier_1
};

var Beautifier$1 = beautifier.Beautifier,
  Options$3 = options$1.Options;

function js_beautify(js_source_text, options) {
  var beautifier = new Beautifier$1(js_source_text, options);
  return beautifier.beautify();
}

var javascript = js_beautify;
var defaultOptions = function() {
  return new Options$3();
};
javascript.defaultOptions = defaultOptions;

var BaseOptions$1 = options.Options;

function Options$4(options) {
  BaseOptions$1.call(this, options, 'css');

  this.selector_separator_newline = this._get_boolean('selector_separator_newline', true);
  this.newline_between_rules = this._get_boolean('newline_between_rules', true);
  var space_around_selector_separator = this._get_boolean('space_around_selector_separator');
  this.space_around_combinator = this._get_boolean('space_around_combinator') || space_around_selector_separator;

}
Options$4.prototype = new BaseOptions$1();



var Options_1$2 = Options$4;

var options$2 = {
	Options: Options_1$2
};

var Options$5 = options$2.Options;
var Output$2 = output.Output;
var InputScanner$3 = inputscanner.InputScanner;
var Directives$2 = directives.Directives;

var directives_core$1 = new Directives$2(/\/\*/, /\*\//);

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

// tokenizer
var whitespaceChar = /\s/;
var whitespacePattern = /(?:\s|\n)+/g;
var block_comment_pattern = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g;
var comment_pattern = /\/\/(?:[^\n\r\u2028\u2029]*)/g;

function Beautifier$2(source_text, options) {
  this._source_text = source_text || '';
  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  this._options = new Options$5(options);
  this._ch = null;
  this._input = null;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
  this.NESTED_AT_RULE = {
    "@page": true,
    "@font-face": true,
    "@keyframes": true,
    // also in CONDITIONAL_GROUP_RULE below
    "@media": true,
    "@supports": true,
    "@document": true
  };
  this.CONDITIONAL_GROUP_RULE = {
    "@media": true,
    "@supports": true,
    "@document": true
  };

}

Beautifier$2.prototype.eatString = function(endChars) {
  var result = '';
  this._ch = this._input.next();
  while (this._ch) {
    result += this._ch;
    if (this._ch === "\\") {
      result += this._input.next();
    } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\n") {
      break;
    }
    this._ch = this._input.next();
  }
  return result;
};

// Skips any white space in the source text from the current position.
// When allowAtLeastOneNewLine is true, will output new lines for each
// newline character found; if the user has preserve_newlines off, only
// the first newline will be output
Beautifier$2.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {
  var result = whitespaceChar.test(this._input.peek());
  var isFirstNewLine = true;

  while (whitespaceChar.test(this._input.peek())) {
    this._ch = this._input.next();
    if (allowAtLeastOneNewLine && this._ch === '\n') {
      if (this._options.preserve_newlines || isFirstNewLine) {
        isFirstNewLine = false;
        this._output.add_new_line(true);
      }
    }
  }
  return result;
};

// Nested pseudo-class if we are insideRule
// and the next special character found opens
// a new block
Beautifier$2.prototype.foundNestedPseudoClass = function() {
  var openParen = 0;
  var i = 1;
  var ch = this._input.peek(i);
  while (ch) {
    if (ch === "{") {
      return true;
    } else if (ch === '(') {
      // pseudoclasses can contain ()
      openParen += 1;
    } else if (ch === ')') {
      if (openParen === 0) {
        return false;
      }
      openParen -= 1;
    } else if (ch === ";" || ch === "}") {
      return false;
    }
    i++;
    ch = this._input.peek(i);
  }
  return false;
};

Beautifier$2.prototype.print_string = function(output_string) {
  this._output.set_indent(this._indentLevel);
  this._output.non_breaking_space = true;
  this._output.add_token(output_string);
};

Beautifier$2.prototype.preserveSingleSpace = function(isAfterSpace) {
  if (isAfterSpace) {
    this._output.space_before_token = true;
  }
};

Beautifier$2.prototype.indent = function() {
  this._indentLevel++;
};

Beautifier$2.prototype.outdent = function() {
  if (this._indentLevel > 0) {
    this._indentLevel--;
  }
};

/*_____________________--------------------_____________________*/

Beautifier$2.prototype.beautify = function() {
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text || '')) {
      eol = source_text.match(lineBreak)[0];
    }
  }


  // HACK: newline parsing inconsistent. This brute force normalizes the this._input.
  source_text = source_text.replace(allLineBreaks, '\n');

  // reset
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._output = new Output$2(this._options, baseIndentString);
  this._input = new InputScanner$3(source_text);
  this._indentLevel = 0;
  this._nestedLevel = 0;

  this._ch = null;
  var parenLevel = 0;

  var insideRule = false;
  // This is the value side of a property value pair (blue in the following ex)
  // label { content: blue }
  var insidePropertyValue = false;
  var enteringConditionalGroup = false;
  var insideAtExtend = false;
  var insideAtImport = false;
  var topCharacter = this._ch;
  var whitespace;
  var isAfterSpace;
  var previous_ch;

  while (true) {
    whitespace = this._input.read(whitespacePattern);
    isAfterSpace = whitespace !== '';
    previous_ch = topCharacter;
    this._ch = this._input.next();
    if (this._ch === '\\' && this._input.hasNext()) {
      this._ch += this._input.next();
    }
    topCharacter = this._ch;

    if (!this._ch) {
      break;
    } else if (this._ch === '/' && this._input.peek() === '*') {
      // /* css comment */
      // Always start block comments on a new line.
      // This handles scenarios where a block comment immediately
      // follows a property definition on the same line or where
      // minified code is being beautified.
      this._output.add_new_line();
      this._input.back();

      var comment = this._input.read(block_comment_pattern);

      // Handle ignore directive
      var directives = directives_core$1.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core$1.readIgnored(this._input);
      }

      this.print_string(comment);

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);

      // Block comments are followed by a new line so they don't
      // share a line with other properties
      this._output.add_new_line();
    } else if (this._ch === '/' && this._input.peek() === '/') {
      // // single line comment
      // Preserves the space before a comment
      // on the same line as a rule
      this._output.space_before_token = true;
      this._input.back();
      this.print_string(this._input.read(comment_pattern));

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);
    } else if (this._ch === '@') {
      this.preserveSingleSpace(isAfterSpace);

      // deal with less propery mixins @{...}
      if (this._input.peek() === '{') {
        this.print_string(this._ch + this.eatString('}'));
      } else {
        this.print_string(this._ch);

        // strip trailing space, if present, for hash property checks
        var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);

        if (variableOrRule.match(/[ :]$/)) {
          // we have a variable or pseudo-class, add it and insert one space before continuing
          variableOrRule = this.eatString(": ").replace(/\s$/, '');
          this.print_string(variableOrRule);
          this._output.space_before_token = true;
        }

        variableOrRule = variableOrRule.replace(/\s$/, '');

        if (variableOrRule === 'extend') {
          insideAtExtend = true;
        } else if (variableOrRule === 'import') {
          insideAtImport = true;
        }

        // might be a nesting at-rule
        if (variableOrRule in this.NESTED_AT_RULE) {
          this._nestedLevel += 1;
          if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {
            enteringConditionalGroup = true;
          }
          // might be less variable
        } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(':') !== -1) {
          insidePropertyValue = true;
          this.indent();
        }
      }
    } else if (this._ch === '#' && this._input.peek() === '{') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString('}'));
    } else if (this._ch === '{') {
      if (insidePropertyValue) {
        insidePropertyValue = false;
        this.outdent();
      }
      this.indent();
      this._output.space_before_token = true;
      this.print_string(this._ch);

      // when entering conditional groups, only rulesets are allowed
      if (enteringConditionalGroup) {
        enteringConditionalGroup = false;
        insideRule = (this._indentLevel > this._nestedLevel);
      } else {
        // otherwise, declarations are also allowed
        insideRule = (this._indentLevel >= this._nestedLevel);
      }
      if (this._options.newline_between_rules && insideRule) {
        if (this._output.previous_line && this._output.previous_line.item(-1) !== '{') {
          this._output.ensure_empty_line_above('/', ',');
        }
      }
      this.eatWhitespace(true);
      this._output.add_new_line();
    } else if (this._ch === '}') {
      this.outdent();
      this._output.add_new_line();
      if (previous_ch === '{') {
        this._output.trim(true);
      }
      insideAtImport = false;
      insideAtExtend = false;
      if (insidePropertyValue) {
        this.outdent();
        insidePropertyValue = false;
      }
      this.print_string(this._ch);
      insideRule = false;
      if (this._nestedLevel) {
        this._nestedLevel--;
      }

      this.eatWhitespace(true);
      this._output.add_new_line();

      if (this._options.newline_between_rules && !this._output.just_added_blankline()) {
        if (this._input.peek() !== '}') {
          this._output.add_new_line(true);
        }
      }
    } else if (this._ch === ":") {
      if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideAtExtend && parenLevel === 0) {
        // 'property: value' delimiter
        // which could be in a conditional group query
        this.print_string(':');
        if (!insidePropertyValue) {
          insidePropertyValue = true;
          this._output.space_before_token = true;
          this.eatWhitespace(true);
          this.indent();
        }
      } else {
        // sass/less parent reference don't use a space
        // sass nested pseudo-class don't use a space

        // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
        if (this._input.lookBack(" ")) {
          this._output.space_before_token = true;
        }
        if (this._input.peek() === ":") {
          // pseudo-element
          this._ch = this._input.next();
          this.print_string("::");
        } else {
          // pseudo-class
          this.print_string(':');
        }
      }
    } else if (this._ch === '"' || this._ch === '\'') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString(this._ch));
      this.eatWhitespace(true);
    } else if (this._ch === ';') {
      if (parenLevel === 0) {
        if (insidePropertyValue) {
          this.outdent();
          insidePropertyValue = false;
        }
        insideAtExtend = false;
        insideAtImport = false;
        this.print_string(this._ch);
        this.eatWhitespace(true);

        // This maintains single line comments on the same
        // line. Block comments are also affected, but
        // a new line is always output before one inside
        // that section
        if (this._input.peek() !== '/') {
          this._output.add_new_line();
        }
      } else {
        this.print_string(this._ch);
        this.eatWhitespace(true);
        this._output.space_before_token = true;
      }
    } else if (this._ch === '(') { // may be a url
      if (this._input.lookBack("url")) {
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
        this._ch = this._input.next();
        if (this._ch === ')' || this._ch === '"' || this._ch === '\'') {
          this._input.back();
        } else if (this._ch) {
          this.print_string(this._ch + this.eatString(')'));
          if (parenLevel) {
            parenLevel--;
            this.outdent();
          }
        }
      } else {
        this.preserveSingleSpace(isAfterSpace);
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
      }
    } else if (this._ch === ')') {
      if (parenLevel) {
        parenLevel--;
        this.outdent();
      }
      this.print_string(this._ch);
    } else if (this._ch === ',') {
      this.print_string(this._ch);
      this.eatWhitespace(true);
      if (this._options.selector_separator_newline && !insidePropertyValue && parenLevel === 0 && !insideAtImport) {
        this._output.add_new_line();
      } else {
        this._output.space_before_token = true;
      }
    } else if ((this._ch === '>' || this._ch === '+' || this._ch === '~') && !insidePropertyValue && parenLevel === 0) {
      //handle combinator spacing
      if (this._options.space_around_combinator) {
        this._output.space_before_token = true;
        this.print_string(this._ch);
        this._output.space_before_token = true;
      } else {
        this.print_string(this._ch);
        this.eatWhitespace();
        // squash extra whitespace
        if (this._ch && whitespaceChar.test(this._ch)) {
          this._ch = '';
        }
      }
    } else if (this._ch === ']') {
      this.print_string(this._ch);
    } else if (this._ch === '[') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    } else if (this._ch === '=') { // no whitespace before or after
      this.eatWhitespace();
      this.print_string('=');
      if (whitespaceChar.test(this._ch)) {
        this._ch = '';
      }
    } else if (this._ch === '!' && !this._input.lookBack("\\")) { // !important
      this.print_string(' ');
      this.print_string(this._ch);
    } else {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    }
  }

  var sweetCode = this._output.get_code(eol);

  return sweetCode;
};

var Beautifier_1$1 = Beautifier$2;

var beautifier$1 = {
	Beautifier: Beautifier_1$1
};

var Beautifier$3 = beautifier$1.Beautifier,
  Options$6 = options$2.Options;

function css_beautify(source_text, options) {
  var beautifier = new Beautifier$3(source_text, options);
  return beautifier.beautify();
}

var css = css_beautify;
var defaultOptions$1 = function() {
  return new Options$6();
};
css.defaultOptions = defaultOptions$1;

var BaseOptions$2 = options.Options;

function Options$7(options) {
  BaseOptions$2.call(this, options, 'html');
  if (this.templating.length === 1 && this.templating[0] === 'auto') {
    this.templating = ['django', 'erb', 'handlebars', 'php'];
  }

  this.indent_inner_html = this._get_boolean('indent_inner_html');
  this.indent_body_inner_html = this._get_boolean('indent_body_inner_html', true);
  this.indent_head_inner_html = this._get_boolean('indent_head_inner_html', true);

  this.indent_handlebars = this._get_boolean('indent_handlebars', true);
  this.wrap_attributes = this._get_selection('wrap_attributes',
    ['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']);
  this.wrap_attributes_indent_size = this._get_number('wrap_attributes_indent_size', this.indent_size);
  this.extra_liners = this._get_array('extra_liners', ['head', 'body', '/html']);

  // Block vs inline elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
  // https://www.w3.org/TR/html5/dom.html#phrasing-content
  this.inline = this._get_array('inline', [
    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
    'video', 'wbr', 'text',
    // obsolete inline tags
    'acronym', 'big', 'strike', 'tt'
  ]);
  this.void_elements = this._get_array('void_elements', [
    // HTLM void elements - aka self-closing tags - aka singletons
    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
    // NOTE: Optional tags are too complex for a simple list
    // they are hard coded in _do_optional_end_element

    // Doctype and xml elements
    '!doctype', '?xml',

    // obsolete tags
    // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
    // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
    'basefont', 'isindex'
  ]);
  this.unformatted = this._get_array('unformatted', []);
  this.content_unformatted = this._get_array('content_unformatted', [
    'pre', 'textarea'
  ]);
  this.unformatted_content_delimiter = this._get_characters('unformatted_content_delimiter');
  this.indent_scripts = this._get_selection('indent_scripts', ['normal', 'keep', 'separate']);

}
Options$7.prototype = new BaseOptions$2();



var Options_1$3 = Options$7;

var options$3 = {
	Options: Options_1$3
};

var BaseTokenizer$1 = tokenizer.Tokenizer;
var BASETOKEN$1 = tokenizer.TOKEN;
var Directives$3 = directives.Directives;
var TemplatablePattern$2 = templatablepattern.TemplatablePattern;
var Pattern$4 = pattern.Pattern;

var TOKEN$3 = {
  TAG_OPEN: 'TK_TAG_OPEN',
  TAG_CLOSE: 'TK_TAG_CLOSE',
  ATTRIBUTE: 'TK_ATTRIBUTE',
  EQUALS: 'TK_EQUALS',
  VALUE: 'TK_VALUE',
  COMMENT: 'TK_COMMENT',
  TEXT: 'TK_TEXT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN$1.START,
  RAW: BASETOKEN$1.RAW,
  EOF: BASETOKEN$1.EOF
};

var directives_core$2 = new Directives$3(/<\!--/, /-->/);

var Tokenizer$3 = function(input_string, options) {
  BaseTokenizer$1.call(this, input_string, options);
  this._current_tag_name = '';

  // Words end at whitespace or when a tag starts
  // if we are indenting handlebars, they are considered tags
  var templatable_reader = new TemplatablePattern$2(this._input).read_options(this._options);
  var pattern_reader = new Pattern$4(this._input);

  this.__patterns = {
    word: templatable_reader.until(/[\n\r\t <]/),
    single_quote: templatable_reader.until_after(/'/),
    double_quote: templatable_reader.until_after(/"/),
    attribute: templatable_reader.until(/[\n\r\t =>]|\/>/),
    element_name: templatable_reader.until(/[\n\r\t >\/]/),

    handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),
    handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),
    handlebars_open: pattern_reader.until(/[\n\r\t }]/),
    handlebars_raw_close: pattern_reader.until(/}}/),
    comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),
    cdata: pattern_reader.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
    // https://en.wikipedia.org/wiki/Conditional_comment
    conditional_comment: pattern_reader.starting_with(/<!\[/).until_after(/]>/),
    processing: pattern_reader.starting_with(/<\?/).until_after(/\?>/)
  };

  if (this._options.indent_handlebars) {
    this.__patterns.word = this.__patterns.word.exclude('handlebars');
  }

  this._unformatted_content_delimiter = null;

  if (this._options.unformatted_content_delimiter) {
    var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
    this.__patterns.unformatted_content_delimiter =
      pattern_reader.matching(literal_regexp)
      .until_after(literal_regexp);
  }
};
Tokenizer$3.prototype = new BaseTokenizer$1();

Tokenizer$3.prototype._is_comment = function(current_token) { // jshint unused:false
  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer$3.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN$3.TAG_OPEN;
};

Tokenizer$3.prototype._is_closing = function(current_token, open_token) {
  return current_token.type === TOKEN$3.TAG_CLOSE &&
    (open_token && (
      ((current_token.text === '>' || current_token.text === '/>') && open_token.text[0] === '<') ||
      (current_token.text === '}}' && open_token.text[0] === '{' && open_token.text[1] === '{')));
};

Tokenizer$3.prototype._reset = function() {
  this._current_tag_name = '';
};

Tokenizer$3.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN$3.EOF, '');
  }

  token = token || this._read_open_handlebars(c, open_token);
  token = token || this._read_attribute(c, previous_token, open_token);
  token = token || this._read_raw_content(c, previous_token, open_token);
  token = token || this._read_close(c, open_token);
  token = token || this._read_content_word(c);
  token = token || this._read_comment_or_cdata(c);
  token = token || this._read_processing(c);
  token = token || this._read_open(c, open_token);
  token = token || this._create_token(TOKEN$3.UNKNOWN, this._input.next());

  return token;
};

Tokenizer$3.prototype._read_comment_or_cdata = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    // We treat all comments as literals, even more than preformatted tags
    // we only look for the appropriate closing marker
    if (peek1 === '!') {
      resulting_string = this.__patterns.comment.read();

      // only process directive on html comments
      if (resulting_string) {
        directives = directives_core$2.get_directives(resulting_string);
        if (directives && directives.ignore === 'start') {
          resulting_string += directives_core$2.readIgnored(this._input);
        }
      } else {
        resulting_string = this.__patterns.cdata.read();
      }
    }

    if (resulting_string) {
      token = this._create_token(TOKEN$3.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer$3.prototype._read_processing = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    if (peek1 === '!' || peek1 === '?') {
      resulting_string = this.__patterns.conditional_comment.read();
      resulting_string = resulting_string || this.__patterns.processing.read();
    }

    if (resulting_string) {
      token = this._create_token(TOKEN$3.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer$3.prototype._read_open = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (c === '<') {

      resulting_string = this._input.next();
      if (this._input.peek() === '/') {
        resulting_string += this._input.next();
      }
      resulting_string += this.__patterns.element_name.read();
      token = this._create_token(TOKEN$3.TAG_OPEN, resulting_string);
    }
  }
  return token;
};

Tokenizer$3.prototype._read_open_handlebars = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (this._options.indent_handlebars && c === '{' && this._input.peek(1) === '{') {
      if (this._input.peek(2) === '!') {
        resulting_string = this.__patterns.handlebars_comment.read();
        resulting_string = resulting_string || this.__patterns.handlebars.read();
        token = this._create_token(TOKEN$3.COMMENT, resulting_string);
      } else {
        resulting_string = this.__patterns.handlebars_open.read();
        token = this._create_token(TOKEN$3.TAG_OPEN, resulting_string);
      }
    }
  }
  return token;
};


Tokenizer$3.prototype._read_close = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (open_token) {
    if (open_token.text[0] === '<' && (c === '>' || (c === '/' && this._input.peek(1) === '>'))) {
      resulting_string = this._input.next();
      if (c === '/') { //  for close tag "/>"
        resulting_string += this._input.next();
      }
      token = this._create_token(TOKEN$3.TAG_CLOSE, resulting_string);
    } else if (open_token.text[0] === '{' && c === '}' && this._input.peek(1) === '}') {
      this._input.next();
      this._input.next();
      token = this._create_token(TOKEN$3.TAG_CLOSE, '}}');
    }
  }

  return token;
};

Tokenizer$3.prototype._read_attribute = function(c, previous_token, open_token) {
  var token = null;
  var resulting_string = '';
  if (open_token && open_token.text[0] === '<') {

    if (c === '=') {
      token = this._create_token(TOKEN$3.EQUALS, this._input.next());
    } else if (c === '"' || c === "'") {
      var content = this._input.next();
      if (c === '"') {
        content += this.__patterns.double_quote.read();
      } else {
        content += this.__patterns.single_quote.read();
      }
      token = this._create_token(TOKEN$3.VALUE, content);
    } else {
      resulting_string = this.__patterns.attribute.read();

      if (resulting_string) {
        if (previous_token.type === TOKEN$3.EQUALS) {
          token = this._create_token(TOKEN$3.VALUE, resulting_string);
        } else {
          token = this._create_token(TOKEN$3.ATTRIBUTE, resulting_string);
        }
      }
    }
  }
  return token;
};

Tokenizer$3.prototype._is_content_unformatted = function(tag_name) {
  // void_elements have no content and so cannot have unformatted content
  // script and style tags should always be read as unformatted content
  // finally content_unformatted and unformatted element contents are unformatted
  return this._options.void_elements.indexOf(tag_name) === -1 &&
    (this._options.content_unformatted.indexOf(tag_name) !== -1 ||
      this._options.unformatted.indexOf(tag_name) !== -1);
};


Tokenizer$3.prototype._read_raw_content = function(c, previous_token, open_token) { // jshint unused:false
  var resulting_string = '';
  if (open_token && open_token.text[0] === '{') {
    resulting_string = this.__patterns.handlebars_raw_close.read();
  } else if (previous_token.type === TOKEN$3.TAG_CLOSE && (previous_token.opened.text[0] === '<')) {
    var tag_name = previous_token.opened.text.substr(1).toLowerCase();
    if (tag_name === 'script' || tag_name === 'style') {
      // Script and style tags are allowed to have comments wrapping their content
      // or just have regular content.
      var token = this._read_comment_or_cdata(c);
      if (token) {
        token.type = TOKEN$3.TEXT;
        return token;
      }
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    } else if (this._is_content_unformatted(tag_name)) {
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    }
  }

  if (resulting_string) {
    return this._create_token(TOKEN$3.TEXT, resulting_string);
  }

  return null;
};

Tokenizer$3.prototype._read_content_word = function(c) {
  var resulting_string = '';
  if (this._options.unformatted_content_delimiter) {
    if (c === this._options.unformatted_content_delimiter[0]) {
      resulting_string = this.__patterns.unformatted_content_delimiter.read();
    }
  }

  if (!resulting_string) {
    resulting_string = this.__patterns.word.read();
  }
  if (resulting_string) {
    return this._create_token(TOKEN$3.TEXT, resulting_string);
  }
};

var Tokenizer_1$2 = Tokenizer$3;
var TOKEN_1$2 = TOKEN$3;

var tokenizer$2 = {
	Tokenizer: Tokenizer_1$2,
	TOKEN: TOKEN_1$2
};

var Options$8 = options$3.Options;
var Output$3 = output.Output;
var Tokenizer$4 = tokenizer$2.Tokenizer;
var TOKEN$4 = tokenizer$2.TOKEN;

var lineBreak$1 = /\r\n|[\r\n]/;
var allLineBreaks$1 = /\r\n|[\r\n]/g;

var Printer = function(options, base_indent_string) { //handles input/output and some other printing functions

  this.indent_level = 0;
  this.alignment_size = 0;
  this.max_preserve_newlines = options.max_preserve_newlines;
  this.preserve_newlines = options.preserve_newlines;

  this._output = new Output$3(options, base_indent_string);

};

Printer.prototype.current_line_has_match = function(pattern) {
  return this._output.current_line.has_match(pattern);
};

Printer.prototype.set_space_before_token = function(value, non_breaking) {
  this._output.space_before_token = value;
  this._output.non_breaking_space = non_breaking;
};

Printer.prototype.set_wrap_point = function() {
  this._output.set_indent(this.indent_level, this.alignment_size);
  this._output.set_wrap_point();
};


Printer.prototype.add_raw_token = function(token) {
  this._output.add_raw_token(token);
};

Printer.prototype.print_preserved_newlines = function(raw_token) {
  var newlines = 0;
  if (raw_token.type !== TOKEN$4.TEXT && raw_token.previous.type !== TOKEN$4.TEXT) {
    newlines = raw_token.newlines ? 1 : 0;
  }

  if (this.preserve_newlines) {
    newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;
  }
  for (var n = 0; n < newlines; n++) {
    this.print_newline(n > 0);
  }

  return newlines !== 0;
};

Printer.prototype.traverse_whitespace = function(raw_token) {
  if (raw_token.whitespace_before || raw_token.newlines) {
    if (!this.print_preserved_newlines(raw_token)) {
      this._output.space_before_token = true;
    }
    return true;
  }
  return false;
};

Printer.prototype.previous_token_wrapped = function() {
  return this._output.previous_token_wrapped;
};

Printer.prototype.print_newline = function(force) {
  this._output.add_new_line(force);
};

Printer.prototype.print_token = function(token) {
  if (token.text) {
    this._output.set_indent(this.indent_level, this.alignment_size);
    this._output.add_token(token.text);
  }
};

Printer.prototype.indent = function() {
  this.indent_level++;
};

Printer.prototype.get_full_indent = function(level) {
  level = this.indent_level + (level || 0);
  if (level < 1) {
    return '';
  }

  return this._output.get_indent_string(level);
};

var get_type_attribute = function(start_token) {
  var result = null;
  var raw_token = start_token.next;

  // Search attributes for a type attribute
  while (raw_token.type !== TOKEN$4.EOF && start_token.closed !== raw_token) {
    if (raw_token.type === TOKEN$4.ATTRIBUTE && raw_token.text === 'type') {
      if (raw_token.next && raw_token.next.type === TOKEN$4.EQUALS &&
        raw_token.next.next && raw_token.next.next.type === TOKEN$4.VALUE) {
        result = raw_token.next.next.text;
      }
      break;
    }
    raw_token = raw_token.next;
  }

  return result;
};

var get_custom_beautifier_name = function(tag_check, raw_token) {
  var typeAttribute = null;
  var result = null;

  if (!raw_token.closed) {
    return null;
  }

  if (tag_check === 'script') {
    typeAttribute = 'text/javascript';
  } else if (tag_check === 'style') {
    typeAttribute = 'text/css';
  }

  typeAttribute = get_type_attribute(raw_token) || typeAttribute;

  // For script and style tags that have a type attribute, only enable custom beautifiers for matching values
  // For those without a type attribute use default;
  if (typeAttribute.search('text/css') > -1) {
    result = 'css';
  } else if (typeAttribute.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1) {
    result = 'javascript';
  } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(html)/) > -1) {
    result = 'html';
  } else if (typeAttribute.search(/test\/null/) > -1) {
    // Test only mime-type for testing the beautifier when null is passed as beautifing function
    result = 'null';
  }

  return result;
};

function in_array$2(what, arr) {
  return arr.indexOf(what) !== -1;
}

function TagFrame(parent, parser_token, indent_level) {
  this.parent = parent || null;
  this.tag = parser_token ? parser_token.tag_name : '';
  this.indent_level = indent_level || 0;
  this.parser_token = parser_token || null;
}

function TagStack(printer) {
  this._printer = printer;
  this._current_frame = null;
}

TagStack.prototype.get_parser_token = function() {
  return this._current_frame ? this._current_frame.parser_token : null;
};

TagStack.prototype.record_tag = function(parser_token) { //function to record a tag and its parent in this.tags Object
  var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);
  this._current_frame = new_frame;
};

TagStack.prototype._try_pop_frame = function(frame) { //function to retrieve the opening tag to the corresponding closer
  var parser_token = null;

  if (frame) {
    parser_token = frame.parser_token;
    this._printer.indent_level = frame.indent_level;
    this._current_frame = frame.parent;
  }

  return parser_token;
};

TagStack.prototype._get_frame = function(tag_list, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._current_frame;

  while (frame) { //till we reach '' (the initial value);
    if (tag_list.indexOf(frame.tag) !== -1) { //if this is it use it
      break;
    } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {
      frame = null;
      break;
    }
    frame = frame.parent;
  }

  return frame;
};

TagStack.prototype.try_pop = function(tag, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._get_frame([tag], stop_list);
  return this._try_pop_frame(frame);
};

TagStack.prototype.indent_to_tag = function(tag_list) {
  var frame = this._get_frame(tag_list);
  if (frame) {
    this._printer.indent_level = frame.indent_level;
  }
};

function Beautifier$4(source_text, options, js_beautify, css_beautify) {
  //Wrapper function to invoke all the necessary constructors and deal with the output.
  this._source_text = source_text || '';
  options = options || {};
  this._js_beautify = js_beautify;
  this._css_beautify = css_beautify;
  this._tag_stack = null;

  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  var optionHtml = new Options$8(options, 'html');

  this._options = optionHtml;

  this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 'force'.length) === 'force';
  this._is_wrap_attributes_force_expand_multiline = (this._options.wrap_attributes === 'force-expand-multiline');
  this._is_wrap_attributes_force_aligned = (this._options.wrap_attributes === 'force-aligned');
  this._is_wrap_attributes_aligned_multiple = (this._options.wrap_attributes === 'aligned-multiple');
  this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 'preserve'.length) === 'preserve';
  this._is_wrap_attributes_preserve_aligned = (this._options.wrap_attributes === 'preserve-aligned');
}

Beautifier$4.prototype.beautify = function() {

  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak$1.test(source_text)) {
      eol = source_text.match(lineBreak$1)[0];
    }
  }

  // HACK: newline parsing inconsistent. This brute force normalizes the input.
  source_text = source_text.replace(allLineBreaks$1, '\n');

  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  var last_token = {
    text: '',
    type: ''
  };

  var last_tag_token = new TagOpenParserToken();

  var printer = new Printer(this._options, baseIndentString);
  var tokens = new Tokenizer$4(source_text, this._options).tokenize();

  this._tag_stack = new TagStack(printer);

  var parser_token = null;
  var raw_token = tokens.next();
  while (raw_token.type !== TOKEN$4.EOF) {

    if (raw_token.type === TOKEN$4.TAG_OPEN || raw_token.type === TOKEN$4.COMMENT) {
      parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);
      last_tag_token = parser_token;
    } else if ((raw_token.type === TOKEN$4.ATTRIBUTE || raw_token.type === TOKEN$4.EQUALS || raw_token.type === TOKEN$4.VALUE) ||
      (raw_token.type === TOKEN$4.TEXT && !last_tag_token.tag_complete)) {
      parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);
    } else if (raw_token.type === TOKEN$4.TAG_CLOSE) {
      parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);
    } else if (raw_token.type === TOKEN$4.TEXT) {
      parser_token = this._handle_text(printer, raw_token, last_tag_token);
    } else {
      // This should never happen, but if it does. Print the raw token
      printer.add_raw_token(raw_token);
    }

    last_token = parser_token;

    raw_token = tokens.next();
  }
  var sweet_code = printer._output.get_code(eol);

  return sweet_code;
};

Beautifier$4.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };
  printer.alignment_size = 0;
  last_tag_token.tag_complete = true;

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    if (last_tag_token.tag_start_char === '<') {
      printer.set_space_before_token(raw_token.text[0] === '/', true); // space before />, no space before >
      if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {
        printer.print_newline(false);
      }
    }
    printer.print_token(raw_token);

  }

  if (last_tag_token.indent_content &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.indent();

    // only indent once per opened tag
    last_tag_token.indent_content = false;
  }

  if (!last_tag_token.is_inline_element &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.set_wrap_point();
  }

  return parser_token;
};

Beautifier$4.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {
  var wrapped = last_tag_token.has_wrapped_attrs;
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else if (last_tag_token.tag_start_char === '{' && raw_token.type === TOKEN$4.TEXT) {
    // For the insides of handlebars allow newlines or a single space between open and contents
    if (printer.print_preserved_newlines(raw_token)) {
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
    } else {
      printer.print_token(raw_token);
    }
  } else {
    if (raw_token.type === TOKEN$4.ATTRIBUTE) {
      printer.set_space_before_token(true);
      last_tag_token.attr_count += 1;
    } else if (raw_token.type === TOKEN$4.EQUALS) { //no space before =
      printer.set_space_before_token(false);
    } else if (raw_token.type === TOKEN$4.VALUE && raw_token.previous.type === TOKEN$4.EQUALS) { //no space before value
      printer.set_space_before_token(false);
    }

    if (raw_token.type === TOKEN$4.ATTRIBUTE && last_tag_token.tag_start_char === '<') {
      if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {
        printer.traverse_whitespace(raw_token);
        wrapped = wrapped || raw_token.newlines !== 0;
      }


      if (this._is_wrap_attributes_force) {
        var force_attr_wrap = last_tag_token.attr_count > 1;
        if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {
          var is_only_attribute = true;
          var peek_index = 0;
          var peek_token;
          do {
            peek_token = tokens.peek(peek_index);
            if (peek_token.type === TOKEN$4.ATTRIBUTE) {
              is_only_attribute = false;
              break;
            }
            peek_index += 1;
          } while (peek_index < 4 && peek_token.type !== TOKEN$4.EOF && peek_token.type !== TOKEN$4.TAG_CLOSE);

          force_attr_wrap = !is_only_attribute;
        }

        if (force_attr_wrap) {
          printer.print_newline(false);
          wrapped = true;
        }
      }
    }
    printer.print_token(raw_token);
    wrapped = wrapped || printer.previous_token_wrapped();
    last_tag_token.has_wrapped_attrs = wrapped;
  }
  return parser_token;
};

Beautifier$4.prototype._handle_text = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: 'TK_CONTENT'
  };
  if (last_tag_token.custom_beautifier_name) { //check if we need to format javascript
    this._print_custom_beatifier_text(printer, raw_token, last_tag_token);
  } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    printer.traverse_whitespace(raw_token);
    printer.print_token(raw_token);
  }
  return parser_token;
};

Beautifier$4.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {
  var local = this;
  if (raw_token.text !== '') {

    var text = raw_token.text,
      _beautifier,
      script_indent_level = 1,
      pre = '',
      post = '';
    if (last_tag_token.custom_beautifier_name === 'javascript' && typeof this._js_beautify === 'function') {
      _beautifier = this._js_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'css' && typeof this._css_beautify === 'function') {
      _beautifier = this._css_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'html') {
      _beautifier = function(html_source, options) {
        var beautifier = new Beautifier$4(html_source, options, local._js_beautify, local._css_beautify);
        return beautifier.beautify();
      };
    }

    if (this._options.indent_scripts === "keep") {
      script_indent_level = 0;
    } else if (this._options.indent_scripts === "separate") {
      script_indent_level = -printer.indent_level;
    }

    var indentation = printer.get_full_indent(script_indent_level);

    // if there is at least one empty line at the end of this text, strip it
    // we'll be adding one back after the text but before the containing tag.
    text = text.replace(/\n[ \t]*$/, '');

    // Handle the case where content is wrapped in a comment or cdata.
    if (last_tag_token.custom_beautifier_name !== 'html' &&
      text[0] === '<' && text.match(/^(<!--|<!\[CDATA\[)/)) {
      var matched = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(text);

      // if we start to wrap but don't finish, print raw
      if (!matched) {
        printer.add_raw_token(raw_token);
        return;
      }

      pre = indentation + matched[1] + '\n';
      text = matched[4];
      if (matched[5]) {
        post = indentation + matched[5];
      }

      // if there is at least one empty line at the end of this text, strip it
      // we'll be adding one back after the text but before the containing tag.
      text = text.replace(/\n[ \t]*$/, '');

      if (matched[2] || matched[3].indexOf('\n') !== -1) {
        // if the first line of the non-comment text has spaces
        // use that as the basis for indenting in null case.
        matched = matched[3].match(/[ \t]+$/);
        if (matched) {
          raw_token.whitespace_before = matched[0];
        }
      }
    }

    if (text) {
      if (_beautifier) {

        // call the Beautifier if avaliable
        var Child_options = function() {
          this.eol = '\n';
        };
        Child_options.prototype = this._options.raw_options;
        var child_options = new Child_options();
        text = _beautifier(indentation + text, child_options);
      } else {
        // simply indent the string otherwise
        var white = raw_token.whitespace_before;
        if (white) {
          text = text.replace(new RegExp('\n(' + white + ')?', 'g'), '\n');
        }

        text = indentation + text.replace(/\n/g, '\n' + indentation);
      }
    }

    if (pre) {
      if (!text) {
        text = pre + post;
      } else {
        text = pre + text + '\n' + post;
      }
    }

    printer.print_newline(false);
    if (text) {
      raw_token.text = text;
      raw_token.whitespace_before = '';
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
      printer.print_newline(true);
    }
  }
};

Beautifier$4.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {
  var parser_token = this._get_tag_open_token(raw_token);

  if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) &&
    raw_token.type === TOKEN$4.TAG_OPEN && raw_token.text.indexOf('</') === 0) {
    // End element tags for unformatted or content_unformatted elements
    // are printed raw to keep any newlines inside them exactly the same.
    printer.add_raw_token(raw_token);
    parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);
  } else {
    printer.traverse_whitespace(raw_token);
    this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);
    if (!parser_token.is_inline_element) {
      printer.set_wrap_point();
    }
    printer.print_token(raw_token);
  }

  //indent attributes an auto, forced, aligned or forced-align line-wrap
  if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {
    parser_token.alignment_size = raw_token.text.length + 1;
  }

  if (!parser_token.tag_complete && !parser_token.is_unformatted) {
    printer.alignment_size = parser_token.alignment_size;
  }

  return parser_token;
};

var TagOpenParserToken = function(parent, raw_token) {
  this.parent = parent || null;
  this.text = '';
  this.type = 'TK_TAG_OPEN';
  this.tag_name = '';
  this.is_inline_element = false;
  this.is_unformatted = false;
  this.is_content_unformatted = false;
  this.is_empty_element = false;
  this.is_start_tag = false;
  this.is_end_tag = false;
  this.indent_content = false;
  this.multiline_content = false;
  this.custom_beautifier_name = null;
  this.start_tag_token = null;
  this.attr_count = 0;
  this.has_wrapped_attrs = false;
  this.alignment_size = 0;
  this.tag_complete = false;
  this.tag_start_char = '';
  this.tag_check = '';

  if (!raw_token) {
    this.tag_complete = true;
  } else {
    var tag_check_match;

    this.tag_start_char = raw_token.text[0];
    this.text = raw_token.text;

    if (this.tag_start_char === '<') {
      tag_check_match = raw_token.text.match(/^<([^\s>]*)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';
    } else {
      tag_check_match = raw_token.text.match(/^{{(?:[\^]|#\*?)?([^\s}]+)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';

      // handle "{{#> myPartial}}
      if (raw_token.text === '{{#>' && this.tag_check === '>' && raw_token.next !== null) {
        this.tag_check = raw_token.next.text;
      }
    }
    this.tag_check = this.tag_check.toLowerCase();

    if (raw_token.type === TOKEN$4.COMMENT) {
      this.tag_complete = true;
    }

    this.is_start_tag = this.tag_check.charAt(0) !== '/';
    this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;
    this.is_end_tag = !this.is_start_tag ||
      (raw_token.closed && raw_token.closed.text === '/>');

    // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.
    this.is_end_tag = this.is_end_tag ||
      (this.tag_start_char === '{' && (this.text.length < 3 || (/[^#\^]/.test(this.text.charAt(2)))));
  }
};

Beautifier$4.prototype._get_tag_open_token = function(raw_token) { //function to get a full tag and parse its type
  var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);

  parser_token.alignment_size = this._options.wrap_attributes_indent_size;

  parser_token.is_end_tag = parser_token.is_end_tag ||
    in_array$2(parser_token.tag_check, this._options.void_elements);

  parser_token.is_empty_element = parser_token.tag_complete ||
    (parser_token.is_start_tag && parser_token.is_end_tag);

  parser_token.is_unformatted = !parser_token.tag_complete && in_array$2(parser_token.tag_check, this._options.unformatted);
  parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array$2(parser_token.tag_check, this._options.content_unformatted);
  parser_token.is_inline_element = in_array$2(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === '{';

  return parser_token;
};

Beautifier$4.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {

  if (!parser_token.is_empty_element) {
    if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
      parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors
    } else { // it's a start-tag
      // check if this tag is starting an element that has optional end element
      // and do an ending needed
      if (this._do_optional_end_element(parser_token)) {
        if (!parser_token.is_inline_element) {
          if (parser_token.parent) {
            parser_token.parent.multiline_content = true;
          }
          printer.print_newline(false);
        }

      }

      this._tag_stack.record_tag(parser_token); //push it on the tag stack

      if ((parser_token.tag_name === 'script' || parser_token.tag_name === 'style') &&
        !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {
        parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);
      }
    }
  }

  if (in_array$2(parser_token.tag_check, this._options.extra_liners)) { //check if this double needs an extra line
    printer.print_newline(false);
    if (!printer._output.just_added_blankline()) {
      printer.print_newline(true);
    }
  }

  if (parser_token.is_empty_element) { //if this tag name is a single tag type (either in the list or has a closing /)

    // if you hit an else case, reset the indent level if you are inside an:
    // 'if', 'unless', or 'each' block.
    if (parser_token.tag_start_char === '{' && parser_token.tag_check === 'else') {
      this._tag_stack.indent_to_tag(['if', 'unless', 'each']);
      parser_token.indent_content = true;
      // Don't add a newline if opening {{#if}} tag is on the current line
      var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);
      if (!foundIfOnCurrentLine) {
        printer.print_newline(false);
      }
    }

    // Don't add a newline before elements that should remain where they are.
    if (parser_token.tag_name === '!--' && last_token.type === TOKEN$4.TAG_CLOSE &&
      last_tag_token.is_end_tag && parser_token.text.indexOf('\n') === -1) ; else if (!parser_token.is_inline_element && !parser_token.is_unformatted) {
      printer.print_newline(false);
    }
  } else if (parser_token.is_unformatted || parser_token.is_content_unformatted) {
    if (!parser_token.is_inline_element && !parser_token.is_unformatted) {
      printer.print_newline(false);
    }
  } else if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
    if ((parser_token.start_tag_token && parser_token.start_tag_token.multiline_content) ||
      !(parser_token.is_inline_element ||
        (last_tag_token.is_inline_element) ||
        (last_token.type === TOKEN$4.TAG_CLOSE &&
          parser_token.start_tag_token === last_tag_token) ||
        (last_token.type === 'TK_CONTENT')
      )) {
      printer.print_newline(false);
    }
  } else { // it's a start-tag
    parser_token.indent_content = !parser_token.custom_beautifier_name;

    if (parser_token.tag_start_char === '<') {
      if (parser_token.tag_name === 'html') {
        parser_token.indent_content = this._options.indent_inner_html;
      } else if (parser_token.tag_name === 'head') {
        parser_token.indent_content = this._options.indent_head_inner_html;
      } else if (parser_token.tag_name === 'body') {
        parser_token.indent_content = this._options.indent_body_inner_html;
      }
    }

    if (!parser_token.is_inline_element && last_token.type !== 'TK_CONTENT') {
      if (parser_token.parent) {
        parser_token.parent.multiline_content = true;
      }
      printer.print_newline(false);
    }
  }
};

//To be used for <p> tag special case:
var p_closers = ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'];
var p_parent_excludes = ['a', 'audio', 'del', 'ins', 'map', 'noscript', 'video'];

Beautifier$4.prototype._do_optional_end_element = function(parser_token) {
  var result = null;
  // NOTE: cases of "if there is no more content in the parent element"
  // are handled automatically by the beautifier.
  // It assumes parent or ancestor close tag closes all children.
  // https://www.w3.org/TR/html5/syntax.html#optional-tags
  if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {
    return;

  }

  if (parser_token.tag_name === 'body') {
    // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.
    result = result || this._tag_stack.try_pop('head');

    //} else if (parser_token.tag_name === 'body') {
    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.

  } else if (parser_token.tag_name === 'li') {
    // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('li', ['ol', 'ul']);

  } else if (parser_token.tag_name === 'dd' || parser_token.tag_name === 'dt') {
    // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.
    // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.
    result = result || this._tag_stack.try_pop('dt', ['dl']);
    result = result || this._tag_stack.try_pop('dd', ['dl']);


  } else if (parser_token.parent.tag_name === 'p' && p_closers.indexOf(parser_token.tag_name) !== -1) {
    // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method
    // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.
    // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.
    // But to start with (if we ignore "autonomous custom elements") the exclusion would be fine.
    var p_parent = parser_token.parent.parent;
    if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {
      result = result || this._tag_stack.try_pop('p');
    }
  } else if (parser_token.tag_name === 'rp' || parser_token.tag_name === 'rt') {
    // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('rt', ['ruby', 'rtc']);
    result = result || this._tag_stack.try_pop('rp', ['ruby', 'rtc']);

  } else if (parser_token.tag_name === 'optgroup') {
    // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('optgroup', ['select']);
    //result = result || this._tag_stack.try_pop('option', ['select']);

  } else if (parser_token.tag_name === 'option') {
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('option', ['select', 'datalist', 'optgroup']);

  } else if (parser_token.tag_name === 'colgroup') {
    // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);

  } else if (parser_token.tag_name === 'thead') {
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);

    //} else if (parser_token.tag_name === 'caption') {
    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.

  } else if (parser_token.tag_name === 'tbody' || parser_token.tag_name === 'tfoot') {
    // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.
    // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('thead', ['table']);
    result = result || this._tag_stack.try_pop('tbody', ['table']);

    //} else if (parser_token.tag_name === 'tfoot') {
    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.

  } else if (parser_token.tag_name === 'tr') {
    // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('tr', ['table', 'thead', 'tbody', 'tfoot']);

  } else if (parser_token.tag_name === 'th' || parser_token.tag_name === 'td') {
    // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.
    // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('td', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
    result = result || this._tag_stack.try_pop('th', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
  }

  // Start element omission not handled currently
  // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.
  // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
  // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)

  // Fix up the parent of the parser token
  parser_token.parent = this._tag_stack.get_parser_token();

  return result;
};

var Beautifier_1$2 = Beautifier$4;

var beautifier$2 = {
	Beautifier: Beautifier_1$2
};

var Beautifier$5 = beautifier$2.Beautifier,
  Options$9 = options$3.Options;

function style_html(html_source, options, js_beautify, css_beautify) {
  var beautifier = new Beautifier$5(html_source, options, js_beautify, css_beautify);
  return beautifier.beautify();
}

var html = style_html;
var defaultOptions$2 = function() {
  return new Options$9();
};
html.defaultOptions = defaultOptions$2;

function style_html$1(html_source, options, js, css$1) {
  js = js || javascript;
  css$1 = css$1 || css;
  return html(html_source, options, js, css$1);
}
style_html$1.defaultOptions = html.defaultOptions;

var js = javascript;
var css$1 = css;
var html$1 = style_html$1;

var src$1 = {
	js: js,
	css: css$1,
	html: html$1
};

var js$1 = createCommonjsModule(function (module) {

/**
The following batches are equivalent:

var beautify_js = require('js-beautify');
var beautify_js = require('js-beautify').js;
var beautify_js = require('js-beautify').js_beautify;

var beautify_css = require('js-beautify').css;
var beautify_css = require('js-beautify').css_beautify;

var beautify_html = require('js-beautify').html;
var beautify_html = require('js-beautify').html_beautify;

All methods returned accept two arguments, the source string and an options object.
**/

function get_beautify(js_beautify, css_beautify, html_beautify) {
  // the default is js
  var beautify = function(src, config) {
    return js_beautify.js_beautify(src, config);
  };

  // short aliases
  beautify.js = js_beautify.js_beautify;
  beautify.css = css_beautify.css_beautify;
  beautify.html = html_beautify.html_beautify;

  // legacy aliases
  beautify.js_beautify = js_beautify.js_beautify;
  beautify.css_beautify = css_beautify.css_beautify;
  beautify.html_beautify = html_beautify.html_beautify;

  return beautify;
}

{
  (function(mod) {
    var beautifier = src$1;
    beautifier.js_beautify = beautifier.js;
    beautifier.css_beautify = beautifier.css;
    beautifier.html_beautify = beautifier.html;

    mod.exports = get_beautify(beautifier, beautifier, beautifier);

  })(module);
}
});

function format(document, range) {
    if (range === null) {
        const start = new vscode.Position(0, 0);
        const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
        range = new vscode.Range(start, end);
    }
    const result = [];
    const content = document.getText(range);
    const formatted = beatify(content, document.languageId);
    const isFormatted = !!formatted && formatted !== content;
    if (isFormatted) {
        result.push(new vscode.TextEdit(range, formatted));
    }
    return result;
}
function beatify(documentContent, languageId) {
    let beatiFunc = null;
    switch (languageId) {
        case 'scss.erb':
            languageId = 'css';
            beatiFunc = js$1.css;
        case 'css.erb':
            beatiFunc = js$1.css;
            break;
        // case 'json':
        //     languageId = 'javascript';
        case 'js.erb':
            languageId = 'javascript';
            beatiFunc = js$1.js;
            break;
        case 'html.erb':
            beatiFunc = js$1.html;
            break;
        default:
            showMesage('Sorry, this language is not supported. Only support Javascript, CSS and HTML.');
            break;
    }
    if (!beatiFunc)
        return;
    let tabSize = null;
    const beutifyOptions = {};
    const prefix = languageId.split('.')[0];
    const config = vscode.workspace.getConfiguration('');
    try {
        tabSize = config[`[${prefix}`][`erb]`]['editor.tabSize'];
    }
    catch (e) {
        tabSize = vscode.workspace.getConfiguration('editor').get('tabSize');
    }
    if (tabSize != null) {
        beutifyOptions.indent_size = tabSize;
    }
    return beatiFunc(documentContent, beutifyOptions);
}
class Formatter {
    beautify() {
        // Create as needed
        const window = vscode.window;
        let range;
        // Get the current text editor
        const activeEditor = window.activeTextEditor;
        if (!activeEditor) {
            return;
        }
        const document = activeEditor.document;
        if (range === null) {
            const start = new vscode.Position(0, 0);
            const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
            range = new vscode.Range(start, end);
        }
        // var result: vscode.TextEdit[] = [];
        const content = document.getText(range);
        const formatted = beatify(content, document.languageId);
        const isFormatted = !!formatted && formatted !== content;
        if (isFormatted) {
            return activeEditor.edit((editor) => {
                const start = new vscode.Position(0, 0);
                const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
                range = new vscode.Range(start, end);
                return editor.replace(range, formatted);
            });
        }
    }
    registerBeautify(range) {
        // Create as needed
        const window = vscode.window;
        // Get the current text editor
        const editor = window.activeTextEditor;
        if (!editor) {
            return;
        }
        const document = editor.document;
        return format(document, range);
    }
    onSave(e) {
        const { document } = e;
        const docType = ['css.erb', 'scss.erb', 'html.erb'];
        if (docType.indexOf(document.languageId) === -1) {
            return;
        }
        const prefix = document.languageId.split('.')[0];
        let onSave = false;
        const config = vscode.workspace.getConfiguration('', e.document);
        try {
            onSave = config[`[${prefix}`][`erb]`]['editor.formatOnSave'];
        }
        catch (e) {
            onSave = vscode.workspace.getConfiguration('editor').get('formatOnSave');
        }
        if (!onSave) {
            return;
        }
        const start = new vscode.Position(0, 0);
        const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
        let range = new vscode.Range(start, end);
        // var result: vscode.TextEdit[] = [];
        const content = document.getText(range);
        const formatted = beatify(content, document.languageId);
        const isFormatted = !!formatted && formatted !== content;
        if (isFormatted) {
            const start = new vscode.Position(0, 0);
            const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
            range = new vscode.Range(start, end);
            const edit = vscode.TextEdit.replace(range, formatted);
            e.waitUntil(Promise.resolve([edit]));
        }
    }
}
function showMesage(msg) {
    vscode.window.showInformationMessage(msg);
}

const RAILS_MODE = { language: 'ruby', scheme: 'file' };
const VIEW_MODE = {
    pattern: '**/views/**',
    scheme: 'file',
};
function railsNavigation() {
    if (!vscode.window.activeTextEditor) {
        return;
    }
    const relativeFileName = vscode.workspace.asRelativePath(vscode.window.activeTextEditor.document.fileName);
    const line = vscode.window.activeTextEditor.document
        .lineAt(vscode.window.activeTextEditor.selection.active.line)
        .text.trim();
    const rh = new RailsHelper(relativeFileName, line);
    rh.showFileList();
}
function registerFormatter(context) {
    console.log('registerFormatter');
    const docType = ['css.erb', 'scss.erb', 'html.erb'];
    for (let i = 0, l = docType.length; i < l; i++) {
        registerDocType(docType[i]);
    }
    const formatter = new Formatter();
    context.subscriptions.push(vscode.commands.registerCommand('erb.formatting', () => {
        formatter.beautify();
    }));
    context.subscriptions.push(vscode.workspace.onWillSaveTextDocument((e) => {
        formatter.onSave(e);
    }));
    function registerDocType(type) {
        // context.subscriptions.push(vscode.languages.registerDocumentFormattingEditProvider(type, {
        //   provideDocumentFormattingEdits: (document, options, token) => {
        //     return formatter.registerBeautify(null)
        //   }
        // }));
        // Note: A document range provider is also a document formatter
        // which means there is no need to register a document formatter when also registering a range provider.
        context.subscriptions.push(vscode.languages.registerDocumentRangeFormattingEditProvider(type, {
            provideDocumentRangeFormattingEdits: (document, range, options, token) => {
                const start = new vscode.Position(0, 0);
                const end = new vscode.Position(document.lineCount - 1, document.lineAt(document.lineCount - 1).text.length);
                return formatter.registerBeautify(new vscode.Range(start, end));
            },
        }));
    }
}
function activate(context) {
    context.subscriptions.push(vscode.commands.registerCommand('Rails:Navigation', railsNavigation));
    context.subscriptions.push(vscode.languages.registerDefinitionProvider(RAILS_MODE, new RailsDefinitionProvider()));
    context.subscriptions.push(vscode.languages.registerCompletionItemProvider({ scheme: 'file' }, new RailsCompletionItemProvider(), '.', '"', ':', "'"));
    // since VIEW_MODE use glob pattern ,must make sure work on a rails project
    function registerViewDefinitionProvider() {
        context.subscriptions.push(vscode.languages.registerDefinitionProvider(VIEW_MODE, new ViewDefinitionProvider()));
    }
    function registerViewDocCommand() {
        context.subscriptions.push(vscode.commands.registerCommand('Rails:Document', viewDoc, context));
    }
    vscode.workspace.findFiles('Gemfile').then(async (uris) => {
        if (uris.length === 1) {
            const fileAbsPath = uris[0].fsPath;
            const fileStream = fs.createReadStream(fileAbsPath);
            const rl = readline.createInterface({
                input: fileStream,
                crlfDelay: Infinity,
            });
            for await (const lineText of rl) {
                if (/gem\s+['"]rails['"]/.test(lineText)) {
                    registerViewDefinitionProvider();
                    registerViewDocCommand();
                    registerFormatter(context);
                    console.log('Project Gemfile contains rails');
                    break;
                }
            }
        }
    });
}

exports.activate = activate;
